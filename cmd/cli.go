package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"reflect"

	"github.com/cgascoig/isctl/openapi"
	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
)

func isFlagPassed(flagset *pflag.FlagSet, name string) bool {
	found := false
	flagset.Visit(func(f *pflag.Flag) {
		if f.Name == name {
			found = true
		}
	})
	return found
}

func isMoRef(v interface{}) bool {
	val := reflect.Indirect(reflect.ValueOf(v))
	t := val.Type()
	if t.Kind() != reflect.Struct {
		return false
	}

	_, ok := t.FieldByName("MoMoRef")

	return ok
}

func setMoRefSelector(v interface{}, selector string) bool {
	if !isMoRef(v) {
		return false
	}

	moref := new(openapi.MoMoRef)
	moref.ClassId = "mo.MoRef"
	moref.Selector = &selector

	val := reflect.ValueOf(v).Elem()
	val.FieldByName("MoMoRef").Set(reflect.ValueOf(moref))

	return true
}

func runCmd(cmd *cobra.Command, args []string) {
	log.Printf("Running command %s with args %v", cmd.Use, args)
}

// ResultHandler is the function signature to handle API results
type ResultHandler = func(result interface{}, httpResponse *http.Response, err error)

// GetCommands returns the cobra command tree for the API
func GetCommands(client *openapi.APIClient, resultHandler ResultHandler) *cobra.Command {
	rootCmd :=
		func() *cobra.Command {

			cmd := &cobra.Command{
				Use: "",

				Short: "",
				Long: `
`,
			}

			cmd.AddCommand(
				func() *cobra.Command {

					cmd := &cobra.Command{
						Use: "create",

						Short: "Create resouce(s)",
						Long: `Create resouce(s)
`,
					}

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "adapter",

								Short: "Create Adapter resource(s)",
								Long: `Create Adapter resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var Settings with unknown data type []AdapterAdapterConfig

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "configpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.AdapterApi.CreateAdapterConfigPolicy(authCtx)

											body := openapi.NewAdapterConfigPolicy()

											//Set class id and object type by default
											body.ClassId = "adapter.ConfigPolicy"
											body.ObjectType = "adapter.ConfigPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.AdapterConfigPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'adapter.ConfigPolicy' resource.",
										Long: `Create a 'adapter.ConfigPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var Settings with unknown data type []AdapterAdapterConfig

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "updateadapterconfigpolicy",

										Short: "Update a 'adapter.ConfigPolicy' resource.",
										Long: `Update a 'adapter.ConfigPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.AdapterApi.UpdateAdapterConfigPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "appliance",

								Short: "Create Appliance resource(s)",
								Long: `Create Appliance resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Filename string

									var Protocol string

									var RemoteHost string

									var RemotePath string

									//Skipping var RemotePort with unknown data type int64

									var Username string

									//Skipping var ElapsedTime with unknown data type int64

									//Skipping var EndTime with unknown data type time.Time

									var IsPasswordSet bool

									var Messages []string

									var Password string

									//Skipping var StartTime with unknown data type time.Time

									var Status string

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "backup",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ApplianceApi.CreateApplianceBackup(authCtx)

											body := openapi.NewApplianceBackup()

											//Set class id and object type by default
											body.ClassId = "appliance.Backup"
											body.ObjectType = "appliance.Backup"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Filename") {
												body.Filename = &Filename
											}

											if isFlagPassed(cmd.Flags(), "Protocol") {
												body.Protocol = &Protocol
											}

											if isFlagPassed(cmd.Flags(), "RemoteHost") {
												body.RemoteHost = &RemoteHost
											}

											if isFlagPassed(cmd.Flags(), "RemotePath") {
												body.RemotePath = &RemotePath
											}

											if isFlagPassed(cmd.Flags(), "Username") {
												body.Username = &Username
											}

											if isFlagPassed(cmd.Flags(), "IsPasswordSet") {
												body.IsPasswordSet = &IsPasswordSet
											}

											if isFlagPassed(cmd.Flags(), "Messages") {
												body.Messages = &Messages
											}

											if isFlagPassed(cmd.Flags(), "Password") {
												body.Password = &Password
											}

											if isFlagPassed(cmd.Flags(), "Status") {
												body.Status = &Status
											}

											if isFlagPassed(cmd.Flags(), "Account") && isMoRef(openapi.IamAccountRelationship{}) {
												if f, err := cmd.Flags().GetString("Account"); err == nil {
													paramVal := openapi.IamAccountRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Account = &paramVal
														//                                if v, ok := v.(openapi.IamAccountRelationship); ok {
														//                                    body.Account = &v
														//                                }
													}
												}
											}

											req = req.ApplianceBackup(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'appliance.Backup' resource.",
										Long: `Create a 'appliance.Backup' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Filename, "Filename", "", "Filename")

									cmd.Flags().StringVar(&Protocol, "Protocol", "", "Protocol")

									cmd.Flags().StringVar(&RemoteHost, "RemoteHost", "", "RemoteHost")

									cmd.Flags().StringVar(&RemotePath, "RemotePath", "", "RemotePath")

									cmd.Flags().StringVar(&Username, "Username", "", "Username")

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().StringSliceVar(&Messages, "Messages", []string{}, "Messages")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									cmd.Flags().StringVar(&Status, "Status", "", "Status")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Filename string

									var Protocol string

									var RemoteHost string

									var RemotePath string

									//Skipping var RemotePort with unknown data type int64

									var Username string

									//Skipping var BackupTime with unknown data type time.Time

									var IsPasswordSet bool

									var ManualBackup bool

									var Password string

									//Skipping var Schedule with unknown data type OnpremSchedule

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "backuppolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ApplianceApi.CreateApplianceBackupPolicy(authCtx)

											body := openapi.NewApplianceBackupPolicy()

											//Set class id and object type by default
											body.ClassId = "appliance.BackupPolicy"
											body.ObjectType = "appliance.BackupPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Filename") {
												body.Filename = &Filename
											}

											if isFlagPassed(cmd.Flags(), "Protocol") {
												body.Protocol = &Protocol
											}

											if isFlagPassed(cmd.Flags(), "RemoteHost") {
												body.RemoteHost = &RemoteHost
											}

											if isFlagPassed(cmd.Flags(), "RemotePath") {
												body.RemotePath = &RemotePath
											}

											if isFlagPassed(cmd.Flags(), "Username") {
												body.Username = &Username
											}

											if isFlagPassed(cmd.Flags(), "IsPasswordSet") {
												body.IsPasswordSet = &IsPasswordSet
											}

											if isFlagPassed(cmd.Flags(), "ManualBackup") {
												body.ManualBackup = &ManualBackup
											}

											if isFlagPassed(cmd.Flags(), "Password") {
												body.Password = &Password
											}

											if isFlagPassed(cmd.Flags(), "Schedule") && isMoRef(openapi.OnpremSchedule{}) {
												if f, err := cmd.Flags().GetString("Schedule"); err == nil {
													paramVal := openapi.OnpremSchedule{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Schedule = &paramVal
														//                                if v, ok := v.(openapi.OnpremSchedule); ok {
														//                                    body.Schedule = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Account") && isMoRef(openapi.IamAccountRelationship{}) {
												if f, err := cmd.Flags().GetString("Account"); err == nil {
													paramVal := openapi.IamAccountRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Account = &paramVal
														//                                if v, ok := v.(openapi.IamAccountRelationship); ok {
														//                                    body.Account = &v
														//                                }
													}
												}
											}

											req = req.ApplianceBackupPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'appliance.BackupPolicy' resource.",
										Long: `Create a 'appliance.BackupPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Filename, "Filename", "", "Filename")

									cmd.Flags().StringVar(&Protocol, "Protocol", "", "Protocol")

									cmd.Flags().StringVar(&RemoteHost, "RemoteHost", "", "RemoteHost")

									cmd.Flags().StringVar(&RemotePath, "RemotePath", "", "RemotePath")

									cmd.Flags().StringVar(&Username, "Username", "", "Username")

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().BoolVar(&ManualBackup, "ManualBackup", false, "ManualBackup")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									//Skipping var Schedule with unknown data type OnpremSchedule
									if isMoRef(openapi.OnpremSchedule{}) {
										cmd.Flags().String("Schedule", "", "Schedule")
									}

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Enable bool

									var Name string

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var ParentConfig with unknown data type ApplianceDataExportPolicyRelationship

									//Skipping var SubConfigs with unknown data type []ApplianceDataExportPolicyRelationship

									cmd := &cobra.Command{
										Use: "dataexportpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ApplianceApi.CreateApplianceDataExportPolicy(authCtx)

											body := openapi.NewApplianceDataExportPolicy()

											//Set class id and object type by default
											body.ClassId = "appliance.DataExportPolicy"
											body.ObjectType = "appliance.DataExportPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Enable") {
												body.Enable = &Enable
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Account") && isMoRef(openapi.IamAccountRelationship{}) {
												if f, err := cmd.Flags().GetString("Account"); err == nil {
													paramVal := openapi.IamAccountRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Account = &paramVal
														//                                if v, ok := v.(openapi.IamAccountRelationship); ok {
														//                                    body.Account = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ParentConfig") && isMoRef(openapi.ApplianceDataExportPolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("ParentConfig"); err == nil {
													paramVal := openapi.ApplianceDataExportPolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ParentConfig = &paramVal
														//                                if v, ok := v.(openapi.ApplianceDataExportPolicyRelationship); ok {
														//                                    body.ParentConfig = &v
														//                                }
													}
												}
											}

											req = req.ApplianceDataExportPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'appliance.DataExportPolicy' resource.",
										Long: `Create a 'appliance.DataExportPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&Enable, "Enable", false, "Enable")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var ParentConfig with unknown data type ApplianceDataExportPolicyRelationship
									if isMoRef(openapi.ApplianceDataExportPolicyRelationship{}) {
										cmd.Flags().String("ParentConfig", "", "ParentConfig")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceId string

									var Hostname string

									var IsPasswordSet bool

									var Message string

									var Password string

									var PlatformType string

									var RequestId string

									var SecurityToken string

									var Status string

									var Username string

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "deviceclaim",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ApplianceApi.CreateApplianceDeviceClaim(authCtx)

											body := openapi.NewApplianceDeviceClaim()

											//Set class id and object type by default
											body.ClassId = "appliance.DeviceClaim"
											body.ObjectType = "appliance.DeviceClaim"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "DeviceId") {
												body.DeviceId = &DeviceId
											}

											if isFlagPassed(cmd.Flags(), "Hostname") {
												body.Hostname = &Hostname
											}

											if isFlagPassed(cmd.Flags(), "IsPasswordSet") {
												body.IsPasswordSet = &IsPasswordSet
											}

											if isFlagPassed(cmd.Flags(), "Message") {
												body.Message = &Message
											}

											if isFlagPassed(cmd.Flags(), "Password") {
												body.Password = &Password
											}

											if isFlagPassed(cmd.Flags(), "PlatformType") {
												body.PlatformType = &PlatformType
											}

											if isFlagPassed(cmd.Flags(), "RequestId") {
												body.RequestId = &RequestId
											}

											if isFlagPassed(cmd.Flags(), "SecurityToken") {
												body.SecurityToken = &SecurityToken
											}

											if isFlagPassed(cmd.Flags(), "Status") {
												body.Status = &Status
											}

											if isFlagPassed(cmd.Flags(), "Username") {
												body.Username = &Username
											}

											if isFlagPassed(cmd.Flags(), "Account") && isMoRef(openapi.IamAccountRelationship{}) {
												if f, err := cmd.Flags().GetString("Account"); err == nil {
													paramVal := openapi.IamAccountRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Account = &paramVal
														//                                if v, ok := v.(openapi.IamAccountRelationship); ok {
														//                                    body.Account = &v
														//                                }
													}
												}
											}

											req = req.ApplianceDeviceClaim(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'appliance.DeviceClaim' resource.",
										Long: `Create a 'appliance.DeviceClaim' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceId, "DeviceId", "", "DeviceId")

									cmd.Flags().StringVar(&Hostname, "Hostname", "", "Hostname")

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().StringVar(&Message, "Message", "", "Message")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									cmd.Flags().StringVar(&RequestId, "RequestId", "", "RequestId")

									cmd.Flags().StringVar(&SecurityToken, "SecurityToken", "", "SecurityToken")

									cmd.Flags().StringVar(&Status, "Status", "", "Status")

									cmd.Flags().StringVar(&Username, "Username", "", "Username")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var IsPasswordSet bool

									var Message string

									var Password string

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "diagsetting",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ApplianceApi.CreateApplianceDiagSetting(authCtx)

											body := openapi.NewApplianceDiagSetting()

											//Set class id and object type by default
											body.ClassId = "appliance.DiagSetting"
											body.ObjectType = "appliance.DiagSetting"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "IsPasswordSet") {
												body.IsPasswordSet = &IsPasswordSet
											}

											if isFlagPassed(cmd.Flags(), "Message") {
												body.Message = &Message
											}

											if isFlagPassed(cmd.Flags(), "Password") {
												body.Password = &Password
											}

											if isFlagPassed(cmd.Flags(), "Account") && isMoRef(openapi.IamAccountRelationship{}) {
												if f, err := cmd.Flags().GetString("Account"); err == nil {
													paramVal := openapi.IamAccountRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Account = &paramVal
														//                                if v, ok := v.(openapi.IamAccountRelationship); ok {
														//                                    body.Account = &v
														//                                }
													}
												}
											}

											req = req.ApplianceDiagSetting(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'appliance.DiagSetting' resource.",
										Long: `Create a 'appliance.DiagSetting' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().StringVar(&Message, "Message", "", "Message")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Filename string

									var Protocol string

									var RemoteHost string

									var RemotePath string

									//Skipping var RemotePort with unknown data type int64

									var Username string

									//Skipping var ElapsedTime with unknown data type int64

									//Skipping var EndTime with unknown data type time.Time

									var IsPasswordSet bool

									var Messages []string

									var Password string

									//Skipping var StartTime with unknown data type time.Time

									var Status string

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "restore",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ApplianceApi.CreateApplianceRestore(authCtx)

											body := openapi.NewApplianceRestore()

											//Set class id and object type by default
											body.ClassId = "appliance.Restore"
											body.ObjectType = "appliance.Restore"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Filename") {
												body.Filename = &Filename
											}

											if isFlagPassed(cmd.Flags(), "Protocol") {
												body.Protocol = &Protocol
											}

											if isFlagPassed(cmd.Flags(), "RemoteHost") {
												body.RemoteHost = &RemoteHost
											}

											if isFlagPassed(cmd.Flags(), "RemotePath") {
												body.RemotePath = &RemotePath
											}

											if isFlagPassed(cmd.Flags(), "Username") {
												body.Username = &Username
											}

											if isFlagPassed(cmd.Flags(), "IsPasswordSet") {
												body.IsPasswordSet = &IsPasswordSet
											}

											if isFlagPassed(cmd.Flags(), "Messages") {
												body.Messages = &Messages
											}

											if isFlagPassed(cmd.Flags(), "Password") {
												body.Password = &Password
											}

											if isFlagPassed(cmd.Flags(), "Status") {
												body.Status = &Status
											}

											if isFlagPassed(cmd.Flags(), "Account") && isMoRef(openapi.IamAccountRelationship{}) {
												if f, err := cmd.Flags().GetString("Account"); err == nil {
													paramVal := openapi.IamAccountRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Account = &paramVal
														//                                if v, ok := v.(openapi.IamAccountRelationship); ok {
														//                                    body.Account = &v
														//                                }
													}
												}
											}

											req = req.ApplianceRestore(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'appliance.Restore' resource.",
										Long: `Create a 'appliance.Restore' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Filename, "Filename", "", "Filename")

									cmd.Flags().StringVar(&Protocol, "Protocol", "", "Protocol")

									cmd.Flags().StringVar(&RemoteHost, "RemoteHost", "", "RemoteHost")

									cmd.Flags().StringVar(&RemotePath, "RemotePath", "", "RemotePath")

									cmd.Flags().StringVar(&Username, "Username", "", "Username")

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().StringSliceVar(&Messages, "Messages", []string{}, "Messages")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									cmd.Flags().StringVar(&Status, "Status", "", "Status")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Filename string

									var Protocol string

									var RemoteHost string

									var RemotePath string

									//Skipping var RemotePort with unknown data type int64

									var Username string

									//Skipping var BackupTime with unknown data type time.Time

									var IsPasswordSet bool

									var ManualBackup bool

									var Password string

									//Skipping var Schedule with unknown data type OnpremSchedule

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "updateappliancebackuppolicy",

										Short: "Update a 'appliance.BackupPolicy' resource.",
										Long: `Update a 'appliance.BackupPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.UpdateApplianceBackupPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Filename, "Filename", "", "Filename")

									cmd.Flags().StringVar(&Protocol, "Protocol", "", "Protocol")

									cmd.Flags().StringVar(&RemoteHost, "RemoteHost", "", "RemoteHost")

									cmd.Flags().StringVar(&RemotePath, "RemotePath", "", "RemotePath")

									cmd.Flags().StringVar(&Username, "Username", "", "Username")

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().BoolVar(&ManualBackup, "ManualBackup", false, "ManualBackup")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									//Skipping var Schedule with unknown data type OnpremSchedule
									if isMoRef(openapi.OnpremSchedule{}) {
										cmd.Flags().String("Schedule", "", "Schedule")
									}

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var Certificate with unknown data type IamCertificateRelationship

									cmd := &cobra.Command{
										Use: "updateappliancecertificatesetting",

										Short: "Update a 'appliance.CertificateSetting' resource.",
										Long: `Update a 'appliance.CertificateSetting' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.UpdateApplianceCertificateSetting(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var Certificate with unknown data type IamCertificateRelationship
									if isMoRef(openapi.IamCertificateRelationship{}) {
										cmd.Flags().String("Certificate", "", "Certificate")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Enable bool

									var Name string

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var ParentConfig with unknown data type ApplianceDataExportPolicyRelationship

									//Skipping var SubConfigs with unknown data type []ApplianceDataExportPolicyRelationship

									cmd := &cobra.Command{
										Use: "updateappliancedataexportpolicy",

										Short: "Update a 'appliance.DataExportPolicy' resource.",
										Long: `Update a 'appliance.DataExportPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.UpdateApplianceDataExportPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&Enable, "Enable", false, "Enable")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var ParentConfig with unknown data type ApplianceDataExportPolicyRelationship
									if isMoRef(openapi.ApplianceDataExportPolicyRelationship{}) {
										cmd.Flags().String("ParentConfig", "", "ParentConfig")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var IsPasswordSet bool

									var Message string

									var Password string

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "updateappliancediagsetting",

										Short: "Update a 'appliance.DiagSetting' resource.",
										Long: `Update a 'appliance.DiagSetting' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.UpdateApplianceDiagSetting(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().StringVar(&Message, "Message", "", "Message")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var BuildType string

									//Skipping var Capabilities with unknown data type []ApplianceKeyValuePair

									var CloudUrl string

									//Skipping var EndTime with unknown data type time.Time

									var SetupStates []string

									//Skipping var StartTime with unknown data type time.Time

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "updateappliancesetupinfo",

										Short: "Update a 'appliance.SetupInfo' resource.",
										Long: `Update a 'appliance.SetupInfo' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.UpdateApplianceSetupInfo(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&BuildType, "BuildType", "", "BuildType")

									cmd.Flags().StringVar(&CloudUrl, "CloudUrl", "", "CloudUrl")

									cmd.Flags().StringSliceVar(&SetupStates, "SetupStates", []string{}, "SetupStates")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Active bool

									var AutoCreated bool

									//Skipping var CompletedPhases with unknown data type []OnpremUpgradePhase

									//Skipping var CurrentPhase with unknown data type OnpremUpgradePhase

									var Description string

									//Skipping var ElapsedTime with unknown data type int64

									//Skipping var EndTime with unknown data type time.Time

									var Fingerprint string

									var Messages []string

									var Services []string

									//Skipping var StartTime with unknown data type time.Time

									var Status string

									//Skipping var TotalPhases with unknown data type int64

									var UiPackages []string

									var Version string

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var ImageBundle with unknown data type ApplianceImageBundleRelationship

									cmd := &cobra.Command{
										Use: "updateapplianceupgrade",

										Short: "Update a 'appliance.Upgrade' resource.",
										Long: `Update a 'appliance.Upgrade' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.UpdateApplianceUpgrade(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&Active, "Active", false, "Active")

									cmd.Flags().BoolVar(&AutoCreated, "AutoCreated", false, "AutoCreated")

									//Skipping var CurrentPhase with unknown data type OnpremUpgradePhase
									if isMoRef(openapi.OnpremUpgradePhase{}) {
										cmd.Flags().String("CurrentPhase", "", "CurrentPhase")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Fingerprint, "Fingerprint", "", "Fingerprint")

									cmd.Flags().StringSliceVar(&Messages, "Messages", []string{}, "Messages")

									cmd.Flags().StringSliceVar(&Services, "Services", []string{}, "Services")

									cmd.Flags().StringVar(&Status, "Status", "", "Status")

									cmd.Flags().StringSliceVar(&UiPackages, "UiPackages", []string{}, "UiPackages")

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var ImageBundle with unknown data type ApplianceImageBundleRelationship
									if isMoRef(openapi.ApplianceImageBundleRelationship{}) {
										cmd.Flags().String("ImageBundle", "", "ImageBundle")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var AutoUpgrade bool

									var BlackoutDatesEnabled bool

									//Skipping var BlackoutEndDate with unknown data type time.Time

									//Skipping var BlackoutStartDate with unknown data type time.Time

									//Skipping var Schedule with unknown data type OnpremSchedule

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "updateapplianceupgradepolicy",

										Short: "Update a 'appliance.UpgradePolicy' resource.",
										Long: `Update a 'appliance.UpgradePolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.UpdateApplianceUpgradePolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&AutoUpgrade, "AutoUpgrade", false, "AutoUpgrade")

									cmd.Flags().BoolVar(&BlackoutDatesEnabled, "BlackoutDatesEnabled", false, "BlackoutDatesEnabled")

									//Skipping var Schedule with unknown data type OnpremSchedule
									if isMoRef(openapi.OnpremSchedule{}) {
										cmd.Flags().String("Schedule", "", "Schedule")
									}

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "asset",

								Short: "Create Asset resource(s)",
								Long: `Create Asset resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var DeviceUpdates with unknown data type []AssetConnectionControlMessage

									var SecurityToken string

									var SerialNumber string

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var Device with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "deviceclaim",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.AssetApi.CreateAssetDeviceClaim(authCtx)

											body := openapi.NewAssetDeviceClaim()

											//Set class id and object type by default
											body.ClassId = "asset.DeviceClaim"
											body.ObjectType = "asset.DeviceClaim"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "SecurityToken") {
												body.SecurityToken = &SecurityToken
											}

											if isFlagPassed(cmd.Flags(), "SerialNumber") {
												body.SerialNumber = &SerialNumber
											}

											if isFlagPassed(cmd.Flags(), "Account") && isMoRef(openapi.IamAccountRelationship{}) {
												if f, err := cmd.Flags().GetString("Account"); err == nil {
													paramVal := openapi.IamAccountRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Account = &paramVal
														//                                if v, ok := v.(openapi.IamAccountRelationship); ok {
														//                                    body.Account = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Device") && isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
												if f, err := cmd.Flags().GetString("Device"); err == nil {
													paramVal := openapi.AssetDeviceRegistrationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Device = &paramVal
														//                                if v, ok := v.(openapi.AssetDeviceRegistrationRelationship); ok {
														//                                    body.Device = &v
														//                                }
													}
												}
											}

											req = req.AssetDeviceClaim(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'asset.DeviceClaim' resource.",
										Long: `Create a 'asset.DeviceClaim' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&SecurityToken, "SecurityToken", "", "SecurityToken")

									cmd.Flags().StringVar(&SerialNumber, "SerialNumber", "", "SerialNumber")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var Device with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("Device", "", "Device")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Credential with unknown data type CommCredential

									var DeviceType string

									var IgnoreCert bool

									var IsEnabled bool

									var ManagementAddress string

									//Skipping var Port with unknown data type int64

									var Protocol string

									//Skipping var Status with unknown data type AssetManagedDeviceStatus

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var DeviceConnectorManager with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var WorkflowInfo with unknown data type WorkflowWorkflowInfoRelationship

									cmd := &cobra.Command{
										Use: "manageddevice",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.AssetApi.CreateAssetManagedDevice(authCtx)

											body := openapi.NewAssetManagedDevice()

											//Set class id and object type by default
											body.ClassId = "asset.ManagedDevice"
											body.ObjectType = "asset.ManagedDevice"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Credential") && isMoRef(openapi.CommCredential{}) {
												if f, err := cmd.Flags().GetString("Credential"); err == nil {
													paramVal := openapi.CommCredential{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Credential = &paramVal
														//                                if v, ok := v.(openapi.CommCredential); ok {
														//                                    body.Credential = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "DeviceType") {
												body.DeviceType = &DeviceType
											}

											if isFlagPassed(cmd.Flags(), "IgnoreCert") {
												body.IgnoreCert = &IgnoreCert
											}

											if isFlagPassed(cmd.Flags(), "IsEnabled") {
												body.IsEnabled = &IsEnabled
											}

											if isFlagPassed(cmd.Flags(), "ManagementAddress") {
												body.ManagementAddress = &ManagementAddress
											}

											if isFlagPassed(cmd.Flags(), "Protocol") {
												body.Protocol = &Protocol
											}

											if isFlagPassed(cmd.Flags(), "Status") && isMoRef(openapi.AssetManagedDeviceStatus{}) {
												if f, err := cmd.Flags().GetString("Status"); err == nil {
													paramVal := openapi.AssetManagedDeviceStatus{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Status = &paramVal
														//                                if v, ok := v.(openapi.AssetManagedDeviceStatus); ok {
														//                                    body.Status = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Account") && isMoRef(openapi.IamAccountRelationship{}) {
												if f, err := cmd.Flags().GetString("Account"); err == nil {
													paramVal := openapi.IamAccountRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Account = &paramVal
														//                                if v, ok := v.(openapi.IamAccountRelationship); ok {
														//                                    body.Account = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "DeviceConnectorManager") && isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
												if f, err := cmd.Flags().GetString("DeviceConnectorManager"); err == nil {
													paramVal := openapi.AssetDeviceRegistrationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.DeviceConnectorManager = &paramVal
														//                                if v, ok := v.(openapi.AssetDeviceRegistrationRelationship); ok {
														//                                    body.DeviceConnectorManager = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "RegisteredDevice") && isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
												if f, err := cmd.Flags().GetString("RegisteredDevice"); err == nil {
													paramVal := openapi.AssetDeviceRegistrationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.RegisteredDevice = &paramVal
														//                                if v, ok := v.(openapi.AssetDeviceRegistrationRelationship); ok {
														//                                    body.RegisteredDevice = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "WorkflowInfo") && isMoRef(openapi.WorkflowWorkflowInfoRelationship{}) {
												if f, err := cmd.Flags().GetString("WorkflowInfo"); err == nil {
													paramVal := openapi.WorkflowWorkflowInfoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.WorkflowInfo = &paramVal
														//                                if v, ok := v.(openapi.WorkflowWorkflowInfoRelationship); ok {
														//                                    body.WorkflowInfo = &v
														//                                }
													}
												}
											}

											req = req.AssetManagedDevice(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'asset.ManagedDevice' resource.",
										Long: `Create a 'asset.ManagedDevice' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Credential with unknown data type CommCredential
									if isMoRef(openapi.CommCredential{}) {
										cmd.Flags().String("Credential", "", "Credential")
									}

									cmd.Flags().StringVar(&DeviceType, "DeviceType", "", "DeviceType")

									cmd.Flags().BoolVar(&IgnoreCert, "IgnoreCert", false, "IgnoreCert")

									cmd.Flags().BoolVar(&IsEnabled, "IsEnabled", false, "IsEnabled")

									cmd.Flags().StringVar(&ManagementAddress, "ManagementAddress", "", "ManagementAddress")

									cmd.Flags().StringVar(&Protocol, "Protocol", "", "Protocol")

									//Skipping var Status with unknown data type AssetManagedDeviceStatus
									if isMoRef(openapi.AssetManagedDeviceStatus{}) {
										cmd.Flags().String("Status", "", "Status")
									}

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var DeviceConnectorManager with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("DeviceConnectorManager", "", "DeviceConnectorManager")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var WorkflowInfo with unknown data type WorkflowWorkflowInfoRelationship
									if isMoRef(openapi.WorkflowWorkflowInfoRelationship{}) {
										cmd.Flags().String("WorkflowInfo", "", "WorkflowInfo")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var LocalConfigurationLocked bool

									var LogLevel string

									//Skipping var Device with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updateassetdeviceconfiguration",

										Short: "Update a 'asset.DeviceConfiguration' resource.",
										Long: `Update a 'asset.DeviceConfiguration' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.AssetApi.UpdateAssetDeviceConfiguration(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&LocalConfigurationLocked, "LocalConfigurationLocked", false, "LocalConfigurationLocked")

									cmd.Flags().StringVar(&LogLevel, "LogLevel", "", "LogLevel")

									//Skipping var Device with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("Device", "", "Device")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Contract with unknown data type AssetContractInformation

									var ContractStatus string

									var CoveredProductLineEndDate string

									var DeviceId string

									var DeviceType string

									//Skipping var EndCustomer with unknown data type AssetCustomerInformation

									//Skipping var EndUserGlobalUltimate with unknown data type AssetGlobalUltimate

									var IsValid bool

									var ItemType string

									var MaintenancePurchaseOrderNumber string

									var MaintenanceSalesOrderNumber string

									var PlatformType string

									//Skipping var Product with unknown data type AssetProductInformation

									var PurchaseOrderNumber string

									//Skipping var ResellerGlobalUltimate with unknown data type AssetGlobalUltimate

									var SalesOrderNumber string

									var ServiceDescription string

									//Skipping var ServiceEndDate with unknown data type time.Time

									var ServiceLevel string

									var ServiceSku string

									//Skipping var ServiceStartDate with unknown data type time.Time

									var StateContract string

									var WarrantyEndDate string

									var WarrantyType string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updateassetdevicecontractinformation",

										Short: "Update a 'asset.DeviceContractInformation' resource.",
										Long: `Update a 'asset.DeviceContractInformation' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.AssetApi.UpdateAssetDeviceContractInformation(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Contract with unknown data type AssetContractInformation
									if isMoRef(openapi.AssetContractInformation{}) {
										cmd.Flags().String("Contract", "", "Contract")
									}

									cmd.Flags().StringVar(&ContractStatus, "ContractStatus", "", "ContractStatus")

									cmd.Flags().StringVar(&CoveredProductLineEndDate, "CoveredProductLineEndDate", "", "CoveredProductLineEndDate")

									cmd.Flags().StringVar(&DeviceId, "DeviceId", "", "DeviceId")

									cmd.Flags().StringVar(&DeviceType, "DeviceType", "", "DeviceType")

									//Skipping var EndCustomer with unknown data type AssetCustomerInformation
									if isMoRef(openapi.AssetCustomerInformation{}) {
										cmd.Flags().String("EndCustomer", "", "EndCustomer")
									}

									//Skipping var EndUserGlobalUltimate with unknown data type AssetGlobalUltimate
									if isMoRef(openapi.AssetGlobalUltimate{}) {
										cmd.Flags().String("EndUserGlobalUltimate", "", "EndUserGlobalUltimate")
									}

									cmd.Flags().BoolVar(&IsValid, "IsValid", false, "IsValid")

									cmd.Flags().StringVar(&ItemType, "ItemType", "", "ItemType")

									cmd.Flags().StringVar(&MaintenancePurchaseOrderNumber, "MaintenancePurchaseOrderNumber", "", "MaintenancePurchaseOrderNumber")

									cmd.Flags().StringVar(&MaintenanceSalesOrderNumber, "MaintenanceSalesOrderNumber", "", "MaintenanceSalesOrderNumber")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									//Skipping var Product with unknown data type AssetProductInformation
									if isMoRef(openapi.AssetProductInformation{}) {
										cmd.Flags().String("Product", "", "Product")
									}

									cmd.Flags().StringVar(&PurchaseOrderNumber, "PurchaseOrderNumber", "", "PurchaseOrderNumber")

									//Skipping var ResellerGlobalUltimate with unknown data type AssetGlobalUltimate
									if isMoRef(openapi.AssetGlobalUltimate{}) {
										cmd.Flags().String("ResellerGlobalUltimate", "", "ResellerGlobalUltimate")
									}

									cmd.Flags().StringVar(&SalesOrderNumber, "SalesOrderNumber", "", "SalesOrderNumber")

									cmd.Flags().StringVar(&ServiceDescription, "ServiceDescription", "", "ServiceDescription")

									cmd.Flags().StringVar(&ServiceLevel, "ServiceLevel", "", "ServiceLevel")

									cmd.Flags().StringVar(&ServiceSku, "ServiceSku", "", "ServiceSku")

									cmd.Flags().StringVar(&StateContract, "StateContract", "", "StateContract")

									cmd.Flags().StringVar(&WarrantyEndDate, "WarrantyEndDate", "", "WarrantyEndDate")

									cmd.Flags().StringVar(&WarrantyType, "WarrantyType", "", "WarrantyType")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var ApiVersion with unknown data type int64

									//Skipping var AppPartitionNumber with unknown data type int64

									var ConnectionId string

									var ConnectionReason string

									var ConnectionStatus string

									//Skipping var ConnectionStatusLastChangeTime with unknown data type time.Time

									var ConnectorVersion string

									var DeviceExternalIpAddress string

									var ProxyApp string

									var AccessKeyId string

									var ClaimedByUserName string

									//Skipping var ClaimedTime with unknown data type time.Time

									var DeviceHostname []string

									var DeviceIpAddress []string

									var ExecutionMode string

									//Skipping var ParentSignature with unknown data type AssetParentConnectionSignature

									var Pid []string

									var PlatformType string

									var PublicAccessKey string

									var ReadOnly bool

									var Serial []string

									var Vendor string

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var ClaimedByUser with unknown data type IamUserRelationship

									//Skipping var ClusterMembers with unknown data type []AssetClusterMemberRelationship

									//Skipping var DeviceClaim with unknown data type AssetDeviceClaimRelationship

									//Skipping var DeviceConfiguration with unknown data type AssetDeviceConfigurationRelationship

									//Skipping var DomainGroup with unknown data type IamDomainGroupRelationship

									//Skipping var ParentConnection with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updateassetdeviceregistration",

										Short: "Updates the resource representing the device connector. For example, this can be used to annotate the device connector resource with user-specified tags.",
										Long: `Updates the resource representing the device connector. For example, this can be used to annotate the device connector resource with user-specified tags.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.AssetApi.UpdateAssetDeviceRegistration(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&ConnectionId, "ConnectionId", "", "ConnectionId")

									cmd.Flags().StringVar(&ConnectionReason, "ConnectionReason", "", "ConnectionReason")

									cmd.Flags().StringVar(&ConnectionStatus, "ConnectionStatus", "", "ConnectionStatus")

									cmd.Flags().StringVar(&ConnectorVersion, "ConnectorVersion", "", "ConnectorVersion")

									cmd.Flags().StringVar(&DeviceExternalIpAddress, "DeviceExternalIpAddress", "", "DeviceExternalIpAddress")

									cmd.Flags().StringVar(&ProxyApp, "ProxyApp", "", "ProxyApp")

									cmd.Flags().StringVar(&AccessKeyId, "AccessKeyId", "", "AccessKeyId")

									cmd.Flags().StringVar(&ClaimedByUserName, "ClaimedByUserName", "", "ClaimedByUserName")

									cmd.Flags().StringSliceVar(&DeviceHostname, "DeviceHostname", []string{}, "DeviceHostname")

									cmd.Flags().StringSliceVar(&DeviceIpAddress, "DeviceIpAddress", []string{}, "DeviceIpAddress")

									cmd.Flags().StringVar(&ExecutionMode, "ExecutionMode", "", "ExecutionMode")

									//Skipping var ParentSignature with unknown data type AssetParentConnectionSignature
									if isMoRef(openapi.AssetParentConnectionSignature{}) {
										cmd.Flags().String("ParentSignature", "", "ParentSignature")
									}

									cmd.Flags().StringSliceVar(&Pid, "Pid", []string{}, "Pid")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									cmd.Flags().StringVar(&PublicAccessKey, "PublicAccessKey", "", "PublicAccessKey")

									cmd.Flags().BoolVar(&ReadOnly, "ReadOnly", false, "ReadOnly")

									cmd.Flags().StringSliceVar(&Serial, "Serial", []string{}, "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var ClaimedByUser with unknown data type IamUserRelationship
									if isMoRef(openapi.IamUserRelationship{}) {
										cmd.Flags().String("ClaimedByUser", "", "ClaimedByUser")
									}

									//Skipping var DeviceClaim with unknown data type AssetDeviceClaimRelationship
									if isMoRef(openapi.AssetDeviceClaimRelationship{}) {
										cmd.Flags().String("DeviceClaim", "", "DeviceClaim")
									}

									//Skipping var DeviceConfiguration with unknown data type AssetDeviceConfigurationRelationship
									if isMoRef(openapi.AssetDeviceConfigurationRelationship{}) {
										cmd.Flags().String("DeviceConfiguration", "", "DeviceConfiguration")
									}

									//Skipping var DomainGroup with unknown data type IamDomainGroupRelationship
									if isMoRef(openapi.IamDomainGroupRelationship{}) {
										cmd.Flags().String("DomainGroup", "", "DomainGroup")
									}

									//Skipping var ParentConnection with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("ParentConnection", "", "ParentConnection")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Credential with unknown data type CommCredential

									var DeviceType string

									var IgnoreCert bool

									var IsEnabled bool

									var ManagementAddress string

									//Skipping var Port with unknown data type int64

									var Protocol string

									//Skipping var Status with unknown data type AssetManagedDeviceStatus

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var DeviceConnectorManager with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var WorkflowInfo with unknown data type WorkflowWorkflowInfoRelationship

									cmd := &cobra.Command{
										Use: "updateassetmanageddevice",

										Short: "Update a 'asset.ManagedDevice' resource.",
										Long: `Update a 'asset.ManagedDevice' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.AssetApi.UpdateAssetManagedDevice(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Credential with unknown data type CommCredential
									if isMoRef(openapi.CommCredential{}) {
										cmd.Flags().String("Credential", "", "Credential")
									}

									cmd.Flags().StringVar(&DeviceType, "DeviceType", "", "DeviceType")

									cmd.Flags().BoolVar(&IgnoreCert, "IgnoreCert", false, "IgnoreCert")

									cmd.Flags().BoolVar(&IsEnabled, "IsEnabled", false, "IsEnabled")

									cmd.Flags().StringVar(&ManagementAddress, "ManagementAddress", "", "ManagementAddress")

									cmd.Flags().StringVar(&Protocol, "Protocol", "", "Protocol")

									//Skipping var Status with unknown data type AssetManagedDeviceStatus
									if isMoRef(openapi.AssetManagedDeviceStatus{}) {
										cmd.Flags().String("Status", "", "Status")
									}

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var DeviceConnectorManager with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("DeviceConnectorManager", "", "DeviceConnectorManager")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var WorkflowInfo with unknown data type WorkflowWorkflowInfoRelationship
									if isMoRef(openapi.WorkflowWorkflowInfoRelationship{}) {
										cmd.Flags().String("WorkflowInfo", "", "WorkflowInfo")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "bios",

								Short: "Create Bios resource(s)",
								Long: `Create Bios resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var AcsControlGpu1state string

									var AcsControlGpu2state string

									var AcsControlGpu3state string

									var AcsControlGpu4state string

									var AcsControlGpu5state string

									var AcsControlGpu6state string

									var AcsControlGpu7state string

									var AcsControlGpu8state string

									var AcsControlSlot11state string

									var AcsControlSlot12state string

									var AcsControlSlot13state string

									var AcsControlSlot14state string

									var AdjacentCacheLinePrefetch string

									var AllUsbDevices string

									var Altitude string

									var AspmSupport string

									var AssertNmiOnPerr string

									var AssertNmiOnSerr string

									var AutoCcState string

									var AutonumousCstateEnable string

									var BaudRate string

									var BmeDmaMitigation string

									var BootOptionNumRetry string

									var BootOptionReCoolDown string

									var BootOptionRetry string

									var BootPerformanceMode string

									var CbsCmnCpuCpb string

									var CbsCmnCpuGenDowncoreCtrl string

									var CbsCmnCpuGlobalCstateCtrl string

									var CbsCmnCpuL1streamHwPrefetcher string

									var CbsCmnCpuL2streamHwPrefetcher string

									var CbsCmnDeterminismSlider string

									var CbsCmnGnbNbIommu string

									var CbsCmnMemCtrlBankGroupSwapDdr4 string

									var CbsCmnMemMapBankInterleaveDdr4 string

									var CbsCmncTdpCtl string

									var CbsDfCmnMemIntlv string

									var CbsDfCmnMemIntlvSize string

									var CdnEnable string

									var CdnSupport string

									var ChannelInterLeave string

									var CiscoAdaptiveMemTraining string

									var CiscoDebugLevel string

									var CiscoOpromLaunchOptimization string

									var CkeLowPolicy string

									var ClosedLoopThermThrotl string

									var CmciEnable string

									var ConfigTdp string

									var ConsoleRedirection string

									var CoreMultiProcessing string

									var CpuEnergyPerformance string

									var CpuFrequencyFloor string

									var CpuPerformance string

									var CpuPowerManagement string

									var DcpmmFirmwareDowngrade string

									var DemandScrub string

									var DirectCacheAccess string

									var DramClockThrottling string

									var DramRefreshRate string

									var EnergyEfficientTurbo string

									var EngPerfTuning string

									var EnhancedIntelSpeedStepTech string

									var EppProfile string

									var ExecuteDisableBit string

									var ExtendedApic string

									var FlowControl string

									var Frb2enable string

									var HardwarePrefetch string

									var HwpmEnable string

									var ImcInterleave string

									var IntelHyperThreadingTech string

									var IntelSpeedSelect string

									var IntelTurboBoostTech string

									var IntelVirtualizationTechnology string

									var IntelVtForDirectedIo string

									var IntelVtdCoherencySupport string

									var IntelVtdInterruptRemapping string

									var IntelVtdPassThroughDmaSupport string

									var IntelVtdatsSupport string

									var IohErrorEnable string

									var IohResource string

									var IpPrefetch string

									var Ipv4pxe string

									var Ipv6pxe string

									var KtiPrefetch string

									var LegacyOsRedirection string

									var LegacyUsbSupport string

									var LlcPrefetch string

									var LomPort0state string

									var LomPort1state string

									var LomPort2state string

									var LomPort3state string

									var LomPortsAllState string

									var LvDdrMode string

									var MakeDeviceNonBootable string

									var MemoryInterLeave string

									var MemoryMappedIoAbove4gb string

									var MemorySizeLimit string

									var MirroringMode string

									var MmcfgBase string

									var NetworkStack string

									var NumaOptimized string

									var Onboard10gbitLom string

									var OnboardGbitLom string

									var OnboardScuStorageSupport string

									var OnboardScuStorageSwStack string

									var OsBootWatchdogTimer string

									var OsBootWatchdogTimerPolicy string

									var OsBootWatchdogTimerTimeout string

									var OutOfBandMgmtPort string

									var PackageCstateLimit string

									var PartialMirrorModeConfig string

									var PartialMirrorPercent string

									var PartialMirrorValue1 string

									var PartialMirrorValue2 string

									var PartialMirrorValue3 string

									var PartialMirrorValue4 string

									var PatrolScrub string

									var PatrolScrubDuration string

									var PcIeRasSupport string

									var PcIeSsdHotPlugSupport string

									var PchUsb30mode string

									var PciOptionRoMs string

									var PciRomClp string

									var PopSupport string

									var PostErrorPause string

									var ProcessorC1e string

									var ProcessorC3report string

									var ProcessorC6report string

									var ProcessorCstate string

									var Psata string

									var PstateCoordType string

									var PuttyKeyPad string

									var PwrPerfTuning string

									var QpiLinkFrequency string

									var QpiSnoopMode string

									var RankInterLeave string

									var RedirectionAfterPost string

									var SataModeSelect string

									var SelectMemoryRasConfiguration string

									var SelectPprType string

									var SerialPortAenable string

									var SinglePctlEnable string

									var Slot10linkSpeed string

									var Slot10state string

									var Slot11linkSpeed string

									var Slot11state string

									var Slot12linkSpeed string

									var Slot12state string

									var Slot13state string

									var Slot14state string

									var Slot1linkSpeed string

									var Slot1state string

									var Slot2linkSpeed string

									var Slot2state string

									var Slot3linkSpeed string

									var Slot3state string

									var Slot4linkSpeed string

									var Slot4state string

									var Slot5linkSpeed string

									var Slot5state string

									var Slot6linkSpeed string

									var Slot6state string

									var Slot7linkSpeed string

									var Slot7state string

									var Slot8linkSpeed string

									var Slot8state string

									var Slot9linkSpeed string

									var Slot9state string

									var SlotFlomLinkSpeed string

									var SlotFrontNvme1linkSpeed string

									var SlotFrontNvme2linkSpeed string

									var SlotFrontSlot5linkSpeed string

									var SlotFrontSlot6linkSpeed string

									var SlotGpu1state string

									var SlotGpu2state string

									var SlotGpu3state string

									var SlotGpu4state string

									var SlotGpu5state string

									var SlotGpu6state string

									var SlotGpu7state string

									var SlotGpu8state string

									var SlotHbaLinkSpeed string

									var SlotHbaState string

									var SlotLom1link string

									var SlotLom2link string

									var SlotMezzState string

									var SlotMlomLinkSpeed string

									var SlotMlomState string

									var SlotMraidLinkSpeed string

									var SlotMraidState string

									var SlotN10state string

									var SlotN11state string

									var SlotN12state string

									var SlotN13state string

									var SlotN14state string

									var SlotN15state string

									var SlotN16state string

									var SlotN17state string

									var SlotN18state string

									var SlotN19state string

									var SlotN1state string

									var SlotN20state string

									var SlotN21state string

									var SlotN22state string

									var SlotN23state string

									var SlotN24state string

									var SlotN2state string

									var SlotN3state string

									var SlotN4state string

									var SlotN5state string

									var SlotN6state string

									var SlotN7state string

									var SlotN8state string

									var SlotN9state string

									var SlotRaidLinkSpeed string

									var SlotRaidState string

									var SlotRearNvme1linkSpeed string

									var SlotRearNvme1state string

									var SlotRearNvme2linkSpeed string

									var SlotRearNvme2state string

									var SlotRearNvme3state string

									var SlotRearNvme4state string

									var SlotRearNvme5state string

									var SlotRearNvme6state string

									var SlotRearNvme7state string

									var SlotRearNvme8state string

									var SlotRiser1linkSpeed string

									var SlotRiser1slot1linkSpeed string

									var SlotRiser1slot2linkSpeed string

									var SlotRiser1slot3linkSpeed string

									var SlotRiser2linkSpeed string

									var SlotRiser2slot4linkSpeed string

									var SlotRiser2slot5linkSpeed string

									var SlotRiser2slot6linkSpeed string

									var SlotSasState string

									var SlotSsdSlot1linkSpeed string

									var SlotSsdSlot2linkSpeed string

									var Smee string

									var SmtMode string

									var Snc string

									var SparingMode string

									var SrIov string

									var StreamerPrefetch string

									var SvmMode string

									var TerminalType string

									var TpmControl string

									var TpmSupport string

									var TxtSupport string

									var UcsmBootOrderRule string

									var UsbEmul6064 string

									var UsbPortFront string

									var UsbPortInternal string

									var UsbPortKvm string

									var UsbPortRear string

									var UsbPortSdCard string

									var UsbPortVmedia string

									var UsbXhciSupport string

									var VgaPriority string

									var VmdEnable string

									var WorkLoadConfig string

									var XptPrefetch string

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "policy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.BiosApi.CreateBiosPolicy(authCtx)

											body := openapi.NewBiosPolicy()

											//Set class id and object type by default
											body.ClassId = "bios.Policy"
											body.ObjectType = "bios.Policy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "AcsControlGpu1state") {
												body.AcsControlGpu1state = &AcsControlGpu1state
											}

											if isFlagPassed(cmd.Flags(), "AcsControlGpu2state") {
												body.AcsControlGpu2state = &AcsControlGpu2state
											}

											if isFlagPassed(cmd.Flags(), "AcsControlGpu3state") {
												body.AcsControlGpu3state = &AcsControlGpu3state
											}

											if isFlagPassed(cmd.Flags(), "AcsControlGpu4state") {
												body.AcsControlGpu4state = &AcsControlGpu4state
											}

											if isFlagPassed(cmd.Flags(), "AcsControlGpu5state") {
												body.AcsControlGpu5state = &AcsControlGpu5state
											}

											if isFlagPassed(cmd.Flags(), "AcsControlGpu6state") {
												body.AcsControlGpu6state = &AcsControlGpu6state
											}

											if isFlagPassed(cmd.Flags(), "AcsControlGpu7state") {
												body.AcsControlGpu7state = &AcsControlGpu7state
											}

											if isFlagPassed(cmd.Flags(), "AcsControlGpu8state") {
												body.AcsControlGpu8state = &AcsControlGpu8state
											}

											if isFlagPassed(cmd.Flags(), "AcsControlSlot11state") {
												body.AcsControlSlot11state = &AcsControlSlot11state
											}

											if isFlagPassed(cmd.Flags(), "AcsControlSlot12state") {
												body.AcsControlSlot12state = &AcsControlSlot12state
											}

											if isFlagPassed(cmd.Flags(), "AcsControlSlot13state") {
												body.AcsControlSlot13state = &AcsControlSlot13state
											}

											if isFlagPassed(cmd.Flags(), "AcsControlSlot14state") {
												body.AcsControlSlot14state = &AcsControlSlot14state
											}

											if isFlagPassed(cmd.Flags(), "AdjacentCacheLinePrefetch") {
												body.AdjacentCacheLinePrefetch = &AdjacentCacheLinePrefetch
											}

											if isFlagPassed(cmd.Flags(), "AllUsbDevices") {
												body.AllUsbDevices = &AllUsbDevices
											}

											if isFlagPassed(cmd.Flags(), "Altitude") {
												body.Altitude = &Altitude
											}

											if isFlagPassed(cmd.Flags(), "AspmSupport") {
												body.AspmSupport = &AspmSupport
											}

											if isFlagPassed(cmd.Flags(), "AssertNmiOnPerr") {
												body.AssertNmiOnPerr = &AssertNmiOnPerr
											}

											if isFlagPassed(cmd.Flags(), "AssertNmiOnSerr") {
												body.AssertNmiOnSerr = &AssertNmiOnSerr
											}

											if isFlagPassed(cmd.Flags(), "AutoCcState") {
												body.AutoCcState = &AutoCcState
											}

											if isFlagPassed(cmd.Flags(), "AutonumousCstateEnable") {
												body.AutonumousCstateEnable = &AutonumousCstateEnable
											}

											if isFlagPassed(cmd.Flags(), "BaudRate") {
												body.BaudRate = &BaudRate
											}

											if isFlagPassed(cmd.Flags(), "BmeDmaMitigation") {
												body.BmeDmaMitigation = &BmeDmaMitigation
											}

											if isFlagPassed(cmd.Flags(), "BootOptionNumRetry") {
												body.BootOptionNumRetry = &BootOptionNumRetry
											}

											if isFlagPassed(cmd.Flags(), "BootOptionReCoolDown") {
												body.BootOptionReCoolDown = &BootOptionReCoolDown
											}

											if isFlagPassed(cmd.Flags(), "BootOptionRetry") {
												body.BootOptionRetry = &BootOptionRetry
											}

											if isFlagPassed(cmd.Flags(), "BootPerformanceMode") {
												body.BootPerformanceMode = &BootPerformanceMode
											}

											if isFlagPassed(cmd.Flags(), "CbsCmnCpuCpb") {
												body.CbsCmnCpuCpb = &CbsCmnCpuCpb
											}

											if isFlagPassed(cmd.Flags(), "CbsCmnCpuGenDowncoreCtrl") {
												body.CbsCmnCpuGenDowncoreCtrl = &CbsCmnCpuGenDowncoreCtrl
											}

											if isFlagPassed(cmd.Flags(), "CbsCmnCpuGlobalCstateCtrl") {
												body.CbsCmnCpuGlobalCstateCtrl = &CbsCmnCpuGlobalCstateCtrl
											}

											if isFlagPassed(cmd.Flags(), "CbsCmnCpuL1streamHwPrefetcher") {
												body.CbsCmnCpuL1streamHwPrefetcher = &CbsCmnCpuL1streamHwPrefetcher
											}

											if isFlagPassed(cmd.Flags(), "CbsCmnCpuL2streamHwPrefetcher") {
												body.CbsCmnCpuL2streamHwPrefetcher = &CbsCmnCpuL2streamHwPrefetcher
											}

											if isFlagPassed(cmd.Flags(), "CbsCmnDeterminismSlider") {
												body.CbsCmnDeterminismSlider = &CbsCmnDeterminismSlider
											}

											if isFlagPassed(cmd.Flags(), "CbsCmnGnbNbIommu") {
												body.CbsCmnGnbNbIommu = &CbsCmnGnbNbIommu
											}

											if isFlagPassed(cmd.Flags(), "CbsCmnMemCtrlBankGroupSwapDdr4") {
												body.CbsCmnMemCtrlBankGroupSwapDdr4 = &CbsCmnMemCtrlBankGroupSwapDdr4
											}

											if isFlagPassed(cmd.Flags(), "CbsCmnMemMapBankInterleaveDdr4") {
												body.CbsCmnMemMapBankInterleaveDdr4 = &CbsCmnMemMapBankInterleaveDdr4
											}

											if isFlagPassed(cmd.Flags(), "CbsCmncTdpCtl") {
												body.CbsCmncTdpCtl = &CbsCmncTdpCtl
											}

											if isFlagPassed(cmd.Flags(), "CbsDfCmnMemIntlv") {
												body.CbsDfCmnMemIntlv = &CbsDfCmnMemIntlv
											}

											if isFlagPassed(cmd.Flags(), "CbsDfCmnMemIntlvSize") {
												body.CbsDfCmnMemIntlvSize = &CbsDfCmnMemIntlvSize
											}

											if isFlagPassed(cmd.Flags(), "CdnEnable") {
												body.CdnEnable = &CdnEnable
											}

											if isFlagPassed(cmd.Flags(), "CdnSupport") {
												body.CdnSupport = &CdnSupport
											}

											if isFlagPassed(cmd.Flags(), "ChannelInterLeave") {
												body.ChannelInterLeave = &ChannelInterLeave
											}

											if isFlagPassed(cmd.Flags(), "CiscoAdaptiveMemTraining") {
												body.CiscoAdaptiveMemTraining = &CiscoAdaptiveMemTraining
											}

											if isFlagPassed(cmd.Flags(), "CiscoDebugLevel") {
												body.CiscoDebugLevel = &CiscoDebugLevel
											}

											if isFlagPassed(cmd.Flags(), "CiscoOpromLaunchOptimization") {
												body.CiscoOpromLaunchOptimization = &CiscoOpromLaunchOptimization
											}

											if isFlagPassed(cmd.Flags(), "CkeLowPolicy") {
												body.CkeLowPolicy = &CkeLowPolicy
											}

											if isFlagPassed(cmd.Flags(), "ClosedLoopThermThrotl") {
												body.ClosedLoopThermThrotl = &ClosedLoopThermThrotl
											}

											if isFlagPassed(cmd.Flags(), "CmciEnable") {
												body.CmciEnable = &CmciEnable
											}

											if isFlagPassed(cmd.Flags(), "ConfigTdp") {
												body.ConfigTdp = &ConfigTdp
											}

											if isFlagPassed(cmd.Flags(), "ConsoleRedirection") {
												body.ConsoleRedirection = &ConsoleRedirection
											}

											if isFlagPassed(cmd.Flags(), "CoreMultiProcessing") {
												body.CoreMultiProcessing = &CoreMultiProcessing
											}

											if isFlagPassed(cmd.Flags(), "CpuEnergyPerformance") {
												body.CpuEnergyPerformance = &CpuEnergyPerformance
											}

											if isFlagPassed(cmd.Flags(), "CpuFrequencyFloor") {
												body.CpuFrequencyFloor = &CpuFrequencyFloor
											}

											if isFlagPassed(cmd.Flags(), "CpuPerformance") {
												body.CpuPerformance = &CpuPerformance
											}

											if isFlagPassed(cmd.Flags(), "CpuPowerManagement") {
												body.CpuPowerManagement = &CpuPowerManagement
											}

											if isFlagPassed(cmd.Flags(), "DcpmmFirmwareDowngrade") {
												body.DcpmmFirmwareDowngrade = &DcpmmFirmwareDowngrade
											}

											if isFlagPassed(cmd.Flags(), "DemandScrub") {
												body.DemandScrub = &DemandScrub
											}

											if isFlagPassed(cmd.Flags(), "DirectCacheAccess") {
												body.DirectCacheAccess = &DirectCacheAccess
											}

											if isFlagPassed(cmd.Flags(), "DramClockThrottling") {
												body.DramClockThrottling = &DramClockThrottling
											}

											if isFlagPassed(cmd.Flags(), "DramRefreshRate") {
												body.DramRefreshRate = &DramRefreshRate
											}

											if isFlagPassed(cmd.Flags(), "EnergyEfficientTurbo") {
												body.EnergyEfficientTurbo = &EnergyEfficientTurbo
											}

											if isFlagPassed(cmd.Flags(), "EngPerfTuning") {
												body.EngPerfTuning = &EngPerfTuning
											}

											if isFlagPassed(cmd.Flags(), "EnhancedIntelSpeedStepTech") {
												body.EnhancedIntelSpeedStepTech = &EnhancedIntelSpeedStepTech
											}

											if isFlagPassed(cmd.Flags(), "EppProfile") {
												body.EppProfile = &EppProfile
											}

											if isFlagPassed(cmd.Flags(), "ExecuteDisableBit") {
												body.ExecuteDisableBit = &ExecuteDisableBit
											}

											if isFlagPassed(cmd.Flags(), "ExtendedApic") {
												body.ExtendedApic = &ExtendedApic
											}

											if isFlagPassed(cmd.Flags(), "FlowControl") {
												body.FlowControl = &FlowControl
											}

											if isFlagPassed(cmd.Flags(), "Frb2enable") {
												body.Frb2enable = &Frb2enable
											}

											if isFlagPassed(cmd.Flags(), "HardwarePrefetch") {
												body.HardwarePrefetch = &HardwarePrefetch
											}

											if isFlagPassed(cmd.Flags(), "HwpmEnable") {
												body.HwpmEnable = &HwpmEnable
											}

											if isFlagPassed(cmd.Flags(), "ImcInterleave") {
												body.ImcInterleave = &ImcInterleave
											}

											if isFlagPassed(cmd.Flags(), "IntelHyperThreadingTech") {
												body.IntelHyperThreadingTech = &IntelHyperThreadingTech
											}

											if isFlagPassed(cmd.Flags(), "IntelSpeedSelect") {
												body.IntelSpeedSelect = &IntelSpeedSelect
											}

											if isFlagPassed(cmd.Flags(), "IntelTurboBoostTech") {
												body.IntelTurboBoostTech = &IntelTurboBoostTech
											}

											if isFlagPassed(cmd.Flags(), "IntelVirtualizationTechnology") {
												body.IntelVirtualizationTechnology = &IntelVirtualizationTechnology
											}

											if isFlagPassed(cmd.Flags(), "IntelVtForDirectedIo") {
												body.IntelVtForDirectedIo = &IntelVtForDirectedIo
											}

											if isFlagPassed(cmd.Flags(), "IntelVtdCoherencySupport") {
												body.IntelVtdCoherencySupport = &IntelVtdCoherencySupport
											}

											if isFlagPassed(cmd.Flags(), "IntelVtdInterruptRemapping") {
												body.IntelVtdInterruptRemapping = &IntelVtdInterruptRemapping
											}

											if isFlagPassed(cmd.Flags(), "IntelVtdPassThroughDmaSupport") {
												body.IntelVtdPassThroughDmaSupport = &IntelVtdPassThroughDmaSupport
											}

											if isFlagPassed(cmd.Flags(), "IntelVtdatsSupport") {
												body.IntelVtdatsSupport = &IntelVtdatsSupport
											}

											if isFlagPassed(cmd.Flags(), "IohErrorEnable") {
												body.IohErrorEnable = &IohErrorEnable
											}

											if isFlagPassed(cmd.Flags(), "IohResource") {
												body.IohResource = &IohResource
											}

											if isFlagPassed(cmd.Flags(), "IpPrefetch") {
												body.IpPrefetch = &IpPrefetch
											}

											if isFlagPassed(cmd.Flags(), "Ipv4pxe") {
												body.Ipv4pxe = &Ipv4pxe
											}

											if isFlagPassed(cmd.Flags(), "Ipv6pxe") {
												body.Ipv6pxe = &Ipv6pxe
											}

											if isFlagPassed(cmd.Flags(), "KtiPrefetch") {
												body.KtiPrefetch = &KtiPrefetch
											}

											if isFlagPassed(cmd.Flags(), "LegacyOsRedirection") {
												body.LegacyOsRedirection = &LegacyOsRedirection
											}

											if isFlagPassed(cmd.Flags(), "LegacyUsbSupport") {
												body.LegacyUsbSupport = &LegacyUsbSupport
											}

											if isFlagPassed(cmd.Flags(), "LlcPrefetch") {
												body.LlcPrefetch = &LlcPrefetch
											}

											if isFlagPassed(cmd.Flags(), "LomPort0state") {
												body.LomPort0state = &LomPort0state
											}

											if isFlagPassed(cmd.Flags(), "LomPort1state") {
												body.LomPort1state = &LomPort1state
											}

											if isFlagPassed(cmd.Flags(), "LomPort2state") {
												body.LomPort2state = &LomPort2state
											}

											if isFlagPassed(cmd.Flags(), "LomPort3state") {
												body.LomPort3state = &LomPort3state
											}

											if isFlagPassed(cmd.Flags(), "LomPortsAllState") {
												body.LomPortsAllState = &LomPortsAllState
											}

											if isFlagPassed(cmd.Flags(), "LvDdrMode") {
												body.LvDdrMode = &LvDdrMode
											}

											if isFlagPassed(cmd.Flags(), "MakeDeviceNonBootable") {
												body.MakeDeviceNonBootable = &MakeDeviceNonBootable
											}

											if isFlagPassed(cmd.Flags(), "MemoryInterLeave") {
												body.MemoryInterLeave = &MemoryInterLeave
											}

											if isFlagPassed(cmd.Flags(), "MemoryMappedIoAbove4gb") {
												body.MemoryMappedIoAbove4gb = &MemoryMappedIoAbove4gb
											}

											if isFlagPassed(cmd.Flags(), "MemorySizeLimit") {
												body.MemorySizeLimit = &MemorySizeLimit
											}

											if isFlagPassed(cmd.Flags(), "MirroringMode") {
												body.MirroringMode = &MirroringMode
											}

											if isFlagPassed(cmd.Flags(), "MmcfgBase") {
												body.MmcfgBase = &MmcfgBase
											}

											if isFlagPassed(cmd.Flags(), "NetworkStack") {
												body.NetworkStack = &NetworkStack
											}

											if isFlagPassed(cmd.Flags(), "NumaOptimized") {
												body.NumaOptimized = &NumaOptimized
											}

											if isFlagPassed(cmd.Flags(), "Onboard10gbitLom") {
												body.Onboard10gbitLom = &Onboard10gbitLom
											}

											if isFlagPassed(cmd.Flags(), "OnboardGbitLom") {
												body.OnboardGbitLom = &OnboardGbitLom
											}

											if isFlagPassed(cmd.Flags(), "OnboardScuStorageSupport") {
												body.OnboardScuStorageSupport = &OnboardScuStorageSupport
											}

											if isFlagPassed(cmd.Flags(), "OnboardScuStorageSwStack") {
												body.OnboardScuStorageSwStack = &OnboardScuStorageSwStack
											}

											if isFlagPassed(cmd.Flags(), "OsBootWatchdogTimer") {
												body.OsBootWatchdogTimer = &OsBootWatchdogTimer
											}

											if isFlagPassed(cmd.Flags(), "OsBootWatchdogTimerPolicy") {
												body.OsBootWatchdogTimerPolicy = &OsBootWatchdogTimerPolicy
											}

											if isFlagPassed(cmd.Flags(), "OsBootWatchdogTimerTimeout") {
												body.OsBootWatchdogTimerTimeout = &OsBootWatchdogTimerTimeout
											}

											if isFlagPassed(cmd.Flags(), "OutOfBandMgmtPort") {
												body.OutOfBandMgmtPort = &OutOfBandMgmtPort
											}

											if isFlagPassed(cmd.Flags(), "PackageCstateLimit") {
												body.PackageCstateLimit = &PackageCstateLimit
											}

											if isFlagPassed(cmd.Flags(), "PartialMirrorModeConfig") {
												body.PartialMirrorModeConfig = &PartialMirrorModeConfig
											}

											if isFlagPassed(cmd.Flags(), "PartialMirrorPercent") {
												body.PartialMirrorPercent = &PartialMirrorPercent
											}

											if isFlagPassed(cmd.Flags(), "PartialMirrorValue1") {
												body.PartialMirrorValue1 = &PartialMirrorValue1
											}

											if isFlagPassed(cmd.Flags(), "PartialMirrorValue2") {
												body.PartialMirrorValue2 = &PartialMirrorValue2
											}

											if isFlagPassed(cmd.Flags(), "PartialMirrorValue3") {
												body.PartialMirrorValue3 = &PartialMirrorValue3
											}

											if isFlagPassed(cmd.Flags(), "PartialMirrorValue4") {
												body.PartialMirrorValue4 = &PartialMirrorValue4
											}

											if isFlagPassed(cmd.Flags(), "PatrolScrub") {
												body.PatrolScrub = &PatrolScrub
											}

											if isFlagPassed(cmd.Flags(), "PatrolScrubDuration") {
												body.PatrolScrubDuration = &PatrolScrubDuration
											}

											if isFlagPassed(cmd.Flags(), "PcIeRasSupport") {
												body.PcIeRasSupport = &PcIeRasSupport
											}

											if isFlagPassed(cmd.Flags(), "PcIeSsdHotPlugSupport") {
												body.PcIeSsdHotPlugSupport = &PcIeSsdHotPlugSupport
											}

											if isFlagPassed(cmd.Flags(), "PchUsb30mode") {
												body.PchUsb30mode = &PchUsb30mode
											}

											if isFlagPassed(cmd.Flags(), "PciOptionRoMs") {
												body.PciOptionRoMs = &PciOptionRoMs
											}

											if isFlagPassed(cmd.Flags(), "PciRomClp") {
												body.PciRomClp = &PciRomClp
											}

											if isFlagPassed(cmd.Flags(), "PopSupport") {
												body.PopSupport = &PopSupport
											}

											if isFlagPassed(cmd.Flags(), "PostErrorPause") {
												body.PostErrorPause = &PostErrorPause
											}

											if isFlagPassed(cmd.Flags(), "ProcessorC1e") {
												body.ProcessorC1e = &ProcessorC1e
											}

											if isFlagPassed(cmd.Flags(), "ProcessorC3report") {
												body.ProcessorC3report = &ProcessorC3report
											}

											if isFlagPassed(cmd.Flags(), "ProcessorC6report") {
												body.ProcessorC6report = &ProcessorC6report
											}

											if isFlagPassed(cmd.Flags(), "ProcessorCstate") {
												body.ProcessorCstate = &ProcessorCstate
											}

											if isFlagPassed(cmd.Flags(), "Psata") {
												body.Psata = &Psata
											}

											if isFlagPassed(cmd.Flags(), "PstateCoordType") {
												body.PstateCoordType = &PstateCoordType
											}

											if isFlagPassed(cmd.Flags(), "PuttyKeyPad") {
												body.PuttyKeyPad = &PuttyKeyPad
											}

											if isFlagPassed(cmd.Flags(), "PwrPerfTuning") {
												body.PwrPerfTuning = &PwrPerfTuning
											}

											if isFlagPassed(cmd.Flags(), "QpiLinkFrequency") {
												body.QpiLinkFrequency = &QpiLinkFrequency
											}

											if isFlagPassed(cmd.Flags(), "QpiSnoopMode") {
												body.QpiSnoopMode = &QpiSnoopMode
											}

											if isFlagPassed(cmd.Flags(), "RankInterLeave") {
												body.RankInterLeave = &RankInterLeave
											}

											if isFlagPassed(cmd.Flags(), "RedirectionAfterPost") {
												body.RedirectionAfterPost = &RedirectionAfterPost
											}

											if isFlagPassed(cmd.Flags(), "SataModeSelect") {
												body.SataModeSelect = &SataModeSelect
											}

											if isFlagPassed(cmd.Flags(), "SelectMemoryRasConfiguration") {
												body.SelectMemoryRasConfiguration = &SelectMemoryRasConfiguration
											}

											if isFlagPassed(cmd.Flags(), "SelectPprType") {
												body.SelectPprType = &SelectPprType
											}

											if isFlagPassed(cmd.Flags(), "SerialPortAenable") {
												body.SerialPortAenable = &SerialPortAenable
											}

											if isFlagPassed(cmd.Flags(), "SinglePctlEnable") {
												body.SinglePctlEnable = &SinglePctlEnable
											}

											if isFlagPassed(cmd.Flags(), "Slot10linkSpeed") {
												body.Slot10linkSpeed = &Slot10linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "Slot10state") {
												body.Slot10state = &Slot10state
											}

											if isFlagPassed(cmd.Flags(), "Slot11linkSpeed") {
												body.Slot11linkSpeed = &Slot11linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "Slot11state") {
												body.Slot11state = &Slot11state
											}

											if isFlagPassed(cmd.Flags(), "Slot12linkSpeed") {
												body.Slot12linkSpeed = &Slot12linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "Slot12state") {
												body.Slot12state = &Slot12state
											}

											if isFlagPassed(cmd.Flags(), "Slot13state") {
												body.Slot13state = &Slot13state
											}

											if isFlagPassed(cmd.Flags(), "Slot14state") {
												body.Slot14state = &Slot14state
											}

											if isFlagPassed(cmd.Flags(), "Slot1linkSpeed") {
												body.Slot1linkSpeed = &Slot1linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "Slot1state") {
												body.Slot1state = &Slot1state
											}

											if isFlagPassed(cmd.Flags(), "Slot2linkSpeed") {
												body.Slot2linkSpeed = &Slot2linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "Slot2state") {
												body.Slot2state = &Slot2state
											}

											if isFlagPassed(cmd.Flags(), "Slot3linkSpeed") {
												body.Slot3linkSpeed = &Slot3linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "Slot3state") {
												body.Slot3state = &Slot3state
											}

											if isFlagPassed(cmd.Flags(), "Slot4linkSpeed") {
												body.Slot4linkSpeed = &Slot4linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "Slot4state") {
												body.Slot4state = &Slot4state
											}

											if isFlagPassed(cmd.Flags(), "Slot5linkSpeed") {
												body.Slot5linkSpeed = &Slot5linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "Slot5state") {
												body.Slot5state = &Slot5state
											}

											if isFlagPassed(cmd.Flags(), "Slot6linkSpeed") {
												body.Slot6linkSpeed = &Slot6linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "Slot6state") {
												body.Slot6state = &Slot6state
											}

											if isFlagPassed(cmd.Flags(), "Slot7linkSpeed") {
												body.Slot7linkSpeed = &Slot7linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "Slot7state") {
												body.Slot7state = &Slot7state
											}

											if isFlagPassed(cmd.Flags(), "Slot8linkSpeed") {
												body.Slot8linkSpeed = &Slot8linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "Slot8state") {
												body.Slot8state = &Slot8state
											}

											if isFlagPassed(cmd.Flags(), "Slot9linkSpeed") {
												body.Slot9linkSpeed = &Slot9linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "Slot9state") {
												body.Slot9state = &Slot9state
											}

											if isFlagPassed(cmd.Flags(), "SlotFlomLinkSpeed") {
												body.SlotFlomLinkSpeed = &SlotFlomLinkSpeed
											}

											if isFlagPassed(cmd.Flags(), "SlotFrontNvme1linkSpeed") {
												body.SlotFrontNvme1linkSpeed = &SlotFrontNvme1linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "SlotFrontNvme2linkSpeed") {
												body.SlotFrontNvme2linkSpeed = &SlotFrontNvme2linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "SlotFrontSlot5linkSpeed") {
												body.SlotFrontSlot5linkSpeed = &SlotFrontSlot5linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "SlotFrontSlot6linkSpeed") {
												body.SlotFrontSlot6linkSpeed = &SlotFrontSlot6linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "SlotGpu1state") {
												body.SlotGpu1state = &SlotGpu1state
											}

											if isFlagPassed(cmd.Flags(), "SlotGpu2state") {
												body.SlotGpu2state = &SlotGpu2state
											}

											if isFlagPassed(cmd.Flags(), "SlotGpu3state") {
												body.SlotGpu3state = &SlotGpu3state
											}

											if isFlagPassed(cmd.Flags(), "SlotGpu4state") {
												body.SlotGpu4state = &SlotGpu4state
											}

											if isFlagPassed(cmd.Flags(), "SlotGpu5state") {
												body.SlotGpu5state = &SlotGpu5state
											}

											if isFlagPassed(cmd.Flags(), "SlotGpu6state") {
												body.SlotGpu6state = &SlotGpu6state
											}

											if isFlagPassed(cmd.Flags(), "SlotGpu7state") {
												body.SlotGpu7state = &SlotGpu7state
											}

											if isFlagPassed(cmd.Flags(), "SlotGpu8state") {
												body.SlotGpu8state = &SlotGpu8state
											}

											if isFlagPassed(cmd.Flags(), "SlotHbaLinkSpeed") {
												body.SlotHbaLinkSpeed = &SlotHbaLinkSpeed
											}

											if isFlagPassed(cmd.Flags(), "SlotHbaState") {
												body.SlotHbaState = &SlotHbaState
											}

											if isFlagPassed(cmd.Flags(), "SlotLom1link") {
												body.SlotLom1link = &SlotLom1link
											}

											if isFlagPassed(cmd.Flags(), "SlotLom2link") {
												body.SlotLom2link = &SlotLom2link
											}

											if isFlagPassed(cmd.Flags(), "SlotMezzState") {
												body.SlotMezzState = &SlotMezzState
											}

											if isFlagPassed(cmd.Flags(), "SlotMlomLinkSpeed") {
												body.SlotMlomLinkSpeed = &SlotMlomLinkSpeed
											}

											if isFlagPassed(cmd.Flags(), "SlotMlomState") {
												body.SlotMlomState = &SlotMlomState
											}

											if isFlagPassed(cmd.Flags(), "SlotMraidLinkSpeed") {
												body.SlotMraidLinkSpeed = &SlotMraidLinkSpeed
											}

											if isFlagPassed(cmd.Flags(), "SlotMraidState") {
												body.SlotMraidState = &SlotMraidState
											}

											if isFlagPassed(cmd.Flags(), "SlotN10state") {
												body.SlotN10state = &SlotN10state
											}

											if isFlagPassed(cmd.Flags(), "SlotN11state") {
												body.SlotN11state = &SlotN11state
											}

											if isFlagPassed(cmd.Flags(), "SlotN12state") {
												body.SlotN12state = &SlotN12state
											}

											if isFlagPassed(cmd.Flags(), "SlotN13state") {
												body.SlotN13state = &SlotN13state
											}

											if isFlagPassed(cmd.Flags(), "SlotN14state") {
												body.SlotN14state = &SlotN14state
											}

											if isFlagPassed(cmd.Flags(), "SlotN15state") {
												body.SlotN15state = &SlotN15state
											}

											if isFlagPassed(cmd.Flags(), "SlotN16state") {
												body.SlotN16state = &SlotN16state
											}

											if isFlagPassed(cmd.Flags(), "SlotN17state") {
												body.SlotN17state = &SlotN17state
											}

											if isFlagPassed(cmd.Flags(), "SlotN18state") {
												body.SlotN18state = &SlotN18state
											}

											if isFlagPassed(cmd.Flags(), "SlotN19state") {
												body.SlotN19state = &SlotN19state
											}

											if isFlagPassed(cmd.Flags(), "SlotN1state") {
												body.SlotN1state = &SlotN1state
											}

											if isFlagPassed(cmd.Flags(), "SlotN20state") {
												body.SlotN20state = &SlotN20state
											}

											if isFlagPassed(cmd.Flags(), "SlotN21state") {
												body.SlotN21state = &SlotN21state
											}

											if isFlagPassed(cmd.Flags(), "SlotN22state") {
												body.SlotN22state = &SlotN22state
											}

											if isFlagPassed(cmd.Flags(), "SlotN23state") {
												body.SlotN23state = &SlotN23state
											}

											if isFlagPassed(cmd.Flags(), "SlotN24state") {
												body.SlotN24state = &SlotN24state
											}

											if isFlagPassed(cmd.Flags(), "SlotN2state") {
												body.SlotN2state = &SlotN2state
											}

											if isFlagPassed(cmd.Flags(), "SlotN3state") {
												body.SlotN3state = &SlotN3state
											}

											if isFlagPassed(cmd.Flags(), "SlotN4state") {
												body.SlotN4state = &SlotN4state
											}

											if isFlagPassed(cmd.Flags(), "SlotN5state") {
												body.SlotN5state = &SlotN5state
											}

											if isFlagPassed(cmd.Flags(), "SlotN6state") {
												body.SlotN6state = &SlotN6state
											}

											if isFlagPassed(cmd.Flags(), "SlotN7state") {
												body.SlotN7state = &SlotN7state
											}

											if isFlagPassed(cmd.Flags(), "SlotN8state") {
												body.SlotN8state = &SlotN8state
											}

											if isFlagPassed(cmd.Flags(), "SlotN9state") {
												body.SlotN9state = &SlotN9state
											}

											if isFlagPassed(cmd.Flags(), "SlotRaidLinkSpeed") {
												body.SlotRaidLinkSpeed = &SlotRaidLinkSpeed
											}

											if isFlagPassed(cmd.Flags(), "SlotRaidState") {
												body.SlotRaidState = &SlotRaidState
											}

											if isFlagPassed(cmd.Flags(), "SlotRearNvme1linkSpeed") {
												body.SlotRearNvme1linkSpeed = &SlotRearNvme1linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "SlotRearNvme1state") {
												body.SlotRearNvme1state = &SlotRearNvme1state
											}

											if isFlagPassed(cmd.Flags(), "SlotRearNvme2linkSpeed") {
												body.SlotRearNvme2linkSpeed = &SlotRearNvme2linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "SlotRearNvme2state") {
												body.SlotRearNvme2state = &SlotRearNvme2state
											}

											if isFlagPassed(cmd.Flags(), "SlotRearNvme3state") {
												body.SlotRearNvme3state = &SlotRearNvme3state
											}

											if isFlagPassed(cmd.Flags(), "SlotRearNvme4state") {
												body.SlotRearNvme4state = &SlotRearNvme4state
											}

											if isFlagPassed(cmd.Flags(), "SlotRearNvme5state") {
												body.SlotRearNvme5state = &SlotRearNvme5state
											}

											if isFlagPassed(cmd.Flags(), "SlotRearNvme6state") {
												body.SlotRearNvme6state = &SlotRearNvme6state
											}

											if isFlagPassed(cmd.Flags(), "SlotRearNvme7state") {
												body.SlotRearNvme7state = &SlotRearNvme7state
											}

											if isFlagPassed(cmd.Flags(), "SlotRearNvme8state") {
												body.SlotRearNvme8state = &SlotRearNvme8state
											}

											if isFlagPassed(cmd.Flags(), "SlotRiser1linkSpeed") {
												body.SlotRiser1linkSpeed = &SlotRiser1linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "SlotRiser1slot1linkSpeed") {
												body.SlotRiser1slot1linkSpeed = &SlotRiser1slot1linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "SlotRiser1slot2linkSpeed") {
												body.SlotRiser1slot2linkSpeed = &SlotRiser1slot2linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "SlotRiser1slot3linkSpeed") {
												body.SlotRiser1slot3linkSpeed = &SlotRiser1slot3linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "SlotRiser2linkSpeed") {
												body.SlotRiser2linkSpeed = &SlotRiser2linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "SlotRiser2slot4linkSpeed") {
												body.SlotRiser2slot4linkSpeed = &SlotRiser2slot4linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "SlotRiser2slot5linkSpeed") {
												body.SlotRiser2slot5linkSpeed = &SlotRiser2slot5linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "SlotRiser2slot6linkSpeed") {
												body.SlotRiser2slot6linkSpeed = &SlotRiser2slot6linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "SlotSasState") {
												body.SlotSasState = &SlotSasState
											}

											if isFlagPassed(cmd.Flags(), "SlotSsdSlot1linkSpeed") {
												body.SlotSsdSlot1linkSpeed = &SlotSsdSlot1linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "SlotSsdSlot2linkSpeed") {
												body.SlotSsdSlot2linkSpeed = &SlotSsdSlot2linkSpeed
											}

											if isFlagPassed(cmd.Flags(), "Smee") {
												body.Smee = &Smee
											}

											if isFlagPassed(cmd.Flags(), "SmtMode") {
												body.SmtMode = &SmtMode
											}

											if isFlagPassed(cmd.Flags(), "Snc") {
												body.Snc = &Snc
											}

											if isFlagPassed(cmd.Flags(), "SparingMode") {
												body.SparingMode = &SparingMode
											}

											if isFlagPassed(cmd.Flags(), "SrIov") {
												body.SrIov = &SrIov
											}

											if isFlagPassed(cmd.Flags(), "StreamerPrefetch") {
												body.StreamerPrefetch = &StreamerPrefetch
											}

											if isFlagPassed(cmd.Flags(), "SvmMode") {
												body.SvmMode = &SvmMode
											}

											if isFlagPassed(cmd.Flags(), "TerminalType") {
												body.TerminalType = &TerminalType
											}

											if isFlagPassed(cmd.Flags(), "TpmControl") {
												body.TpmControl = &TpmControl
											}

											if isFlagPassed(cmd.Flags(), "TpmSupport") {
												body.TpmSupport = &TpmSupport
											}

											if isFlagPassed(cmd.Flags(), "TxtSupport") {
												body.TxtSupport = &TxtSupport
											}

											if isFlagPassed(cmd.Flags(), "UcsmBootOrderRule") {
												body.UcsmBootOrderRule = &UcsmBootOrderRule
											}

											if isFlagPassed(cmd.Flags(), "UsbEmul6064") {
												body.UsbEmul6064 = &UsbEmul6064
											}

											if isFlagPassed(cmd.Flags(), "UsbPortFront") {
												body.UsbPortFront = &UsbPortFront
											}

											if isFlagPassed(cmd.Flags(), "UsbPortInternal") {
												body.UsbPortInternal = &UsbPortInternal
											}

											if isFlagPassed(cmd.Flags(), "UsbPortKvm") {
												body.UsbPortKvm = &UsbPortKvm
											}

											if isFlagPassed(cmd.Flags(), "UsbPortRear") {
												body.UsbPortRear = &UsbPortRear
											}

											if isFlagPassed(cmd.Flags(), "UsbPortSdCard") {
												body.UsbPortSdCard = &UsbPortSdCard
											}

											if isFlagPassed(cmd.Flags(), "UsbPortVmedia") {
												body.UsbPortVmedia = &UsbPortVmedia
											}

											if isFlagPassed(cmd.Flags(), "UsbXhciSupport") {
												body.UsbXhciSupport = &UsbXhciSupport
											}

											if isFlagPassed(cmd.Flags(), "VgaPriority") {
												body.VgaPriority = &VgaPriority
											}

											if isFlagPassed(cmd.Flags(), "VmdEnable") {
												body.VmdEnable = &VmdEnable
											}

											if isFlagPassed(cmd.Flags(), "WorkLoadConfig") {
												body.WorkLoadConfig = &WorkLoadConfig
											}

											if isFlagPassed(cmd.Flags(), "XptPrefetch") {
												body.XptPrefetch = &XptPrefetch
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.BiosPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'bios.Policy' resource.",
										Long: `Create a 'bios.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&AcsControlGpu1state, "AcsControlGpu1state", "", "AcsControlGpu1state")

									cmd.Flags().StringVar(&AcsControlGpu2state, "AcsControlGpu2state", "", "AcsControlGpu2state")

									cmd.Flags().StringVar(&AcsControlGpu3state, "AcsControlGpu3state", "", "AcsControlGpu3state")

									cmd.Flags().StringVar(&AcsControlGpu4state, "AcsControlGpu4state", "", "AcsControlGpu4state")

									cmd.Flags().StringVar(&AcsControlGpu5state, "AcsControlGpu5state", "", "AcsControlGpu5state")

									cmd.Flags().StringVar(&AcsControlGpu6state, "AcsControlGpu6state", "", "AcsControlGpu6state")

									cmd.Flags().StringVar(&AcsControlGpu7state, "AcsControlGpu7state", "", "AcsControlGpu7state")

									cmd.Flags().StringVar(&AcsControlGpu8state, "AcsControlGpu8state", "", "AcsControlGpu8state")

									cmd.Flags().StringVar(&AcsControlSlot11state, "AcsControlSlot11state", "", "AcsControlSlot11state")

									cmd.Flags().StringVar(&AcsControlSlot12state, "AcsControlSlot12state", "", "AcsControlSlot12state")

									cmd.Flags().StringVar(&AcsControlSlot13state, "AcsControlSlot13state", "", "AcsControlSlot13state")

									cmd.Flags().StringVar(&AcsControlSlot14state, "AcsControlSlot14state", "", "AcsControlSlot14state")

									cmd.Flags().StringVar(&AdjacentCacheLinePrefetch, "AdjacentCacheLinePrefetch", "", "AdjacentCacheLinePrefetch")

									cmd.Flags().StringVar(&AllUsbDevices, "AllUsbDevices", "", "AllUsbDevices")

									cmd.Flags().StringVar(&Altitude, "Altitude", "", "Altitude")

									cmd.Flags().StringVar(&AspmSupport, "AspmSupport", "", "AspmSupport")

									cmd.Flags().StringVar(&AssertNmiOnPerr, "AssertNmiOnPerr", "", "AssertNmiOnPerr")

									cmd.Flags().StringVar(&AssertNmiOnSerr, "AssertNmiOnSerr", "", "AssertNmiOnSerr")

									cmd.Flags().StringVar(&AutoCcState, "AutoCcState", "", "AutoCcState")

									cmd.Flags().StringVar(&AutonumousCstateEnable, "AutonumousCstateEnable", "", "AutonumousCstateEnable")

									cmd.Flags().StringVar(&BaudRate, "BaudRate", "", "BaudRate")

									cmd.Flags().StringVar(&BmeDmaMitigation, "BmeDmaMitigation", "", "BmeDmaMitigation")

									cmd.Flags().StringVar(&BootOptionNumRetry, "BootOptionNumRetry", "", "BootOptionNumRetry")

									cmd.Flags().StringVar(&BootOptionReCoolDown, "BootOptionReCoolDown", "", "BootOptionReCoolDown")

									cmd.Flags().StringVar(&BootOptionRetry, "BootOptionRetry", "", "BootOptionRetry")

									cmd.Flags().StringVar(&BootPerformanceMode, "BootPerformanceMode", "", "BootPerformanceMode")

									cmd.Flags().StringVar(&CbsCmnCpuCpb, "CbsCmnCpuCpb", "", "CbsCmnCpuCpb")

									cmd.Flags().StringVar(&CbsCmnCpuGenDowncoreCtrl, "CbsCmnCpuGenDowncoreCtrl", "", "CbsCmnCpuGenDowncoreCtrl")

									cmd.Flags().StringVar(&CbsCmnCpuGlobalCstateCtrl, "CbsCmnCpuGlobalCstateCtrl", "", "CbsCmnCpuGlobalCstateCtrl")

									cmd.Flags().StringVar(&CbsCmnCpuL1streamHwPrefetcher, "CbsCmnCpuL1streamHwPrefetcher", "", "CbsCmnCpuL1streamHwPrefetcher")

									cmd.Flags().StringVar(&CbsCmnCpuL2streamHwPrefetcher, "CbsCmnCpuL2streamHwPrefetcher", "", "CbsCmnCpuL2streamHwPrefetcher")

									cmd.Flags().StringVar(&CbsCmnDeterminismSlider, "CbsCmnDeterminismSlider", "", "CbsCmnDeterminismSlider")

									cmd.Flags().StringVar(&CbsCmnGnbNbIommu, "CbsCmnGnbNbIommu", "", "CbsCmnGnbNbIommu")

									cmd.Flags().StringVar(&CbsCmnMemCtrlBankGroupSwapDdr4, "CbsCmnMemCtrlBankGroupSwapDdr4", "", "CbsCmnMemCtrlBankGroupSwapDdr4")

									cmd.Flags().StringVar(&CbsCmnMemMapBankInterleaveDdr4, "CbsCmnMemMapBankInterleaveDdr4", "", "CbsCmnMemMapBankInterleaveDdr4")

									cmd.Flags().StringVar(&CbsCmncTdpCtl, "CbsCmncTdpCtl", "", "CbsCmncTdpCtl")

									cmd.Flags().StringVar(&CbsDfCmnMemIntlv, "CbsDfCmnMemIntlv", "", "CbsDfCmnMemIntlv")

									cmd.Flags().StringVar(&CbsDfCmnMemIntlvSize, "CbsDfCmnMemIntlvSize", "", "CbsDfCmnMemIntlvSize")

									cmd.Flags().StringVar(&CdnEnable, "CdnEnable", "", "CdnEnable")

									cmd.Flags().StringVar(&CdnSupport, "CdnSupport", "", "CdnSupport")

									cmd.Flags().StringVar(&ChannelInterLeave, "ChannelInterLeave", "", "ChannelInterLeave")

									cmd.Flags().StringVar(&CiscoAdaptiveMemTraining, "CiscoAdaptiveMemTraining", "", "CiscoAdaptiveMemTraining")

									cmd.Flags().StringVar(&CiscoDebugLevel, "CiscoDebugLevel", "", "CiscoDebugLevel")

									cmd.Flags().StringVar(&CiscoOpromLaunchOptimization, "CiscoOpromLaunchOptimization", "", "CiscoOpromLaunchOptimization")

									cmd.Flags().StringVar(&CkeLowPolicy, "CkeLowPolicy", "", "CkeLowPolicy")

									cmd.Flags().StringVar(&ClosedLoopThermThrotl, "ClosedLoopThermThrotl", "", "ClosedLoopThermThrotl")

									cmd.Flags().StringVar(&CmciEnable, "CmciEnable", "", "CmciEnable")

									cmd.Flags().StringVar(&ConfigTdp, "ConfigTdp", "", "ConfigTdp")

									cmd.Flags().StringVar(&ConsoleRedirection, "ConsoleRedirection", "", "ConsoleRedirection")

									cmd.Flags().StringVar(&CoreMultiProcessing, "CoreMultiProcessing", "", "CoreMultiProcessing")

									cmd.Flags().StringVar(&CpuEnergyPerformance, "CpuEnergyPerformance", "", "CpuEnergyPerformance")

									cmd.Flags().StringVar(&CpuFrequencyFloor, "CpuFrequencyFloor", "", "CpuFrequencyFloor")

									cmd.Flags().StringVar(&CpuPerformance, "CpuPerformance", "", "CpuPerformance")

									cmd.Flags().StringVar(&CpuPowerManagement, "CpuPowerManagement", "", "CpuPowerManagement")

									cmd.Flags().StringVar(&DcpmmFirmwareDowngrade, "DcpmmFirmwareDowngrade", "", "DcpmmFirmwareDowngrade")

									cmd.Flags().StringVar(&DemandScrub, "DemandScrub", "", "DemandScrub")

									cmd.Flags().StringVar(&DirectCacheAccess, "DirectCacheAccess", "", "DirectCacheAccess")

									cmd.Flags().StringVar(&DramClockThrottling, "DramClockThrottling", "", "DramClockThrottling")

									cmd.Flags().StringVar(&DramRefreshRate, "DramRefreshRate", "", "DramRefreshRate")

									cmd.Flags().StringVar(&EnergyEfficientTurbo, "EnergyEfficientTurbo", "", "EnergyEfficientTurbo")

									cmd.Flags().StringVar(&EngPerfTuning, "EngPerfTuning", "", "EngPerfTuning")

									cmd.Flags().StringVar(&EnhancedIntelSpeedStepTech, "EnhancedIntelSpeedStepTech", "", "EnhancedIntelSpeedStepTech")

									cmd.Flags().StringVar(&EppProfile, "EppProfile", "", "EppProfile")

									cmd.Flags().StringVar(&ExecuteDisableBit, "ExecuteDisableBit", "", "ExecuteDisableBit")

									cmd.Flags().StringVar(&ExtendedApic, "ExtendedApic", "", "ExtendedApic")

									cmd.Flags().StringVar(&FlowControl, "FlowControl", "", "FlowControl")

									cmd.Flags().StringVar(&Frb2enable, "Frb2enable", "", "Frb2enable")

									cmd.Flags().StringVar(&HardwarePrefetch, "HardwarePrefetch", "", "HardwarePrefetch")

									cmd.Flags().StringVar(&HwpmEnable, "HwpmEnable", "", "HwpmEnable")

									cmd.Flags().StringVar(&ImcInterleave, "ImcInterleave", "", "ImcInterleave")

									cmd.Flags().StringVar(&IntelHyperThreadingTech, "IntelHyperThreadingTech", "", "IntelHyperThreadingTech")

									cmd.Flags().StringVar(&IntelSpeedSelect, "IntelSpeedSelect", "", "IntelSpeedSelect")

									cmd.Flags().StringVar(&IntelTurboBoostTech, "IntelTurboBoostTech", "", "IntelTurboBoostTech")

									cmd.Flags().StringVar(&IntelVirtualizationTechnology, "IntelVirtualizationTechnology", "", "IntelVirtualizationTechnology")

									cmd.Flags().StringVar(&IntelVtForDirectedIo, "IntelVtForDirectedIo", "", "IntelVtForDirectedIo")

									cmd.Flags().StringVar(&IntelVtdCoherencySupport, "IntelVtdCoherencySupport", "", "IntelVtdCoherencySupport")

									cmd.Flags().StringVar(&IntelVtdInterruptRemapping, "IntelVtdInterruptRemapping", "", "IntelVtdInterruptRemapping")

									cmd.Flags().StringVar(&IntelVtdPassThroughDmaSupport, "IntelVtdPassThroughDmaSupport", "", "IntelVtdPassThroughDmaSupport")

									cmd.Flags().StringVar(&IntelVtdatsSupport, "IntelVtdatsSupport", "", "IntelVtdatsSupport")

									cmd.Flags().StringVar(&IohErrorEnable, "IohErrorEnable", "", "IohErrorEnable")

									cmd.Flags().StringVar(&IohResource, "IohResource", "", "IohResource")

									cmd.Flags().StringVar(&IpPrefetch, "IpPrefetch", "", "IpPrefetch")

									cmd.Flags().StringVar(&Ipv4pxe, "Ipv4pxe", "", "Ipv4pxe")

									cmd.Flags().StringVar(&Ipv6pxe, "Ipv6pxe", "", "Ipv6pxe")

									cmd.Flags().StringVar(&KtiPrefetch, "KtiPrefetch", "", "KtiPrefetch")

									cmd.Flags().StringVar(&LegacyOsRedirection, "LegacyOsRedirection", "", "LegacyOsRedirection")

									cmd.Flags().StringVar(&LegacyUsbSupport, "LegacyUsbSupport", "", "LegacyUsbSupport")

									cmd.Flags().StringVar(&LlcPrefetch, "LlcPrefetch", "", "LlcPrefetch")

									cmd.Flags().StringVar(&LomPort0state, "LomPort0state", "", "LomPort0state")

									cmd.Flags().StringVar(&LomPort1state, "LomPort1state", "", "LomPort1state")

									cmd.Flags().StringVar(&LomPort2state, "LomPort2state", "", "LomPort2state")

									cmd.Flags().StringVar(&LomPort3state, "LomPort3state", "", "LomPort3state")

									cmd.Flags().StringVar(&LomPortsAllState, "LomPortsAllState", "", "LomPortsAllState")

									cmd.Flags().StringVar(&LvDdrMode, "LvDdrMode", "", "LvDdrMode")

									cmd.Flags().StringVar(&MakeDeviceNonBootable, "MakeDeviceNonBootable", "", "MakeDeviceNonBootable")

									cmd.Flags().StringVar(&MemoryInterLeave, "MemoryInterLeave", "", "MemoryInterLeave")

									cmd.Flags().StringVar(&MemoryMappedIoAbove4gb, "MemoryMappedIoAbove4gb", "", "MemoryMappedIoAbove4gb")

									cmd.Flags().StringVar(&MemorySizeLimit, "MemorySizeLimit", "", "MemorySizeLimit")

									cmd.Flags().StringVar(&MirroringMode, "MirroringMode", "", "MirroringMode")

									cmd.Flags().StringVar(&MmcfgBase, "MmcfgBase", "", "MmcfgBase")

									cmd.Flags().StringVar(&NetworkStack, "NetworkStack", "", "NetworkStack")

									cmd.Flags().StringVar(&NumaOptimized, "NumaOptimized", "", "NumaOptimized")

									cmd.Flags().StringVar(&Onboard10gbitLom, "Onboard10gbitLom", "", "Onboard10gbitLom")

									cmd.Flags().StringVar(&OnboardGbitLom, "OnboardGbitLom", "", "OnboardGbitLom")

									cmd.Flags().StringVar(&OnboardScuStorageSupport, "OnboardScuStorageSupport", "", "OnboardScuStorageSupport")

									cmd.Flags().StringVar(&OnboardScuStorageSwStack, "OnboardScuStorageSwStack", "", "OnboardScuStorageSwStack")

									cmd.Flags().StringVar(&OsBootWatchdogTimer, "OsBootWatchdogTimer", "", "OsBootWatchdogTimer")

									cmd.Flags().StringVar(&OsBootWatchdogTimerPolicy, "OsBootWatchdogTimerPolicy", "", "OsBootWatchdogTimerPolicy")

									cmd.Flags().StringVar(&OsBootWatchdogTimerTimeout, "OsBootWatchdogTimerTimeout", "", "OsBootWatchdogTimerTimeout")

									cmd.Flags().StringVar(&OutOfBandMgmtPort, "OutOfBandMgmtPort", "", "OutOfBandMgmtPort")

									cmd.Flags().StringVar(&PackageCstateLimit, "PackageCstateLimit", "", "PackageCstateLimit")

									cmd.Flags().StringVar(&PartialMirrorModeConfig, "PartialMirrorModeConfig", "", "PartialMirrorModeConfig")

									cmd.Flags().StringVar(&PartialMirrorPercent, "PartialMirrorPercent", "", "PartialMirrorPercent")

									cmd.Flags().StringVar(&PartialMirrorValue1, "PartialMirrorValue1", "", "PartialMirrorValue1")

									cmd.Flags().StringVar(&PartialMirrorValue2, "PartialMirrorValue2", "", "PartialMirrorValue2")

									cmd.Flags().StringVar(&PartialMirrorValue3, "PartialMirrorValue3", "", "PartialMirrorValue3")

									cmd.Flags().StringVar(&PartialMirrorValue4, "PartialMirrorValue4", "", "PartialMirrorValue4")

									cmd.Flags().StringVar(&PatrolScrub, "PatrolScrub", "", "PatrolScrub")

									cmd.Flags().StringVar(&PatrolScrubDuration, "PatrolScrubDuration", "", "PatrolScrubDuration")

									cmd.Flags().StringVar(&PcIeRasSupport, "PcIeRasSupport", "", "PcIeRasSupport")

									cmd.Flags().StringVar(&PcIeSsdHotPlugSupport, "PcIeSsdHotPlugSupport", "", "PcIeSsdHotPlugSupport")

									cmd.Flags().StringVar(&PchUsb30mode, "PchUsb30mode", "", "PchUsb30mode")

									cmd.Flags().StringVar(&PciOptionRoMs, "PciOptionRoMs", "", "PciOptionRoMs")

									cmd.Flags().StringVar(&PciRomClp, "PciRomClp", "", "PciRomClp")

									cmd.Flags().StringVar(&PopSupport, "PopSupport", "", "PopSupport")

									cmd.Flags().StringVar(&PostErrorPause, "PostErrorPause", "", "PostErrorPause")

									cmd.Flags().StringVar(&ProcessorC1e, "ProcessorC1e", "", "ProcessorC1e")

									cmd.Flags().StringVar(&ProcessorC3report, "ProcessorC3report", "", "ProcessorC3report")

									cmd.Flags().StringVar(&ProcessorC6report, "ProcessorC6report", "", "ProcessorC6report")

									cmd.Flags().StringVar(&ProcessorCstate, "ProcessorCstate", "", "ProcessorCstate")

									cmd.Flags().StringVar(&Psata, "Psata", "", "Psata")

									cmd.Flags().StringVar(&PstateCoordType, "PstateCoordType", "", "PstateCoordType")

									cmd.Flags().StringVar(&PuttyKeyPad, "PuttyKeyPad", "", "PuttyKeyPad")

									cmd.Flags().StringVar(&PwrPerfTuning, "PwrPerfTuning", "", "PwrPerfTuning")

									cmd.Flags().StringVar(&QpiLinkFrequency, "QpiLinkFrequency", "", "QpiLinkFrequency")

									cmd.Flags().StringVar(&QpiSnoopMode, "QpiSnoopMode", "", "QpiSnoopMode")

									cmd.Flags().StringVar(&RankInterLeave, "RankInterLeave", "", "RankInterLeave")

									cmd.Flags().StringVar(&RedirectionAfterPost, "RedirectionAfterPost", "", "RedirectionAfterPost")

									cmd.Flags().StringVar(&SataModeSelect, "SataModeSelect", "", "SataModeSelect")

									cmd.Flags().StringVar(&SelectMemoryRasConfiguration, "SelectMemoryRasConfiguration", "", "SelectMemoryRasConfiguration")

									cmd.Flags().StringVar(&SelectPprType, "SelectPprType", "", "SelectPprType")

									cmd.Flags().StringVar(&SerialPortAenable, "SerialPortAenable", "", "SerialPortAenable")

									cmd.Flags().StringVar(&SinglePctlEnable, "SinglePctlEnable", "", "SinglePctlEnable")

									cmd.Flags().StringVar(&Slot10linkSpeed, "Slot10linkSpeed", "", "Slot10linkSpeed")

									cmd.Flags().StringVar(&Slot10state, "Slot10state", "", "Slot10state")

									cmd.Flags().StringVar(&Slot11linkSpeed, "Slot11linkSpeed", "", "Slot11linkSpeed")

									cmd.Flags().StringVar(&Slot11state, "Slot11state", "", "Slot11state")

									cmd.Flags().StringVar(&Slot12linkSpeed, "Slot12linkSpeed", "", "Slot12linkSpeed")

									cmd.Flags().StringVar(&Slot12state, "Slot12state", "", "Slot12state")

									cmd.Flags().StringVar(&Slot13state, "Slot13state", "", "Slot13state")

									cmd.Flags().StringVar(&Slot14state, "Slot14state", "", "Slot14state")

									cmd.Flags().StringVar(&Slot1linkSpeed, "Slot1linkSpeed", "", "Slot1linkSpeed")

									cmd.Flags().StringVar(&Slot1state, "Slot1state", "", "Slot1state")

									cmd.Flags().StringVar(&Slot2linkSpeed, "Slot2linkSpeed", "", "Slot2linkSpeed")

									cmd.Flags().StringVar(&Slot2state, "Slot2state", "", "Slot2state")

									cmd.Flags().StringVar(&Slot3linkSpeed, "Slot3linkSpeed", "", "Slot3linkSpeed")

									cmd.Flags().StringVar(&Slot3state, "Slot3state", "", "Slot3state")

									cmd.Flags().StringVar(&Slot4linkSpeed, "Slot4linkSpeed", "", "Slot4linkSpeed")

									cmd.Flags().StringVar(&Slot4state, "Slot4state", "", "Slot4state")

									cmd.Flags().StringVar(&Slot5linkSpeed, "Slot5linkSpeed", "", "Slot5linkSpeed")

									cmd.Flags().StringVar(&Slot5state, "Slot5state", "", "Slot5state")

									cmd.Flags().StringVar(&Slot6linkSpeed, "Slot6linkSpeed", "", "Slot6linkSpeed")

									cmd.Flags().StringVar(&Slot6state, "Slot6state", "", "Slot6state")

									cmd.Flags().StringVar(&Slot7linkSpeed, "Slot7linkSpeed", "", "Slot7linkSpeed")

									cmd.Flags().StringVar(&Slot7state, "Slot7state", "", "Slot7state")

									cmd.Flags().StringVar(&Slot8linkSpeed, "Slot8linkSpeed", "", "Slot8linkSpeed")

									cmd.Flags().StringVar(&Slot8state, "Slot8state", "", "Slot8state")

									cmd.Flags().StringVar(&Slot9linkSpeed, "Slot9linkSpeed", "", "Slot9linkSpeed")

									cmd.Flags().StringVar(&Slot9state, "Slot9state", "", "Slot9state")

									cmd.Flags().StringVar(&SlotFlomLinkSpeed, "SlotFlomLinkSpeed", "", "SlotFlomLinkSpeed")

									cmd.Flags().StringVar(&SlotFrontNvme1linkSpeed, "SlotFrontNvme1linkSpeed", "", "SlotFrontNvme1linkSpeed")

									cmd.Flags().StringVar(&SlotFrontNvme2linkSpeed, "SlotFrontNvme2linkSpeed", "", "SlotFrontNvme2linkSpeed")

									cmd.Flags().StringVar(&SlotFrontSlot5linkSpeed, "SlotFrontSlot5linkSpeed", "", "SlotFrontSlot5linkSpeed")

									cmd.Flags().StringVar(&SlotFrontSlot6linkSpeed, "SlotFrontSlot6linkSpeed", "", "SlotFrontSlot6linkSpeed")

									cmd.Flags().StringVar(&SlotGpu1state, "SlotGpu1state", "", "SlotGpu1state")

									cmd.Flags().StringVar(&SlotGpu2state, "SlotGpu2state", "", "SlotGpu2state")

									cmd.Flags().StringVar(&SlotGpu3state, "SlotGpu3state", "", "SlotGpu3state")

									cmd.Flags().StringVar(&SlotGpu4state, "SlotGpu4state", "", "SlotGpu4state")

									cmd.Flags().StringVar(&SlotGpu5state, "SlotGpu5state", "", "SlotGpu5state")

									cmd.Flags().StringVar(&SlotGpu6state, "SlotGpu6state", "", "SlotGpu6state")

									cmd.Flags().StringVar(&SlotGpu7state, "SlotGpu7state", "", "SlotGpu7state")

									cmd.Flags().StringVar(&SlotGpu8state, "SlotGpu8state", "", "SlotGpu8state")

									cmd.Flags().StringVar(&SlotHbaLinkSpeed, "SlotHbaLinkSpeed", "", "SlotHbaLinkSpeed")

									cmd.Flags().StringVar(&SlotHbaState, "SlotHbaState", "", "SlotHbaState")

									cmd.Flags().StringVar(&SlotLom1link, "SlotLom1link", "", "SlotLom1link")

									cmd.Flags().StringVar(&SlotLom2link, "SlotLom2link", "", "SlotLom2link")

									cmd.Flags().StringVar(&SlotMezzState, "SlotMezzState", "", "SlotMezzState")

									cmd.Flags().StringVar(&SlotMlomLinkSpeed, "SlotMlomLinkSpeed", "", "SlotMlomLinkSpeed")

									cmd.Flags().StringVar(&SlotMlomState, "SlotMlomState", "", "SlotMlomState")

									cmd.Flags().StringVar(&SlotMraidLinkSpeed, "SlotMraidLinkSpeed", "", "SlotMraidLinkSpeed")

									cmd.Flags().StringVar(&SlotMraidState, "SlotMraidState", "", "SlotMraidState")

									cmd.Flags().StringVar(&SlotN10state, "SlotN10state", "", "SlotN10state")

									cmd.Flags().StringVar(&SlotN11state, "SlotN11state", "", "SlotN11state")

									cmd.Flags().StringVar(&SlotN12state, "SlotN12state", "", "SlotN12state")

									cmd.Flags().StringVar(&SlotN13state, "SlotN13state", "", "SlotN13state")

									cmd.Flags().StringVar(&SlotN14state, "SlotN14state", "", "SlotN14state")

									cmd.Flags().StringVar(&SlotN15state, "SlotN15state", "", "SlotN15state")

									cmd.Flags().StringVar(&SlotN16state, "SlotN16state", "", "SlotN16state")

									cmd.Flags().StringVar(&SlotN17state, "SlotN17state", "", "SlotN17state")

									cmd.Flags().StringVar(&SlotN18state, "SlotN18state", "", "SlotN18state")

									cmd.Flags().StringVar(&SlotN19state, "SlotN19state", "", "SlotN19state")

									cmd.Flags().StringVar(&SlotN1state, "SlotN1state", "", "SlotN1state")

									cmd.Flags().StringVar(&SlotN20state, "SlotN20state", "", "SlotN20state")

									cmd.Flags().StringVar(&SlotN21state, "SlotN21state", "", "SlotN21state")

									cmd.Flags().StringVar(&SlotN22state, "SlotN22state", "", "SlotN22state")

									cmd.Flags().StringVar(&SlotN23state, "SlotN23state", "", "SlotN23state")

									cmd.Flags().StringVar(&SlotN24state, "SlotN24state", "", "SlotN24state")

									cmd.Flags().StringVar(&SlotN2state, "SlotN2state", "", "SlotN2state")

									cmd.Flags().StringVar(&SlotN3state, "SlotN3state", "", "SlotN3state")

									cmd.Flags().StringVar(&SlotN4state, "SlotN4state", "", "SlotN4state")

									cmd.Flags().StringVar(&SlotN5state, "SlotN5state", "", "SlotN5state")

									cmd.Flags().StringVar(&SlotN6state, "SlotN6state", "", "SlotN6state")

									cmd.Flags().StringVar(&SlotN7state, "SlotN7state", "", "SlotN7state")

									cmd.Flags().StringVar(&SlotN8state, "SlotN8state", "", "SlotN8state")

									cmd.Flags().StringVar(&SlotN9state, "SlotN9state", "", "SlotN9state")

									cmd.Flags().StringVar(&SlotRaidLinkSpeed, "SlotRaidLinkSpeed", "", "SlotRaidLinkSpeed")

									cmd.Flags().StringVar(&SlotRaidState, "SlotRaidState", "", "SlotRaidState")

									cmd.Flags().StringVar(&SlotRearNvme1linkSpeed, "SlotRearNvme1linkSpeed", "", "SlotRearNvme1linkSpeed")

									cmd.Flags().StringVar(&SlotRearNvme1state, "SlotRearNvme1state", "", "SlotRearNvme1state")

									cmd.Flags().StringVar(&SlotRearNvme2linkSpeed, "SlotRearNvme2linkSpeed", "", "SlotRearNvme2linkSpeed")

									cmd.Flags().StringVar(&SlotRearNvme2state, "SlotRearNvme2state", "", "SlotRearNvme2state")

									cmd.Flags().StringVar(&SlotRearNvme3state, "SlotRearNvme3state", "", "SlotRearNvme3state")

									cmd.Flags().StringVar(&SlotRearNvme4state, "SlotRearNvme4state", "", "SlotRearNvme4state")

									cmd.Flags().StringVar(&SlotRearNvme5state, "SlotRearNvme5state", "", "SlotRearNvme5state")

									cmd.Flags().StringVar(&SlotRearNvme6state, "SlotRearNvme6state", "", "SlotRearNvme6state")

									cmd.Flags().StringVar(&SlotRearNvme7state, "SlotRearNvme7state", "", "SlotRearNvme7state")

									cmd.Flags().StringVar(&SlotRearNvme8state, "SlotRearNvme8state", "", "SlotRearNvme8state")

									cmd.Flags().StringVar(&SlotRiser1linkSpeed, "SlotRiser1linkSpeed", "", "SlotRiser1linkSpeed")

									cmd.Flags().StringVar(&SlotRiser1slot1linkSpeed, "SlotRiser1slot1linkSpeed", "", "SlotRiser1slot1linkSpeed")

									cmd.Flags().StringVar(&SlotRiser1slot2linkSpeed, "SlotRiser1slot2linkSpeed", "", "SlotRiser1slot2linkSpeed")

									cmd.Flags().StringVar(&SlotRiser1slot3linkSpeed, "SlotRiser1slot3linkSpeed", "", "SlotRiser1slot3linkSpeed")

									cmd.Flags().StringVar(&SlotRiser2linkSpeed, "SlotRiser2linkSpeed", "", "SlotRiser2linkSpeed")

									cmd.Flags().StringVar(&SlotRiser2slot4linkSpeed, "SlotRiser2slot4linkSpeed", "", "SlotRiser2slot4linkSpeed")

									cmd.Flags().StringVar(&SlotRiser2slot5linkSpeed, "SlotRiser2slot5linkSpeed", "", "SlotRiser2slot5linkSpeed")

									cmd.Flags().StringVar(&SlotRiser2slot6linkSpeed, "SlotRiser2slot6linkSpeed", "", "SlotRiser2slot6linkSpeed")

									cmd.Flags().StringVar(&SlotSasState, "SlotSasState", "", "SlotSasState")

									cmd.Flags().StringVar(&SlotSsdSlot1linkSpeed, "SlotSsdSlot1linkSpeed", "", "SlotSsdSlot1linkSpeed")

									cmd.Flags().StringVar(&SlotSsdSlot2linkSpeed, "SlotSsdSlot2linkSpeed", "", "SlotSsdSlot2linkSpeed")

									cmd.Flags().StringVar(&Smee, "Smee", "", "Smee")

									cmd.Flags().StringVar(&SmtMode, "SmtMode", "", "SmtMode")

									cmd.Flags().StringVar(&Snc, "Snc", "", "Snc")

									cmd.Flags().StringVar(&SparingMode, "SparingMode", "", "SparingMode")

									cmd.Flags().StringVar(&SrIov, "SrIov", "", "SrIov")

									cmd.Flags().StringVar(&StreamerPrefetch, "StreamerPrefetch", "", "StreamerPrefetch")

									cmd.Flags().StringVar(&SvmMode, "SvmMode", "", "SvmMode")

									cmd.Flags().StringVar(&TerminalType, "TerminalType", "", "TerminalType")

									cmd.Flags().StringVar(&TpmControl, "TpmControl", "", "TpmControl")

									cmd.Flags().StringVar(&TpmSupport, "TpmSupport", "", "TpmSupport")

									cmd.Flags().StringVar(&TxtSupport, "TxtSupport", "", "TxtSupport")

									cmd.Flags().StringVar(&UcsmBootOrderRule, "UcsmBootOrderRule", "", "UcsmBootOrderRule")

									cmd.Flags().StringVar(&UsbEmul6064, "UsbEmul6064", "", "UsbEmul6064")

									cmd.Flags().StringVar(&UsbPortFront, "UsbPortFront", "", "UsbPortFront")

									cmd.Flags().StringVar(&UsbPortInternal, "UsbPortInternal", "", "UsbPortInternal")

									cmd.Flags().StringVar(&UsbPortKvm, "UsbPortKvm", "", "UsbPortKvm")

									cmd.Flags().StringVar(&UsbPortRear, "UsbPortRear", "", "UsbPortRear")

									cmd.Flags().StringVar(&UsbPortSdCard, "UsbPortSdCard", "", "UsbPortSdCard")

									cmd.Flags().StringVar(&UsbPortVmedia, "UsbPortVmedia", "", "UsbPortVmedia")

									cmd.Flags().StringVar(&UsbXhciSupport, "UsbXhciSupport", "", "UsbXhciSupport")

									cmd.Flags().StringVar(&VgaPriority, "VgaPriority", "", "VgaPriority")

									cmd.Flags().StringVar(&VmdEnable, "VmdEnable", "", "VmdEnable")

									cmd.Flags().StringVar(&WorkLoadConfig, "WorkLoadConfig", "", "WorkLoadConfig")

									cmd.Flags().StringVar(&XptPrefetch, "XptPrefetch", "", "XptPrefetch")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var ActualBootMode string

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatebiosbootmode",

										Short: "Update a 'bios.BootMode' resource.",
										Long: `Update a 'bios.BootMode' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.BiosApi.UpdateBiosBootMode(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&ActualBootMode, "ActualBootMode", "", "ActualBootMode")

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("ComputeRackUnit", "", "ComputeRackUnit")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var AcsControlGpu1state string

									var AcsControlGpu2state string

									var AcsControlGpu3state string

									var AcsControlGpu4state string

									var AcsControlGpu5state string

									var AcsControlGpu6state string

									var AcsControlGpu7state string

									var AcsControlGpu8state string

									var AcsControlSlot11state string

									var AcsControlSlot12state string

									var AcsControlSlot13state string

									var AcsControlSlot14state string

									var AdjacentCacheLinePrefetch string

									var AllUsbDevices string

									var Altitude string

									var AspmSupport string

									var AssertNmiOnPerr string

									var AssertNmiOnSerr string

									var AutoCcState string

									var AutonumousCstateEnable string

									var BaudRate string

									var BmeDmaMitigation string

									var BootOptionNumRetry string

									var BootOptionReCoolDown string

									var BootOptionRetry string

									var BootPerformanceMode string

									var CbsCmnCpuCpb string

									var CbsCmnCpuGenDowncoreCtrl string

									var CbsCmnCpuGlobalCstateCtrl string

									var CbsCmnCpuL1streamHwPrefetcher string

									var CbsCmnCpuL2streamHwPrefetcher string

									var CbsCmnDeterminismSlider string

									var CbsCmnGnbNbIommu string

									var CbsCmnMemCtrlBankGroupSwapDdr4 string

									var CbsCmnMemMapBankInterleaveDdr4 string

									var CbsCmncTdpCtl string

									var CbsDfCmnMemIntlv string

									var CbsDfCmnMemIntlvSize string

									var CdnEnable string

									var CdnSupport string

									var ChannelInterLeave string

									var CiscoAdaptiveMemTraining string

									var CiscoDebugLevel string

									var CiscoOpromLaunchOptimization string

									var CkeLowPolicy string

									var ClosedLoopThermThrotl string

									var CmciEnable string

									var ConfigTdp string

									var ConsoleRedirection string

									var CoreMultiProcessing string

									var CpuEnergyPerformance string

									var CpuFrequencyFloor string

									var CpuPerformance string

									var CpuPowerManagement string

									var DcpmmFirmwareDowngrade string

									var DemandScrub string

									var DirectCacheAccess string

									var DramClockThrottling string

									var DramRefreshRate string

									var EnergyEfficientTurbo string

									var EngPerfTuning string

									var EnhancedIntelSpeedStepTech string

									var EppProfile string

									var ExecuteDisableBit string

									var ExtendedApic string

									var FlowControl string

									var Frb2enable string

									var HardwarePrefetch string

									var HwpmEnable string

									var ImcInterleave string

									var IntelHyperThreadingTech string

									var IntelSpeedSelect string

									var IntelTurboBoostTech string

									var IntelVirtualizationTechnology string

									var IntelVtForDirectedIo string

									var IntelVtdCoherencySupport string

									var IntelVtdInterruptRemapping string

									var IntelVtdPassThroughDmaSupport string

									var IntelVtdatsSupport string

									var IohErrorEnable string

									var IohResource string

									var IpPrefetch string

									var Ipv4pxe string

									var Ipv6pxe string

									var KtiPrefetch string

									var LegacyOsRedirection string

									var LegacyUsbSupport string

									var LlcPrefetch string

									var LomPort0state string

									var LomPort1state string

									var LomPort2state string

									var LomPort3state string

									var LomPortsAllState string

									var LvDdrMode string

									var MakeDeviceNonBootable string

									var MemoryInterLeave string

									var MemoryMappedIoAbove4gb string

									var MemorySizeLimit string

									var MirroringMode string

									var MmcfgBase string

									var NetworkStack string

									var NumaOptimized string

									var Onboard10gbitLom string

									var OnboardGbitLom string

									var OnboardScuStorageSupport string

									var OnboardScuStorageSwStack string

									var OsBootWatchdogTimer string

									var OsBootWatchdogTimerPolicy string

									var OsBootWatchdogTimerTimeout string

									var OutOfBandMgmtPort string

									var PackageCstateLimit string

									var PartialMirrorModeConfig string

									var PartialMirrorPercent string

									var PartialMirrorValue1 string

									var PartialMirrorValue2 string

									var PartialMirrorValue3 string

									var PartialMirrorValue4 string

									var PatrolScrub string

									var PatrolScrubDuration string

									var PcIeRasSupport string

									var PcIeSsdHotPlugSupport string

									var PchUsb30mode string

									var PciOptionRoMs string

									var PciRomClp string

									var PopSupport string

									var PostErrorPause string

									var ProcessorC1e string

									var ProcessorC3report string

									var ProcessorC6report string

									var ProcessorCstate string

									var Psata string

									var PstateCoordType string

									var PuttyKeyPad string

									var PwrPerfTuning string

									var QpiLinkFrequency string

									var QpiSnoopMode string

									var RankInterLeave string

									var RedirectionAfterPost string

									var SataModeSelect string

									var SelectMemoryRasConfiguration string

									var SelectPprType string

									var SerialPortAenable string

									var SinglePctlEnable string

									var Slot10linkSpeed string

									var Slot10state string

									var Slot11linkSpeed string

									var Slot11state string

									var Slot12linkSpeed string

									var Slot12state string

									var Slot13state string

									var Slot14state string

									var Slot1linkSpeed string

									var Slot1state string

									var Slot2linkSpeed string

									var Slot2state string

									var Slot3linkSpeed string

									var Slot3state string

									var Slot4linkSpeed string

									var Slot4state string

									var Slot5linkSpeed string

									var Slot5state string

									var Slot6linkSpeed string

									var Slot6state string

									var Slot7linkSpeed string

									var Slot7state string

									var Slot8linkSpeed string

									var Slot8state string

									var Slot9linkSpeed string

									var Slot9state string

									var SlotFlomLinkSpeed string

									var SlotFrontNvme1linkSpeed string

									var SlotFrontNvme2linkSpeed string

									var SlotFrontSlot5linkSpeed string

									var SlotFrontSlot6linkSpeed string

									var SlotGpu1state string

									var SlotGpu2state string

									var SlotGpu3state string

									var SlotGpu4state string

									var SlotGpu5state string

									var SlotGpu6state string

									var SlotGpu7state string

									var SlotGpu8state string

									var SlotHbaLinkSpeed string

									var SlotHbaState string

									var SlotLom1link string

									var SlotLom2link string

									var SlotMezzState string

									var SlotMlomLinkSpeed string

									var SlotMlomState string

									var SlotMraidLinkSpeed string

									var SlotMraidState string

									var SlotN10state string

									var SlotN11state string

									var SlotN12state string

									var SlotN13state string

									var SlotN14state string

									var SlotN15state string

									var SlotN16state string

									var SlotN17state string

									var SlotN18state string

									var SlotN19state string

									var SlotN1state string

									var SlotN20state string

									var SlotN21state string

									var SlotN22state string

									var SlotN23state string

									var SlotN24state string

									var SlotN2state string

									var SlotN3state string

									var SlotN4state string

									var SlotN5state string

									var SlotN6state string

									var SlotN7state string

									var SlotN8state string

									var SlotN9state string

									var SlotRaidLinkSpeed string

									var SlotRaidState string

									var SlotRearNvme1linkSpeed string

									var SlotRearNvme1state string

									var SlotRearNvme2linkSpeed string

									var SlotRearNvme2state string

									var SlotRearNvme3state string

									var SlotRearNvme4state string

									var SlotRearNvme5state string

									var SlotRearNvme6state string

									var SlotRearNvme7state string

									var SlotRearNvme8state string

									var SlotRiser1linkSpeed string

									var SlotRiser1slot1linkSpeed string

									var SlotRiser1slot2linkSpeed string

									var SlotRiser1slot3linkSpeed string

									var SlotRiser2linkSpeed string

									var SlotRiser2slot4linkSpeed string

									var SlotRiser2slot5linkSpeed string

									var SlotRiser2slot6linkSpeed string

									var SlotSasState string

									var SlotSsdSlot1linkSpeed string

									var SlotSsdSlot2linkSpeed string

									var Smee string

									var SmtMode string

									var Snc string

									var SparingMode string

									var SrIov string

									var StreamerPrefetch string

									var SvmMode string

									var TerminalType string

									var TpmControl string

									var TpmSupport string

									var TxtSupport string

									var UcsmBootOrderRule string

									var UsbEmul6064 string

									var UsbPortFront string

									var UsbPortInternal string

									var UsbPortKvm string

									var UsbPortRear string

									var UsbPortSdCard string

									var UsbPortVmedia string

									var UsbXhciSupport string

									var VgaPriority string

									var VmdEnable string

									var WorkLoadConfig string

									var XptPrefetch string

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "updatebiospolicy",

										Short: "Update a 'bios.Policy' resource.",
										Long: `Update a 'bios.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.BiosApi.UpdateBiosPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&AcsControlGpu1state, "AcsControlGpu1state", "", "AcsControlGpu1state")

									cmd.Flags().StringVar(&AcsControlGpu2state, "AcsControlGpu2state", "", "AcsControlGpu2state")

									cmd.Flags().StringVar(&AcsControlGpu3state, "AcsControlGpu3state", "", "AcsControlGpu3state")

									cmd.Flags().StringVar(&AcsControlGpu4state, "AcsControlGpu4state", "", "AcsControlGpu4state")

									cmd.Flags().StringVar(&AcsControlGpu5state, "AcsControlGpu5state", "", "AcsControlGpu5state")

									cmd.Flags().StringVar(&AcsControlGpu6state, "AcsControlGpu6state", "", "AcsControlGpu6state")

									cmd.Flags().StringVar(&AcsControlGpu7state, "AcsControlGpu7state", "", "AcsControlGpu7state")

									cmd.Flags().StringVar(&AcsControlGpu8state, "AcsControlGpu8state", "", "AcsControlGpu8state")

									cmd.Flags().StringVar(&AcsControlSlot11state, "AcsControlSlot11state", "", "AcsControlSlot11state")

									cmd.Flags().StringVar(&AcsControlSlot12state, "AcsControlSlot12state", "", "AcsControlSlot12state")

									cmd.Flags().StringVar(&AcsControlSlot13state, "AcsControlSlot13state", "", "AcsControlSlot13state")

									cmd.Flags().StringVar(&AcsControlSlot14state, "AcsControlSlot14state", "", "AcsControlSlot14state")

									cmd.Flags().StringVar(&AdjacentCacheLinePrefetch, "AdjacentCacheLinePrefetch", "", "AdjacentCacheLinePrefetch")

									cmd.Flags().StringVar(&AllUsbDevices, "AllUsbDevices", "", "AllUsbDevices")

									cmd.Flags().StringVar(&Altitude, "Altitude", "", "Altitude")

									cmd.Flags().StringVar(&AspmSupport, "AspmSupport", "", "AspmSupport")

									cmd.Flags().StringVar(&AssertNmiOnPerr, "AssertNmiOnPerr", "", "AssertNmiOnPerr")

									cmd.Flags().StringVar(&AssertNmiOnSerr, "AssertNmiOnSerr", "", "AssertNmiOnSerr")

									cmd.Flags().StringVar(&AutoCcState, "AutoCcState", "", "AutoCcState")

									cmd.Flags().StringVar(&AutonumousCstateEnable, "AutonumousCstateEnable", "", "AutonumousCstateEnable")

									cmd.Flags().StringVar(&BaudRate, "BaudRate", "", "BaudRate")

									cmd.Flags().StringVar(&BmeDmaMitigation, "BmeDmaMitigation", "", "BmeDmaMitigation")

									cmd.Flags().StringVar(&BootOptionNumRetry, "BootOptionNumRetry", "", "BootOptionNumRetry")

									cmd.Flags().StringVar(&BootOptionReCoolDown, "BootOptionReCoolDown", "", "BootOptionReCoolDown")

									cmd.Flags().StringVar(&BootOptionRetry, "BootOptionRetry", "", "BootOptionRetry")

									cmd.Flags().StringVar(&BootPerformanceMode, "BootPerformanceMode", "", "BootPerformanceMode")

									cmd.Flags().StringVar(&CbsCmnCpuCpb, "CbsCmnCpuCpb", "", "CbsCmnCpuCpb")

									cmd.Flags().StringVar(&CbsCmnCpuGenDowncoreCtrl, "CbsCmnCpuGenDowncoreCtrl", "", "CbsCmnCpuGenDowncoreCtrl")

									cmd.Flags().StringVar(&CbsCmnCpuGlobalCstateCtrl, "CbsCmnCpuGlobalCstateCtrl", "", "CbsCmnCpuGlobalCstateCtrl")

									cmd.Flags().StringVar(&CbsCmnCpuL1streamHwPrefetcher, "CbsCmnCpuL1streamHwPrefetcher", "", "CbsCmnCpuL1streamHwPrefetcher")

									cmd.Flags().StringVar(&CbsCmnCpuL2streamHwPrefetcher, "CbsCmnCpuL2streamHwPrefetcher", "", "CbsCmnCpuL2streamHwPrefetcher")

									cmd.Flags().StringVar(&CbsCmnDeterminismSlider, "CbsCmnDeterminismSlider", "", "CbsCmnDeterminismSlider")

									cmd.Flags().StringVar(&CbsCmnGnbNbIommu, "CbsCmnGnbNbIommu", "", "CbsCmnGnbNbIommu")

									cmd.Flags().StringVar(&CbsCmnMemCtrlBankGroupSwapDdr4, "CbsCmnMemCtrlBankGroupSwapDdr4", "", "CbsCmnMemCtrlBankGroupSwapDdr4")

									cmd.Flags().StringVar(&CbsCmnMemMapBankInterleaveDdr4, "CbsCmnMemMapBankInterleaveDdr4", "", "CbsCmnMemMapBankInterleaveDdr4")

									cmd.Flags().StringVar(&CbsCmncTdpCtl, "CbsCmncTdpCtl", "", "CbsCmncTdpCtl")

									cmd.Flags().StringVar(&CbsDfCmnMemIntlv, "CbsDfCmnMemIntlv", "", "CbsDfCmnMemIntlv")

									cmd.Flags().StringVar(&CbsDfCmnMemIntlvSize, "CbsDfCmnMemIntlvSize", "", "CbsDfCmnMemIntlvSize")

									cmd.Flags().StringVar(&CdnEnable, "CdnEnable", "", "CdnEnable")

									cmd.Flags().StringVar(&CdnSupport, "CdnSupport", "", "CdnSupport")

									cmd.Flags().StringVar(&ChannelInterLeave, "ChannelInterLeave", "", "ChannelInterLeave")

									cmd.Flags().StringVar(&CiscoAdaptiveMemTraining, "CiscoAdaptiveMemTraining", "", "CiscoAdaptiveMemTraining")

									cmd.Flags().StringVar(&CiscoDebugLevel, "CiscoDebugLevel", "", "CiscoDebugLevel")

									cmd.Flags().StringVar(&CiscoOpromLaunchOptimization, "CiscoOpromLaunchOptimization", "", "CiscoOpromLaunchOptimization")

									cmd.Flags().StringVar(&CkeLowPolicy, "CkeLowPolicy", "", "CkeLowPolicy")

									cmd.Flags().StringVar(&ClosedLoopThermThrotl, "ClosedLoopThermThrotl", "", "ClosedLoopThermThrotl")

									cmd.Flags().StringVar(&CmciEnable, "CmciEnable", "", "CmciEnable")

									cmd.Flags().StringVar(&ConfigTdp, "ConfigTdp", "", "ConfigTdp")

									cmd.Flags().StringVar(&ConsoleRedirection, "ConsoleRedirection", "", "ConsoleRedirection")

									cmd.Flags().StringVar(&CoreMultiProcessing, "CoreMultiProcessing", "", "CoreMultiProcessing")

									cmd.Flags().StringVar(&CpuEnergyPerformance, "CpuEnergyPerformance", "", "CpuEnergyPerformance")

									cmd.Flags().StringVar(&CpuFrequencyFloor, "CpuFrequencyFloor", "", "CpuFrequencyFloor")

									cmd.Flags().StringVar(&CpuPerformance, "CpuPerformance", "", "CpuPerformance")

									cmd.Flags().StringVar(&CpuPowerManagement, "CpuPowerManagement", "", "CpuPowerManagement")

									cmd.Flags().StringVar(&DcpmmFirmwareDowngrade, "DcpmmFirmwareDowngrade", "", "DcpmmFirmwareDowngrade")

									cmd.Flags().StringVar(&DemandScrub, "DemandScrub", "", "DemandScrub")

									cmd.Flags().StringVar(&DirectCacheAccess, "DirectCacheAccess", "", "DirectCacheAccess")

									cmd.Flags().StringVar(&DramClockThrottling, "DramClockThrottling", "", "DramClockThrottling")

									cmd.Flags().StringVar(&DramRefreshRate, "DramRefreshRate", "", "DramRefreshRate")

									cmd.Flags().StringVar(&EnergyEfficientTurbo, "EnergyEfficientTurbo", "", "EnergyEfficientTurbo")

									cmd.Flags().StringVar(&EngPerfTuning, "EngPerfTuning", "", "EngPerfTuning")

									cmd.Flags().StringVar(&EnhancedIntelSpeedStepTech, "EnhancedIntelSpeedStepTech", "", "EnhancedIntelSpeedStepTech")

									cmd.Flags().StringVar(&EppProfile, "EppProfile", "", "EppProfile")

									cmd.Flags().StringVar(&ExecuteDisableBit, "ExecuteDisableBit", "", "ExecuteDisableBit")

									cmd.Flags().StringVar(&ExtendedApic, "ExtendedApic", "", "ExtendedApic")

									cmd.Flags().StringVar(&FlowControl, "FlowControl", "", "FlowControl")

									cmd.Flags().StringVar(&Frb2enable, "Frb2enable", "", "Frb2enable")

									cmd.Flags().StringVar(&HardwarePrefetch, "HardwarePrefetch", "", "HardwarePrefetch")

									cmd.Flags().StringVar(&HwpmEnable, "HwpmEnable", "", "HwpmEnable")

									cmd.Flags().StringVar(&ImcInterleave, "ImcInterleave", "", "ImcInterleave")

									cmd.Flags().StringVar(&IntelHyperThreadingTech, "IntelHyperThreadingTech", "", "IntelHyperThreadingTech")

									cmd.Flags().StringVar(&IntelSpeedSelect, "IntelSpeedSelect", "", "IntelSpeedSelect")

									cmd.Flags().StringVar(&IntelTurboBoostTech, "IntelTurboBoostTech", "", "IntelTurboBoostTech")

									cmd.Flags().StringVar(&IntelVirtualizationTechnology, "IntelVirtualizationTechnology", "", "IntelVirtualizationTechnology")

									cmd.Flags().StringVar(&IntelVtForDirectedIo, "IntelVtForDirectedIo", "", "IntelVtForDirectedIo")

									cmd.Flags().StringVar(&IntelVtdCoherencySupport, "IntelVtdCoherencySupport", "", "IntelVtdCoherencySupport")

									cmd.Flags().StringVar(&IntelVtdInterruptRemapping, "IntelVtdInterruptRemapping", "", "IntelVtdInterruptRemapping")

									cmd.Flags().StringVar(&IntelVtdPassThroughDmaSupport, "IntelVtdPassThroughDmaSupport", "", "IntelVtdPassThroughDmaSupport")

									cmd.Flags().StringVar(&IntelVtdatsSupport, "IntelVtdatsSupport", "", "IntelVtdatsSupport")

									cmd.Flags().StringVar(&IohErrorEnable, "IohErrorEnable", "", "IohErrorEnable")

									cmd.Flags().StringVar(&IohResource, "IohResource", "", "IohResource")

									cmd.Flags().StringVar(&IpPrefetch, "IpPrefetch", "", "IpPrefetch")

									cmd.Flags().StringVar(&Ipv4pxe, "Ipv4pxe", "", "Ipv4pxe")

									cmd.Flags().StringVar(&Ipv6pxe, "Ipv6pxe", "", "Ipv6pxe")

									cmd.Flags().StringVar(&KtiPrefetch, "KtiPrefetch", "", "KtiPrefetch")

									cmd.Flags().StringVar(&LegacyOsRedirection, "LegacyOsRedirection", "", "LegacyOsRedirection")

									cmd.Flags().StringVar(&LegacyUsbSupport, "LegacyUsbSupport", "", "LegacyUsbSupport")

									cmd.Flags().StringVar(&LlcPrefetch, "LlcPrefetch", "", "LlcPrefetch")

									cmd.Flags().StringVar(&LomPort0state, "LomPort0state", "", "LomPort0state")

									cmd.Flags().StringVar(&LomPort1state, "LomPort1state", "", "LomPort1state")

									cmd.Flags().StringVar(&LomPort2state, "LomPort2state", "", "LomPort2state")

									cmd.Flags().StringVar(&LomPort3state, "LomPort3state", "", "LomPort3state")

									cmd.Flags().StringVar(&LomPortsAllState, "LomPortsAllState", "", "LomPortsAllState")

									cmd.Flags().StringVar(&LvDdrMode, "LvDdrMode", "", "LvDdrMode")

									cmd.Flags().StringVar(&MakeDeviceNonBootable, "MakeDeviceNonBootable", "", "MakeDeviceNonBootable")

									cmd.Flags().StringVar(&MemoryInterLeave, "MemoryInterLeave", "", "MemoryInterLeave")

									cmd.Flags().StringVar(&MemoryMappedIoAbove4gb, "MemoryMappedIoAbove4gb", "", "MemoryMappedIoAbove4gb")

									cmd.Flags().StringVar(&MemorySizeLimit, "MemorySizeLimit", "", "MemorySizeLimit")

									cmd.Flags().StringVar(&MirroringMode, "MirroringMode", "", "MirroringMode")

									cmd.Flags().StringVar(&MmcfgBase, "MmcfgBase", "", "MmcfgBase")

									cmd.Flags().StringVar(&NetworkStack, "NetworkStack", "", "NetworkStack")

									cmd.Flags().StringVar(&NumaOptimized, "NumaOptimized", "", "NumaOptimized")

									cmd.Flags().StringVar(&Onboard10gbitLom, "Onboard10gbitLom", "", "Onboard10gbitLom")

									cmd.Flags().StringVar(&OnboardGbitLom, "OnboardGbitLom", "", "OnboardGbitLom")

									cmd.Flags().StringVar(&OnboardScuStorageSupport, "OnboardScuStorageSupport", "", "OnboardScuStorageSupport")

									cmd.Flags().StringVar(&OnboardScuStorageSwStack, "OnboardScuStorageSwStack", "", "OnboardScuStorageSwStack")

									cmd.Flags().StringVar(&OsBootWatchdogTimer, "OsBootWatchdogTimer", "", "OsBootWatchdogTimer")

									cmd.Flags().StringVar(&OsBootWatchdogTimerPolicy, "OsBootWatchdogTimerPolicy", "", "OsBootWatchdogTimerPolicy")

									cmd.Flags().StringVar(&OsBootWatchdogTimerTimeout, "OsBootWatchdogTimerTimeout", "", "OsBootWatchdogTimerTimeout")

									cmd.Flags().StringVar(&OutOfBandMgmtPort, "OutOfBandMgmtPort", "", "OutOfBandMgmtPort")

									cmd.Flags().StringVar(&PackageCstateLimit, "PackageCstateLimit", "", "PackageCstateLimit")

									cmd.Flags().StringVar(&PartialMirrorModeConfig, "PartialMirrorModeConfig", "", "PartialMirrorModeConfig")

									cmd.Flags().StringVar(&PartialMirrorPercent, "PartialMirrorPercent", "", "PartialMirrorPercent")

									cmd.Flags().StringVar(&PartialMirrorValue1, "PartialMirrorValue1", "", "PartialMirrorValue1")

									cmd.Flags().StringVar(&PartialMirrorValue2, "PartialMirrorValue2", "", "PartialMirrorValue2")

									cmd.Flags().StringVar(&PartialMirrorValue3, "PartialMirrorValue3", "", "PartialMirrorValue3")

									cmd.Flags().StringVar(&PartialMirrorValue4, "PartialMirrorValue4", "", "PartialMirrorValue4")

									cmd.Flags().StringVar(&PatrolScrub, "PatrolScrub", "", "PatrolScrub")

									cmd.Flags().StringVar(&PatrolScrubDuration, "PatrolScrubDuration", "", "PatrolScrubDuration")

									cmd.Flags().StringVar(&PcIeRasSupport, "PcIeRasSupport", "", "PcIeRasSupport")

									cmd.Flags().StringVar(&PcIeSsdHotPlugSupport, "PcIeSsdHotPlugSupport", "", "PcIeSsdHotPlugSupport")

									cmd.Flags().StringVar(&PchUsb30mode, "PchUsb30mode", "", "PchUsb30mode")

									cmd.Flags().StringVar(&PciOptionRoMs, "PciOptionRoMs", "", "PciOptionRoMs")

									cmd.Flags().StringVar(&PciRomClp, "PciRomClp", "", "PciRomClp")

									cmd.Flags().StringVar(&PopSupport, "PopSupport", "", "PopSupport")

									cmd.Flags().StringVar(&PostErrorPause, "PostErrorPause", "", "PostErrorPause")

									cmd.Flags().StringVar(&ProcessorC1e, "ProcessorC1e", "", "ProcessorC1e")

									cmd.Flags().StringVar(&ProcessorC3report, "ProcessorC3report", "", "ProcessorC3report")

									cmd.Flags().StringVar(&ProcessorC6report, "ProcessorC6report", "", "ProcessorC6report")

									cmd.Flags().StringVar(&ProcessorCstate, "ProcessorCstate", "", "ProcessorCstate")

									cmd.Flags().StringVar(&Psata, "Psata", "", "Psata")

									cmd.Flags().StringVar(&PstateCoordType, "PstateCoordType", "", "PstateCoordType")

									cmd.Flags().StringVar(&PuttyKeyPad, "PuttyKeyPad", "", "PuttyKeyPad")

									cmd.Flags().StringVar(&PwrPerfTuning, "PwrPerfTuning", "", "PwrPerfTuning")

									cmd.Flags().StringVar(&QpiLinkFrequency, "QpiLinkFrequency", "", "QpiLinkFrequency")

									cmd.Flags().StringVar(&QpiSnoopMode, "QpiSnoopMode", "", "QpiSnoopMode")

									cmd.Flags().StringVar(&RankInterLeave, "RankInterLeave", "", "RankInterLeave")

									cmd.Flags().StringVar(&RedirectionAfterPost, "RedirectionAfterPost", "", "RedirectionAfterPost")

									cmd.Flags().StringVar(&SataModeSelect, "SataModeSelect", "", "SataModeSelect")

									cmd.Flags().StringVar(&SelectMemoryRasConfiguration, "SelectMemoryRasConfiguration", "", "SelectMemoryRasConfiguration")

									cmd.Flags().StringVar(&SelectPprType, "SelectPprType", "", "SelectPprType")

									cmd.Flags().StringVar(&SerialPortAenable, "SerialPortAenable", "", "SerialPortAenable")

									cmd.Flags().StringVar(&SinglePctlEnable, "SinglePctlEnable", "", "SinglePctlEnable")

									cmd.Flags().StringVar(&Slot10linkSpeed, "Slot10linkSpeed", "", "Slot10linkSpeed")

									cmd.Flags().StringVar(&Slot10state, "Slot10state", "", "Slot10state")

									cmd.Flags().StringVar(&Slot11linkSpeed, "Slot11linkSpeed", "", "Slot11linkSpeed")

									cmd.Flags().StringVar(&Slot11state, "Slot11state", "", "Slot11state")

									cmd.Flags().StringVar(&Slot12linkSpeed, "Slot12linkSpeed", "", "Slot12linkSpeed")

									cmd.Flags().StringVar(&Slot12state, "Slot12state", "", "Slot12state")

									cmd.Flags().StringVar(&Slot13state, "Slot13state", "", "Slot13state")

									cmd.Flags().StringVar(&Slot14state, "Slot14state", "", "Slot14state")

									cmd.Flags().StringVar(&Slot1linkSpeed, "Slot1linkSpeed", "", "Slot1linkSpeed")

									cmd.Flags().StringVar(&Slot1state, "Slot1state", "", "Slot1state")

									cmd.Flags().StringVar(&Slot2linkSpeed, "Slot2linkSpeed", "", "Slot2linkSpeed")

									cmd.Flags().StringVar(&Slot2state, "Slot2state", "", "Slot2state")

									cmd.Flags().StringVar(&Slot3linkSpeed, "Slot3linkSpeed", "", "Slot3linkSpeed")

									cmd.Flags().StringVar(&Slot3state, "Slot3state", "", "Slot3state")

									cmd.Flags().StringVar(&Slot4linkSpeed, "Slot4linkSpeed", "", "Slot4linkSpeed")

									cmd.Flags().StringVar(&Slot4state, "Slot4state", "", "Slot4state")

									cmd.Flags().StringVar(&Slot5linkSpeed, "Slot5linkSpeed", "", "Slot5linkSpeed")

									cmd.Flags().StringVar(&Slot5state, "Slot5state", "", "Slot5state")

									cmd.Flags().StringVar(&Slot6linkSpeed, "Slot6linkSpeed", "", "Slot6linkSpeed")

									cmd.Flags().StringVar(&Slot6state, "Slot6state", "", "Slot6state")

									cmd.Flags().StringVar(&Slot7linkSpeed, "Slot7linkSpeed", "", "Slot7linkSpeed")

									cmd.Flags().StringVar(&Slot7state, "Slot7state", "", "Slot7state")

									cmd.Flags().StringVar(&Slot8linkSpeed, "Slot8linkSpeed", "", "Slot8linkSpeed")

									cmd.Flags().StringVar(&Slot8state, "Slot8state", "", "Slot8state")

									cmd.Flags().StringVar(&Slot9linkSpeed, "Slot9linkSpeed", "", "Slot9linkSpeed")

									cmd.Flags().StringVar(&Slot9state, "Slot9state", "", "Slot9state")

									cmd.Flags().StringVar(&SlotFlomLinkSpeed, "SlotFlomLinkSpeed", "", "SlotFlomLinkSpeed")

									cmd.Flags().StringVar(&SlotFrontNvme1linkSpeed, "SlotFrontNvme1linkSpeed", "", "SlotFrontNvme1linkSpeed")

									cmd.Flags().StringVar(&SlotFrontNvme2linkSpeed, "SlotFrontNvme2linkSpeed", "", "SlotFrontNvme2linkSpeed")

									cmd.Flags().StringVar(&SlotFrontSlot5linkSpeed, "SlotFrontSlot5linkSpeed", "", "SlotFrontSlot5linkSpeed")

									cmd.Flags().StringVar(&SlotFrontSlot6linkSpeed, "SlotFrontSlot6linkSpeed", "", "SlotFrontSlot6linkSpeed")

									cmd.Flags().StringVar(&SlotGpu1state, "SlotGpu1state", "", "SlotGpu1state")

									cmd.Flags().StringVar(&SlotGpu2state, "SlotGpu2state", "", "SlotGpu2state")

									cmd.Flags().StringVar(&SlotGpu3state, "SlotGpu3state", "", "SlotGpu3state")

									cmd.Flags().StringVar(&SlotGpu4state, "SlotGpu4state", "", "SlotGpu4state")

									cmd.Flags().StringVar(&SlotGpu5state, "SlotGpu5state", "", "SlotGpu5state")

									cmd.Flags().StringVar(&SlotGpu6state, "SlotGpu6state", "", "SlotGpu6state")

									cmd.Flags().StringVar(&SlotGpu7state, "SlotGpu7state", "", "SlotGpu7state")

									cmd.Flags().StringVar(&SlotGpu8state, "SlotGpu8state", "", "SlotGpu8state")

									cmd.Flags().StringVar(&SlotHbaLinkSpeed, "SlotHbaLinkSpeed", "", "SlotHbaLinkSpeed")

									cmd.Flags().StringVar(&SlotHbaState, "SlotHbaState", "", "SlotHbaState")

									cmd.Flags().StringVar(&SlotLom1link, "SlotLom1link", "", "SlotLom1link")

									cmd.Flags().StringVar(&SlotLom2link, "SlotLom2link", "", "SlotLom2link")

									cmd.Flags().StringVar(&SlotMezzState, "SlotMezzState", "", "SlotMezzState")

									cmd.Flags().StringVar(&SlotMlomLinkSpeed, "SlotMlomLinkSpeed", "", "SlotMlomLinkSpeed")

									cmd.Flags().StringVar(&SlotMlomState, "SlotMlomState", "", "SlotMlomState")

									cmd.Flags().StringVar(&SlotMraidLinkSpeed, "SlotMraidLinkSpeed", "", "SlotMraidLinkSpeed")

									cmd.Flags().StringVar(&SlotMraidState, "SlotMraidState", "", "SlotMraidState")

									cmd.Flags().StringVar(&SlotN10state, "SlotN10state", "", "SlotN10state")

									cmd.Flags().StringVar(&SlotN11state, "SlotN11state", "", "SlotN11state")

									cmd.Flags().StringVar(&SlotN12state, "SlotN12state", "", "SlotN12state")

									cmd.Flags().StringVar(&SlotN13state, "SlotN13state", "", "SlotN13state")

									cmd.Flags().StringVar(&SlotN14state, "SlotN14state", "", "SlotN14state")

									cmd.Flags().StringVar(&SlotN15state, "SlotN15state", "", "SlotN15state")

									cmd.Flags().StringVar(&SlotN16state, "SlotN16state", "", "SlotN16state")

									cmd.Flags().StringVar(&SlotN17state, "SlotN17state", "", "SlotN17state")

									cmd.Flags().StringVar(&SlotN18state, "SlotN18state", "", "SlotN18state")

									cmd.Flags().StringVar(&SlotN19state, "SlotN19state", "", "SlotN19state")

									cmd.Flags().StringVar(&SlotN1state, "SlotN1state", "", "SlotN1state")

									cmd.Flags().StringVar(&SlotN20state, "SlotN20state", "", "SlotN20state")

									cmd.Flags().StringVar(&SlotN21state, "SlotN21state", "", "SlotN21state")

									cmd.Flags().StringVar(&SlotN22state, "SlotN22state", "", "SlotN22state")

									cmd.Flags().StringVar(&SlotN23state, "SlotN23state", "", "SlotN23state")

									cmd.Flags().StringVar(&SlotN24state, "SlotN24state", "", "SlotN24state")

									cmd.Flags().StringVar(&SlotN2state, "SlotN2state", "", "SlotN2state")

									cmd.Flags().StringVar(&SlotN3state, "SlotN3state", "", "SlotN3state")

									cmd.Flags().StringVar(&SlotN4state, "SlotN4state", "", "SlotN4state")

									cmd.Flags().StringVar(&SlotN5state, "SlotN5state", "", "SlotN5state")

									cmd.Flags().StringVar(&SlotN6state, "SlotN6state", "", "SlotN6state")

									cmd.Flags().StringVar(&SlotN7state, "SlotN7state", "", "SlotN7state")

									cmd.Flags().StringVar(&SlotN8state, "SlotN8state", "", "SlotN8state")

									cmd.Flags().StringVar(&SlotN9state, "SlotN9state", "", "SlotN9state")

									cmd.Flags().StringVar(&SlotRaidLinkSpeed, "SlotRaidLinkSpeed", "", "SlotRaidLinkSpeed")

									cmd.Flags().StringVar(&SlotRaidState, "SlotRaidState", "", "SlotRaidState")

									cmd.Flags().StringVar(&SlotRearNvme1linkSpeed, "SlotRearNvme1linkSpeed", "", "SlotRearNvme1linkSpeed")

									cmd.Flags().StringVar(&SlotRearNvme1state, "SlotRearNvme1state", "", "SlotRearNvme1state")

									cmd.Flags().StringVar(&SlotRearNvme2linkSpeed, "SlotRearNvme2linkSpeed", "", "SlotRearNvme2linkSpeed")

									cmd.Flags().StringVar(&SlotRearNvme2state, "SlotRearNvme2state", "", "SlotRearNvme2state")

									cmd.Flags().StringVar(&SlotRearNvme3state, "SlotRearNvme3state", "", "SlotRearNvme3state")

									cmd.Flags().StringVar(&SlotRearNvme4state, "SlotRearNvme4state", "", "SlotRearNvme4state")

									cmd.Flags().StringVar(&SlotRearNvme5state, "SlotRearNvme5state", "", "SlotRearNvme5state")

									cmd.Flags().StringVar(&SlotRearNvme6state, "SlotRearNvme6state", "", "SlotRearNvme6state")

									cmd.Flags().StringVar(&SlotRearNvme7state, "SlotRearNvme7state", "", "SlotRearNvme7state")

									cmd.Flags().StringVar(&SlotRearNvme8state, "SlotRearNvme8state", "", "SlotRearNvme8state")

									cmd.Flags().StringVar(&SlotRiser1linkSpeed, "SlotRiser1linkSpeed", "", "SlotRiser1linkSpeed")

									cmd.Flags().StringVar(&SlotRiser1slot1linkSpeed, "SlotRiser1slot1linkSpeed", "", "SlotRiser1slot1linkSpeed")

									cmd.Flags().StringVar(&SlotRiser1slot2linkSpeed, "SlotRiser1slot2linkSpeed", "", "SlotRiser1slot2linkSpeed")

									cmd.Flags().StringVar(&SlotRiser1slot3linkSpeed, "SlotRiser1slot3linkSpeed", "", "SlotRiser1slot3linkSpeed")

									cmd.Flags().StringVar(&SlotRiser2linkSpeed, "SlotRiser2linkSpeed", "", "SlotRiser2linkSpeed")

									cmd.Flags().StringVar(&SlotRiser2slot4linkSpeed, "SlotRiser2slot4linkSpeed", "", "SlotRiser2slot4linkSpeed")

									cmd.Flags().StringVar(&SlotRiser2slot5linkSpeed, "SlotRiser2slot5linkSpeed", "", "SlotRiser2slot5linkSpeed")

									cmd.Flags().StringVar(&SlotRiser2slot6linkSpeed, "SlotRiser2slot6linkSpeed", "", "SlotRiser2slot6linkSpeed")

									cmd.Flags().StringVar(&SlotSasState, "SlotSasState", "", "SlotSasState")

									cmd.Flags().StringVar(&SlotSsdSlot1linkSpeed, "SlotSsdSlot1linkSpeed", "", "SlotSsdSlot1linkSpeed")

									cmd.Flags().StringVar(&SlotSsdSlot2linkSpeed, "SlotSsdSlot2linkSpeed", "", "SlotSsdSlot2linkSpeed")

									cmd.Flags().StringVar(&Smee, "Smee", "", "Smee")

									cmd.Flags().StringVar(&SmtMode, "SmtMode", "", "SmtMode")

									cmd.Flags().StringVar(&Snc, "Snc", "", "Snc")

									cmd.Flags().StringVar(&SparingMode, "SparingMode", "", "SparingMode")

									cmd.Flags().StringVar(&SrIov, "SrIov", "", "SrIov")

									cmd.Flags().StringVar(&StreamerPrefetch, "StreamerPrefetch", "", "StreamerPrefetch")

									cmd.Flags().StringVar(&SvmMode, "SvmMode", "", "SvmMode")

									cmd.Flags().StringVar(&TerminalType, "TerminalType", "", "TerminalType")

									cmd.Flags().StringVar(&TpmControl, "TpmControl", "", "TpmControl")

									cmd.Flags().StringVar(&TpmSupport, "TpmSupport", "", "TpmSupport")

									cmd.Flags().StringVar(&TxtSupport, "TxtSupport", "", "TxtSupport")

									cmd.Flags().StringVar(&UcsmBootOrderRule, "UcsmBootOrderRule", "", "UcsmBootOrderRule")

									cmd.Flags().StringVar(&UsbEmul6064, "UsbEmul6064", "", "UsbEmul6064")

									cmd.Flags().StringVar(&UsbPortFront, "UsbPortFront", "", "UsbPortFront")

									cmd.Flags().StringVar(&UsbPortInternal, "UsbPortInternal", "", "UsbPortInternal")

									cmd.Flags().StringVar(&UsbPortKvm, "UsbPortKvm", "", "UsbPortKvm")

									cmd.Flags().StringVar(&UsbPortRear, "UsbPortRear", "", "UsbPortRear")

									cmd.Flags().StringVar(&UsbPortSdCard, "UsbPortSdCard", "", "UsbPortSdCard")

									cmd.Flags().StringVar(&UsbPortVmedia, "UsbPortVmedia", "", "UsbPortVmedia")

									cmd.Flags().StringVar(&UsbXhciSupport, "UsbXhciSupport", "", "UsbXhciSupport")

									cmd.Flags().StringVar(&VgaPriority, "VgaPriority", "", "VgaPriority")

									cmd.Flags().StringVar(&VmdEnable, "VmdEnable", "", "VmdEnable")

									cmd.Flags().StringVar(&WorkLoadConfig, "WorkLoadConfig", "", "WorkLoadConfig")

									cmd.Flags().StringVar(&XptPrefetch, "XptPrefetch", "", "XptPrefetch")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var InitSeq string

									var InitTs string

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var RunningFirmware with unknown data type []FirmwareRunningFirmwareRelationship

									cmd := &cobra.Command{
										Use: "updatebiosunit",

										Short: "Update a 'bios.Unit' resource.",
										Long: `Update a 'bios.Unit' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.BiosApi.UpdateBiosUnit(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&InitSeq, "InitSeq", "", "InitSeq")

									cmd.Flags().StringVar(&InitTs, "InitTs", "", "InitTs")

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship
									if isMoRef(openapi.ComputeBladeRelationship{}) {
										cmd.Flags().String("ComputeBlade", "", "ComputeBlade")
									}

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("ComputeRackUnit", "", "ComputeRackUnit")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "boot",

								Short: "Create Boot resource(s)",
								Long: `Create Boot resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var BootDevices with unknown data type []BootDeviceBase

									var ConfiguredBootMode string

									var EnforceUefiSecureBoot bool

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "precisionpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.BootApi.CreateBootPrecisionPolicy(authCtx)

											body := openapi.NewBootPrecisionPolicy()

											//Set class id and object type by default
											body.ClassId = "boot.PrecisionPolicy"
											body.ObjectType = "boot.PrecisionPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "ConfiguredBootMode") {
												body.ConfiguredBootMode = &ConfiguredBootMode
											}

											if isFlagPassed(cmd.Flags(), "EnforceUefiSecureBoot") {
												body.EnforceUefiSecureBoot = &EnforceUefiSecureBoot
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.BootPrecisionPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'boot.PrecisionPolicy' resource.",
										Long: `Create a 'boot.PrecisionPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&ConfiguredBootMode, "ConfiguredBootMode", "", "ConfiguredBootMode")

									cmd.Flags().BoolVar(&EnforceUefiSecureBoot, "EnforceUefiSecureBoot", false, "EnforceUefiSecureBoot")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var ConfiguredBootMode string

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatebootdevicebootmode",

										Short: "Update a 'boot.DeviceBootMode' resource.",
										Long: `Update a 'boot.DeviceBootMode' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.BootApi.UpdateBootDeviceBootMode(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&ConfiguredBootMode, "ConfiguredBootMode", "", "ConfiguredBootMode")

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("ComputeRackUnit", "", "ComputeRackUnit")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var BootDevices with unknown data type []BootDeviceBase

									var ConfiguredBootMode string

									var EnforceUefiSecureBoot bool

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "updatebootprecisionpolicy",

										Short: "Update a 'boot.PrecisionPolicy' resource.",
										Long: `Update a 'boot.PrecisionPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.BootApi.UpdateBootPrecisionPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&ConfiguredBootMode, "ConfiguredBootMode", "", "ConfiguredBootMode")

									cmd.Flags().BoolVar(&EnforceUefiSecureBoot, "EnforceUefiSecureBoot", false, "EnforceUefiSecureBoot")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "compute",

								Short: "Create Compute resource(s)",
								Long: `Create Compute resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var AdminPowerState string

									var AssetTag string

									//Skipping var AvailableMemory with unknown data type int64

									//Skipping var FaultSummary with unknown data type int64

									//Skipping var KvmIpAddresses with unknown data type []ComputeIpAddress

									var MemorySpeed string

									var MgmtIpAddress string

									//Skipping var NumAdaptors with unknown data type int64

									//Skipping var NumCpuCores with unknown data type int64

									//Skipping var NumCpuCoresEnabled with unknown data type int64

									//Skipping var NumCpus with unknown data type int64

									//Skipping var NumEthHostInterfaces with unknown data type int64

									//Skipping var NumFcHostInterfaces with unknown data type int64

									//Skipping var NumThreads with unknown data type int64

									var OperPowerState string

									var OperState string

									var Operability string

									var PlatformType string

									var Presence string

									var ServiceProfile string

									//Skipping var TotalMemory with unknown data type int64

									var UserLabel string

									var Uuid string

									var ChassisId string

									var ScaledMode string

									//Skipping var SlotId with unknown data type int64

									//Skipping var Adapters with unknown data type []AdapterUnitRelationship

									//Skipping var BiosUnits with unknown data type []BiosUnitRelationship

									//Skipping var Bmc with unknown data type ManagementControllerRelationship

									//Skipping var Board with unknown data type ComputeBoardRelationship

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship

									//Skipping var EquipmentIoExpanders with unknown data type []EquipmentIoExpanderRelationship

									//Skipping var GenericInventoryHolders with unknown data type []InventoryGenericInventoryHolderRelationship

									//Skipping var LocatorLed with unknown data type EquipmentLocatorLedRelationship

									//Skipping var PciDevices with unknown data type []PciDeviceRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StorageEnclosures with unknown data type []StorageEnclosureRelationship

									//Skipping var TopSystem with unknown data type TopSystemRelationship

									cmd := &cobra.Command{
										Use: "updatecomputeblade",

										Short: "Update a 'compute.Blade' resource.",
										Long: `Update a 'compute.Blade' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ComputeApi.UpdateComputeBlade(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&AdminPowerState, "AdminPowerState", "", "AdminPowerState")

									cmd.Flags().StringVar(&AssetTag, "AssetTag", "", "AssetTag")

									cmd.Flags().StringVar(&MemorySpeed, "MemorySpeed", "", "MemorySpeed")

									cmd.Flags().StringVar(&MgmtIpAddress, "MgmtIpAddress", "", "MgmtIpAddress")

									cmd.Flags().StringVar(&OperPowerState, "OperPowerState", "", "OperPowerState")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&Operability, "Operability", "", "Operability")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&ServiceProfile, "ServiceProfile", "", "ServiceProfile")

									cmd.Flags().StringVar(&UserLabel, "UserLabel", "", "UserLabel")

									cmd.Flags().StringVar(&Uuid, "Uuid", "", "Uuid")

									cmd.Flags().StringVar(&ChassisId, "ChassisId", "", "ChassisId")

									cmd.Flags().StringVar(&ScaledMode, "ScaledMode", "", "ScaledMode")

									//Skipping var Bmc with unknown data type ManagementControllerRelationship
									if isMoRef(openapi.ManagementControllerRelationship{}) {
										cmd.Flags().String("Bmc", "", "Bmc")
									}

									//Skipping var Board with unknown data type ComputeBoardRelationship
									if isMoRef(openapi.ComputeBoardRelationship{}) {
										cmd.Flags().String("Board", "", "Board")
									}

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship
									if isMoRef(openapi.EquipmentChassisRelationship{}) {
										cmd.Flags().String("EquipmentChassis", "", "EquipmentChassis")
									}

									//Skipping var LocatorLed with unknown data type EquipmentLocatorLedRelationship
									if isMoRef(openapi.EquipmentLocatorLedRelationship{}) {
										cmd.Flags().String("LocatorLed", "", "LocatorLed")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var TopSystem with unknown data type TopSystemRelationship
									if isMoRef(openapi.TopSystemRelationship{}) {
										cmd.Flags().String("TopSystem", "", "TopSystem")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									//Skipping var BoardId with unknown data type int64

									var CpuTypeController string

									var OperPowerState string

									var Presence string

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship

									//Skipping var EquipmentTpms with unknown data type []EquipmentTpmRelationship

									//Skipping var GraphicsCards with unknown data type []GraphicsCardRelationship

									//Skipping var MemoryArrays with unknown data type []MemoryArrayRelationship

									//Skipping var PciCoprocessorCards with unknown data type []PciCoprocessorCardRelationship

									//Skipping var PciSwitch with unknown data type []PciSwitchRelationship

									//Skipping var PersistentMemoryConfiguration with unknown data type MemoryPersistentMemoryConfigurationRelationship

									//Skipping var Processors with unknown data type []ProcessorUnitRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var SecurityUnits with unknown data type []SecurityUnitRelationship

									//Skipping var StorageControllers with unknown data type []StorageControllerRelationship

									//Skipping var StorageFlexFlashControllers with unknown data type []StorageFlexFlashControllerRelationship

									//Skipping var StorageFlexUtilControllers with unknown data type []StorageFlexUtilControllerRelationship

									cmd := &cobra.Command{
										Use: "updatecomputeboard",

										Short: "Update a 'compute.Board' resource.",
										Long: `Update a 'compute.Board' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ComputeApi.UpdateComputeBoard(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&CpuTypeController, "CpuTypeController", "", "CpuTypeController")

									cmd.Flags().StringVar(&OperPowerState, "OperPowerState", "", "OperPowerState")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship
									if isMoRef(openapi.ComputeBladeRelationship{}) {
										cmd.Flags().String("ComputeBlade", "", "ComputeBlade")
									}

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("ComputeRackUnit", "", "ComputeRackUnit")
									}

									//Skipping var PersistentMemoryConfiguration with unknown data type MemoryPersistentMemoryConfigurationRelationship
									if isMoRef(openapi.MemoryPersistentMemoryConfigurationRelationship{}) {
										cmd.Flags().String("PersistentMemoryConfiguration", "", "PersistentMemoryConfiguration")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var AdminPowerState string

									var AssetTag string

									//Skipping var AvailableMemory with unknown data type int64

									//Skipping var FaultSummary with unknown data type int64

									//Skipping var KvmIpAddresses with unknown data type []ComputeIpAddress

									var MemorySpeed string

									var MgmtIpAddress string

									//Skipping var NumAdaptors with unknown data type int64

									//Skipping var NumCpuCores with unknown data type int64

									//Skipping var NumCpuCoresEnabled with unknown data type int64

									//Skipping var NumCpus with unknown data type int64

									//Skipping var NumEthHostInterfaces with unknown data type int64

									//Skipping var NumFcHostInterfaces with unknown data type int64

									//Skipping var NumThreads with unknown data type int64

									var OperPowerState string

									var OperState string

									var Operability string

									var PlatformType string

									var Presence string

									var ServiceProfile string

									//Skipping var TotalMemory with unknown data type int64

									var UserLabel string

									var Uuid string

									//Skipping var ServerId with unknown data type int64

									//Skipping var Adapters with unknown data type []AdapterUnitRelationship

									//Skipping var BiosBootmode with unknown data type BiosBootModeRelationship

									//Skipping var Biosunits with unknown data type []BiosUnitRelationship

									//Skipping var Bmc with unknown data type ManagementControllerRelationship

									//Skipping var Board with unknown data type ComputeBoardRelationship

									//Skipping var BootDeviceBootmode with unknown data type BootDeviceBootModeRelationship

									//Skipping var Fanmodules with unknown data type []EquipmentFanModuleRelationship

									//Skipping var GenericInventoryHolders with unknown data type []InventoryGenericInventoryHolderRelationship

									//Skipping var LocatorLed with unknown data type EquipmentLocatorLedRelationship

									//Skipping var PciDevices with unknown data type []PciDeviceRelationship

									//Skipping var Psus with unknown data type []EquipmentPsuRelationship

									//Skipping var RackEnclosureSlot with unknown data type EquipmentRackEnclosureSlotRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var SasExpanders with unknown data type []StorageSasExpanderRelationship

									//Skipping var StorageEnclosures with unknown data type []StorageEnclosureRelationship

									//Skipping var TopSystem with unknown data type TopSystemRelationship

									cmd := &cobra.Command{
										Use: "updatecomputerackunit",

										Short: "Update a 'compute.RackUnit' resource.",
										Long: `Update a 'compute.RackUnit' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ComputeApi.UpdateComputeRackUnit(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&AdminPowerState, "AdminPowerState", "", "AdminPowerState")

									cmd.Flags().StringVar(&AssetTag, "AssetTag", "", "AssetTag")

									cmd.Flags().StringVar(&MemorySpeed, "MemorySpeed", "", "MemorySpeed")

									cmd.Flags().StringVar(&MgmtIpAddress, "MgmtIpAddress", "", "MgmtIpAddress")

									cmd.Flags().StringVar(&OperPowerState, "OperPowerState", "", "OperPowerState")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&Operability, "Operability", "", "Operability")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&ServiceProfile, "ServiceProfile", "", "ServiceProfile")

									cmd.Flags().StringVar(&UserLabel, "UserLabel", "", "UserLabel")

									cmd.Flags().StringVar(&Uuid, "Uuid", "", "Uuid")

									//Skipping var BiosBootmode with unknown data type BiosBootModeRelationship
									if isMoRef(openapi.BiosBootModeRelationship{}) {
										cmd.Flags().String("BiosBootmode", "", "BiosBootmode")
									}

									//Skipping var Bmc with unknown data type ManagementControllerRelationship
									if isMoRef(openapi.ManagementControllerRelationship{}) {
										cmd.Flags().String("Bmc", "", "Bmc")
									}

									//Skipping var Board with unknown data type ComputeBoardRelationship
									if isMoRef(openapi.ComputeBoardRelationship{}) {
										cmd.Flags().String("Board", "", "Board")
									}

									//Skipping var BootDeviceBootmode with unknown data type BootDeviceBootModeRelationship
									if isMoRef(openapi.BootDeviceBootModeRelationship{}) {
										cmd.Flags().String("BootDeviceBootmode", "", "BootDeviceBootmode")
									}

									//Skipping var LocatorLed with unknown data type EquipmentLocatorLedRelationship
									if isMoRef(openapi.EquipmentLocatorLedRelationship{}) {
										cmd.Flags().String("LocatorLed", "", "LocatorLed")
									}

									//Skipping var RackEnclosureSlot with unknown data type EquipmentRackEnclosureSlotRelationship
									if isMoRef(openapi.EquipmentRackEnclosureSlotRelationship{}) {
										cmd.Flags().String("RackEnclosureSlot", "", "RackEnclosureSlot")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var TopSystem with unknown data type TopSystemRelationship
									if isMoRef(openapi.TopSystemRelationship{}) {
										cmd.Flags().String("TopSystem", "", "TopSystem")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var AdminLocatorLedState string

									var AdminPowerState string

									var ConfigState string

									var OneTimeBootDevice string

									//Skipping var PersistentMemoryOperation with unknown data type ComputePersistentMemoryOperation

									//Skipping var ServerConfig with unknown data type ComputeServerConfig

									//Skipping var LocatorLed with unknown data type EquipmentLocatorLedRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var Server with unknown data type ComputeRackUnitRelationship

									cmd := &cobra.Command{
										Use: "updatecomputeserversetting",

										Short: "Update a 'compute.ServerSetting' resource.",
										Long: `Update a 'compute.ServerSetting' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ComputeApi.UpdateComputeServerSetting(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&AdminLocatorLedState, "AdminLocatorLedState", "", "AdminLocatorLedState")

									cmd.Flags().StringVar(&AdminPowerState, "AdminPowerState", "", "AdminPowerState")

									cmd.Flags().StringVar(&ConfigState, "ConfigState", "", "ConfigState")

									cmd.Flags().StringVar(&OneTimeBootDevice, "OneTimeBootDevice", "", "OneTimeBootDevice")

									//Skipping var PersistentMemoryOperation with unknown data type ComputePersistentMemoryOperation
									if isMoRef(openapi.ComputePersistentMemoryOperation{}) {
										cmd.Flags().String("PersistentMemoryOperation", "", "PersistentMemoryOperation")
									}

									//Skipping var ServerConfig with unknown data type ComputeServerConfig
									if isMoRef(openapi.ComputeServerConfig{}) {
										cmd.Flags().String("ServerConfig", "", "ServerConfig")
									}

									//Skipping var LocatorLed with unknown data type EquipmentLocatorLedRelationship
									if isMoRef(openapi.EquipmentLocatorLedRelationship{}) {
										cmd.Flags().String("LocatorLed", "", "LocatorLed")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var Server with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("Server", "", "Server")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "deviceconnector",

								Short: "Create Deviceconnector resource(s)",
								Long: `Create Deviceconnector resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var LockoutEnabled bool

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "policy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.DeviceconnectorApi.CreateDeviceconnectorPolicy(authCtx)

											body := openapi.NewDeviceconnectorPolicy()

											//Set class id and object type by default
											body.ClassId = "deviceconnector.Policy"
											body.ObjectType = "deviceconnector.Policy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "LockoutEnabled") {
												body.LockoutEnabled = &LockoutEnabled
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.DeviceconnectorPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'deviceconnector.Policy' resource.",
										Long: `Create a 'deviceconnector.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&LockoutEnabled, "LockoutEnabled", false, "LockoutEnabled")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var LockoutEnabled bool

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "updatedeviceconnectorpolicy",

										Short: "Update a 'deviceconnector.Policy' resource.",
										Long: `Update a 'deviceconnector.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.DeviceconnectorApi.UpdateDeviceconnectorPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&LockoutEnabled, "LockoutEnabled", false, "LockoutEnabled")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "equipment",

								Short: "Create Equipment resource(s)",
								Long: `Create Equipment resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									//Skipping var ChassisId with unknown data type int64

									var ConnectionPath string

									var ConnectionStatus string

									var Description string

									//Skipping var FaultSummary with unknown data type int64

									var Name string

									var OperState string

									var PartNumber string

									var Pid string

									var PlatformType string

									var ProductName string

									var Sku string

									var Vid string

									//Skipping var Blades with unknown data type []ComputeBladeRelationship

									//Skipping var Fanmodules with unknown data type []EquipmentFanModuleRelationship

									//Skipping var Ioms with unknown data type []EquipmentIoCardRelationship

									//Skipping var Psus with unknown data type []EquipmentPsuRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var Sasexpanders with unknown data type []StorageSasExpanderRelationship

									//Skipping var Siocs with unknown data type []EquipmentSystemIoControllerRelationship

									//Skipping var StorageEnclosures with unknown data type []StorageEnclosureRelationship

									cmd := &cobra.Command{
										Use: "updateequipmentchassis",

										Short: "Update a 'equipment.Chassis' resource.",
										Long: `Update a 'equipment.Chassis' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.UpdateEquipmentChassis(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&ConnectionPath, "ConnectionPath", "", "ConnectionPath")

									cmd.Flags().StringVar(&ConnectionStatus, "ConnectionStatus", "", "ConnectionStatus")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&PartNumber, "PartNumber", "", "PartNumber")

									cmd.Flags().StringVar(&Pid, "Pid", "", "Pid")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									cmd.Flags().StringVar(&ProductName, "ProductName", "", "ProductName")

									cmd.Flags().StringVar(&Sku, "Sku", "", "Sku")

									cmd.Flags().StringVar(&Vid, "Vid", "", "Vid")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var Description string

									//Skipping var FanId with unknown data type int64

									//Skipping var FanModuleId with unknown data type int64

									//Skipping var ModuleId with unknown data type int64

									var OperState string

									var PartNumber string

									var Pid string

									var Presence string

									var Sku string

									//Skipping var TrayId with unknown data type int64

									var Vid string

									//Skipping var EquipmentFanModule with unknown data type EquipmentFanModuleRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updateequipmentfan",

										Short: "Update a 'equipment.Fan' resource.",
										Long: `Update a 'equipment.Fan' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.UpdateEquipmentFan(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&PartNumber, "PartNumber", "", "PartNumber")

									cmd.Flags().StringVar(&Pid, "Pid", "", "Pid")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&Sku, "Sku", "", "Sku")

									cmd.Flags().StringVar(&Vid, "Vid", "", "Vid")

									//Skipping var EquipmentFanModule with unknown data type EquipmentFanModuleRelationship
									if isMoRef(openapi.EquipmentFanModuleRelationship{}) {
										cmd.Flags().String("EquipmentFanModule", "", "EquipmentFanModule")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var Description string

									//Skipping var ModuleId with unknown data type int64

									var OperState string

									var PartNumber string

									var Pid string

									var Presence string

									var Sku string

									//Skipping var TrayId with unknown data type int64

									var Vid string

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship

									//Skipping var EquipmentRackEnclosure with unknown data type EquipmentRackEnclosureRelationship

									//Skipping var Fans with unknown data type []EquipmentFanRelationship

									//Skipping var NetworkElement with unknown data type NetworkElementRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updateequipmentfanmodule",

										Short: "Update a 'equipment.FanModule' resource.",
										Long: `Update a 'equipment.FanModule' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.UpdateEquipmentFanModule(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&PartNumber, "PartNumber", "", "PartNumber")

									cmd.Flags().StringVar(&Pid, "Pid", "", "Pid")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&Sku, "Sku", "", "Sku")

									cmd.Flags().StringVar(&Vid, "Vid", "", "Vid")

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("ComputeRackUnit", "", "ComputeRackUnit")
									}

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship
									if isMoRef(openapi.EquipmentChassisRelationship{}) {
										cmd.Flags().String("EquipmentChassis", "", "EquipmentChassis")
									}

									//Skipping var EquipmentRackEnclosure with unknown data type EquipmentRackEnclosureRelationship
									if isMoRef(openapi.EquipmentRackEnclosureRelationship{}) {
										cmd.Flags().String("EquipmentRackEnclosure", "", "EquipmentRackEnclosure")
									}

									//Skipping var NetworkElement with unknown data type NetworkElementRelationship
									if isMoRef(openapi.NetworkElementRelationship{}) {
										cmd.Flags().String("NetworkElement", "", "NetworkElement")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var OperState string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updateequipmentfex",

										Short: "Update a 'equipment.Fex' resource.",
										Long: `Update a 'equipment.Fex' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.UpdateEquipmentFex(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var OperState string

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updateequipmentiocard",

										Short: "Update a 'equipment.IoCard' resource.",
										Long: `Update a 'equipment.IoCard' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.UpdateEquipmentIoCard(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship
									if isMoRef(openapi.EquipmentChassisRelationship{}) {
										cmd.Flags().String("EquipmentChassis", "", "EquipmentChassis")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var OperState string

									var Presence string

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updateequipmentioexpander",

										Short: "Update a 'equipment.IoExpander' resource.",
										Long: `Update a 'equipment.IoExpander' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.UpdateEquipmentIoExpander(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship
									if isMoRef(openapi.ComputeBladeRelationship{}) {
										cmd.Flags().String("ComputeBlade", "", "ComputeBlade")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Color string

									var OperState string

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StoragePhysicalDisk with unknown data type StoragePhysicalDiskRelationship

									cmd := &cobra.Command{
										Use: "updateequipmentlocatorled",

										Short: "Update a 'equipment.LocatorLed' resource.",
										Long: `Update a 'equipment.LocatorLed' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.UpdateEquipmentLocatorLed(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Color, "Color", "", "Color")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship
									if isMoRef(openapi.ComputeBladeRelationship{}) {
										cmd.Flags().String("ComputeBlade", "", "ComputeBlade")
									}

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("ComputeRackUnit", "", "ComputeRackUnit")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StoragePhysicalDisk with unknown data type StoragePhysicalDiskRelationship
									if isMoRef(openapi.StoragePhysicalDiskRelationship{}) {
										cmd.Flags().String("StoragePhysicalDisk", "", "StoragePhysicalDisk")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var Description string

									var OperState string

									var PartNumber string

									var Pid string

									var Presence string

									var PsuFwVersion string

									//Skipping var PsuId with unknown data type int64

									var PsuInputSrc string

									var PsuType string

									var PsuWattage string

									var Sku string

									var Vid string

									var Voltage string

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship

									//Skipping var EquipmentRackEnclosure with unknown data type EquipmentRackEnclosureRelationship

									//Skipping var NetworkElement with unknown data type NetworkElementRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updateequipmentpsu",

										Short: "Update a 'equipment.Psu' resource.",
										Long: `Update a 'equipment.Psu' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.UpdateEquipmentPsu(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&PartNumber, "PartNumber", "", "PartNumber")

									cmd.Flags().StringVar(&Pid, "Pid", "", "Pid")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&PsuFwVersion, "PsuFwVersion", "", "PsuFwVersion")

									cmd.Flags().StringVar(&PsuInputSrc, "PsuInputSrc", "", "PsuInputSrc")

									cmd.Flags().StringVar(&PsuType, "PsuType", "", "PsuType")

									cmd.Flags().StringVar(&PsuWattage, "PsuWattage", "", "PsuWattage")

									cmd.Flags().StringVar(&Sku, "Sku", "", "Sku")

									cmd.Flags().StringVar(&Vid, "Vid", "", "Vid")

									cmd.Flags().StringVar(&Voltage, "Voltage", "", "Voltage")

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("ComputeRackUnit", "", "ComputeRackUnit")
									}

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship
									if isMoRef(openapi.EquipmentChassisRelationship{}) {
										cmd.Flags().String("EquipmentChassis", "", "EquipmentChassis")
									}

									//Skipping var EquipmentRackEnclosure with unknown data type EquipmentRackEnclosureRelationship
									if isMoRef(openapi.EquipmentRackEnclosureRelationship{}) {
										cmd.Flags().String("EquipmentRackEnclosure", "", "EquipmentRackEnclosure")
									}

									//Skipping var NetworkElement with unknown data type NetworkElementRelationship
									if isMoRef(openapi.NetworkElementRelationship{}) {
										cmd.Flags().String("NetworkElement", "", "NetworkElement")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									//Skipping var EnclosureId with unknown data type int64

									//Skipping var Fanmodules with unknown data type []EquipmentFanModuleRelationship

									//Skipping var Psus with unknown data type []EquipmentPsuRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var Slots with unknown data type []EquipmentRackEnclosureSlotRelationship

									cmd := &cobra.Command{
										Use: "updateequipmentrackenclosure",

										Short: "Update a 'equipment.RackEnclosure' resource.",
										Long: `Update a 'equipment.RackEnclosure' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.UpdateEquipmentRackEnclosure(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									//Skipping var RackId with unknown data type int64

									var RackUnitDn string

									//Skipping var EquipmentRackEnclosure with unknown data type EquipmentRackEnclosureRelationship

									//Skipping var RackUnit with unknown data type ComputeRackUnitRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updateequipmentrackenclosureslot",

										Short: "Update a 'equipment.RackEnclosureSlot' resource.",
										Long: `Update a 'equipment.RackEnclosureSlot' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.UpdateEquipmentRackEnclosureSlot(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&RackUnitDn, "RackUnitDn", "", "RackUnitDn")

									//Skipping var EquipmentRackEnclosure with unknown data type EquipmentRackEnclosureRelationship
									if isMoRef(openapi.EquipmentRackEnclosureRelationship{}) {
										cmd.Flags().String("EquipmentRackEnclosure", "", "EquipmentRackEnclosure")
									}

									//Skipping var RackUnit with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("RackUnit", "", "RackUnit")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var ConfigState string

									var Discovery string

									var MacOfSharedIomAside string

									var MacOfSharedIomBside string

									var OperState string

									var PartNumber string

									var Reachability string

									var UsrLbl string

									var Vid string

									//Skipping var EquipmentSystemIoController with unknown data type EquipmentSystemIoControllerRelationship

									//Skipping var PortGroups with unknown data type []PortGroupRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updateequipmentsharediomodule",

										Short: "Update a 'equipment.SharedIoModule' resource.",
										Long: `Update a 'equipment.SharedIoModule' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.UpdateEquipmentSharedIoModule(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&ConfigState, "ConfigState", "", "ConfigState")

									cmd.Flags().StringVar(&Discovery, "Discovery", "", "Discovery")

									cmd.Flags().StringVar(&MacOfSharedIomAside, "MacOfSharedIomAside", "", "MacOfSharedIomAside")

									cmd.Flags().StringVar(&MacOfSharedIomBside, "MacOfSharedIomBside", "", "MacOfSharedIomBside")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&PartNumber, "PartNumber", "", "PartNumber")

									cmd.Flags().StringVar(&Reachability, "Reachability", "", "Reachability")

									cmd.Flags().StringVar(&UsrLbl, "UsrLbl", "", "UsrLbl")

									cmd.Flags().StringVar(&Vid, "Vid", "", "Vid")

									//Skipping var EquipmentSystemIoController with unknown data type EquipmentSystemIoControllerRelationship
									if isMoRef(openapi.EquipmentSystemIoControllerRelationship{}) {
										cmd.Flags().String("EquipmentSystemIoController", "", "EquipmentSystemIoController")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var Description string

									//Skipping var NumPorts with unknown data type int64

									var Presence string

									//Skipping var SlotId with unknown data type int64

									var State string

									//Skipping var NetworkElement with unknown data type NetworkElementRelationship

									//Skipping var PortGroups with unknown data type []PortGroupRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updateequipmentswitchcard",

										Short: "Update a 'equipment.SwitchCard' resource.",
										Long: `Update a 'equipment.SwitchCard' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.UpdateEquipmentSwitchCard(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&State, "State", "", "State")

									//Skipping var NetworkElement with unknown data type NetworkElementRelationship
									if isMoRef(openapi.NetworkElementRelationship{}) {
										cmd.Flags().String("NetworkElement", "", "NetworkElement")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var ChassisId string

									var ConnectionPath string

									var ConnectionStatus string

									var Description string

									var ManagingInstance string

									var OperState string

									var PartNumber string

									var Pid string

									//Skipping var SystemIoControllerId with unknown data type int64

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var SharedIoModule with unknown data type EquipmentSharedIoModuleRelationship

									cmd := &cobra.Command{
										Use: "updateequipmentsystemiocontroller",

										Short: "Update a 'equipment.SystemIoController' resource.",
										Long: `Update a 'equipment.SystemIoController' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.UpdateEquipmentSystemIoController(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&ChassisId, "ChassisId", "", "ChassisId")

									cmd.Flags().StringVar(&ConnectionPath, "ConnectionPath", "", "ConnectionPath")

									cmd.Flags().StringVar(&ConnectionStatus, "ConnectionStatus", "", "ConnectionStatus")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&ManagingInstance, "ManagingInstance", "", "ManagingInstance")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&PartNumber, "PartNumber", "", "PartNumber")

									cmd.Flags().StringVar(&Pid, "Pid", "", "Pid")

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship
									if isMoRef(openapi.EquipmentChassisRelationship{}) {
										cmd.Flags().String("EquipmentChassis", "", "EquipmentChassis")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var SharedIoModule with unknown data type EquipmentSharedIoModuleRelationship
									if isMoRef(openapi.EquipmentSharedIoModuleRelationship{}) {
										cmd.Flags().String("SharedIoModule", "", "SharedIoModule")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var ActivationStatus string

									var AdminState string

									var Ownership string

									var Presence string

									//Skipping var TpmId with unknown data type int64

									var Version string

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updateequipmenttpm",

										Short: "Update a 'equipment.Tpm' resource.",
										Long: `Update a 'equipment.Tpm' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.UpdateEquipmentTpm(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&ActivationStatus, "ActivationStatus", "", "ActivationStatus")

									cmd.Flags().StringVar(&AdminState, "AdminState", "", "AdminState")

									cmd.Flags().StringVar(&Ownership, "Ownership", "", "Ownership")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship
									if isMoRef(openapi.ComputeBoardRelationship{}) {
										cmd.Flags().String("ComputeBoard", "", "ComputeBoard")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "ether",

								Short: "Create Ether resource(s)",
								Long: `Create Ether resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var OperState string

									var Role string

									var MacAddress string

									var PeerDn string

									var TransceiverType string

									//Skipping var PortGroup with unknown data type PortGroupRelationship

									//Skipping var PortSubGroup with unknown data type PortSubGroupRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updateetherphysicalport",

										Short: "Update a 'ether.PhysicalPort' resource.",
										Long: `Update a 'ether.PhysicalPort' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EtherApi.UpdateEtherPhysicalPort(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&Role, "Role", "", "Role")

									cmd.Flags().StringVar(&MacAddress, "MacAddress", "", "MacAddress")

									cmd.Flags().StringVar(&PeerDn, "PeerDn", "", "PeerDn")

									cmd.Flags().StringVar(&TransceiverType, "TransceiverType", "", "TransceiverType")

									//Skipping var PortGroup with unknown data type PortGroupRelationship
									if isMoRef(openapi.PortGroupRelationship{}) {
										cmd.Flags().String("PortGroup", "", "PortGroup")
									}

									//Skipping var PortSubGroup with unknown data type PortSubGroupRelationship
									if isMoRef(openapi.PortSubGroupRelationship{}) {
										cmd.Flags().String("PortSubGroup", "", "PortSubGroup")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "externalsite",

								Short: "Create Externalsite resource(s)",
								Long: `Create Externalsite resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var IsPasswordSet bool

									var IsUserIdSet bool

									var Password string

									var RepositoryType string

									var UserId string

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "authorization",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ExternalsiteApi.CreateExternalsiteAuthorization(authCtx)

											body := openapi.NewExternalsiteAuthorization()

											//Set class id and object type by default
											body.ClassId = "externalsite.Authorization"
											body.ObjectType = "externalsite.Authorization"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "IsPasswordSet") {
												body.IsPasswordSet = &IsPasswordSet
											}

											if isFlagPassed(cmd.Flags(), "IsUserIdSet") {
												body.IsUserIdSet = &IsUserIdSet
											}

											if isFlagPassed(cmd.Flags(), "Password") {
												body.Password = &Password
											}

											if isFlagPassed(cmd.Flags(), "RepositoryType") {
												body.RepositoryType = &RepositoryType
											}

											if isFlagPassed(cmd.Flags(), "UserId") {
												body.UserId = &UserId
											}

											if isFlagPassed(cmd.Flags(), "Account") && isMoRef(openapi.IamAccountRelationship{}) {
												if f, err := cmd.Flags().GetString("Account"); err == nil {
													paramVal := openapi.IamAccountRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Account = &paramVal
														//                                if v, ok := v.(openapi.IamAccountRelationship); ok {
														//                                    body.Account = &v
														//                                }
													}
												}
											}

											req = req.ExternalsiteAuthorization(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'externalsite.Authorization' resource.",
										Long: `Create a 'externalsite.Authorization' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().BoolVar(&IsUserIdSet, "IsUserIdSet", false, "IsUserIdSet")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									cmd.Flags().StringVar(&RepositoryType, "RepositoryType", "", "RepositoryType")

									cmd.Flags().StringVar(&UserId, "UserId", "", "UserId")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var IsPasswordSet bool

									var IsUserIdSet bool

									var Password string

									var RepositoryType string

									var UserId string

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "updateexternalsiteauthorization",

										Short: "Update a 'externalsite.Authorization' resource.",
										Long: `Update a 'externalsite.Authorization' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ExternalsiteApi.UpdateExternalsiteAuthorization(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().BoolVar(&IsUserIdSet, "IsUserIdSet", false, "IsUserIdSet")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									cmd.Flags().StringVar(&RepositoryType, "RepositoryType", "", "RepositoryType")

									cmd.Flags().StringVar(&UserId, "UserId", "", "UserId")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "fault",

								Short: "Create Fault resource(s)",
								Long: `Create Fault resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Acknowledged string

									var AffectedDn string

									var AffectedMoId string

									var AffectedMoType string

									var AncestorMoId string

									var AncestorMoType string

									var Code string

									var CreationTime string

									var Description string

									var LastTransitionTime string

									//Skipping var NumOccurrences with unknown data type int64

									var OriginalSeverity string

									var PreviousSeverity string

									var Rule string

									var Severity string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatefaultinstance",

										Short: "Update a 'fault.Instance' resource.",
										Long: `Update a 'fault.Instance' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.FaultApi.UpdateFaultInstance(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Acknowledged, "Acknowledged", "", "Acknowledged")

									cmd.Flags().StringVar(&AffectedDn, "AffectedDn", "", "AffectedDn")

									cmd.Flags().StringVar(&AffectedMoId, "AffectedMoId", "", "AffectedMoId")

									cmd.Flags().StringVar(&AffectedMoType, "AffectedMoType", "", "AffectedMoType")

									cmd.Flags().StringVar(&AncestorMoId, "AncestorMoId", "", "AncestorMoId")

									cmd.Flags().StringVar(&AncestorMoType, "AncestorMoType", "", "AncestorMoType")

									cmd.Flags().StringVar(&Code, "Code", "", "Code")

									cmd.Flags().StringVar(&CreationTime, "CreationTime", "", "CreationTime")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&LastTransitionTime, "LastTransitionTime", "", "LastTransitionTime")

									cmd.Flags().StringVar(&OriginalSeverity, "OriginalSeverity", "", "OriginalSeverity")

									cmd.Flags().StringVar(&PreviousSeverity, "PreviousSeverity", "", "PreviousSeverity")

									cmd.Flags().StringVar(&Rule, "Rule", "", "Rule")

									cmd.Flags().StringVar(&Severity, "Severity", "", "Severity")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "fc",

								Short: "Create Fc resource(s)",
								Long: `Create Fc resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var OperState string

									var Role string

									var PeerDn string

									var TransceiverType string

									var Wwn string

									//Skipping var PortGroup with unknown data type PortGroupRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatefcphysicalport",

										Short: "Update a 'fc.PhysicalPort' resource.",
										Long: `Update a 'fc.PhysicalPort' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.FcApi.UpdateFcPhysicalPort(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&Role, "Role", "", "Role")

									cmd.Flags().StringVar(&PeerDn, "PeerDn", "", "PeerDn")

									cmd.Flags().StringVar(&TransceiverType, "TransceiverType", "", "TransceiverType")

									cmd.Flags().StringVar(&Wwn, "Wwn", "", "Wwn")

									//Skipping var PortGroup with unknown data type PortGroupRelationship
									if isMoRef(openapi.PortGroupRelationship{}) {
										cmd.Flags().String("PortGroup", "", "PortGroup")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "feedback",

								Short: "Create Feedback resource(s)",
								Long: `Create Feedback resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var FeedbackData with unknown data type FeedbackFeedbackData

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "feedbackpost",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.FeedbackApi.CreateFeedbackFeedbackPost(authCtx)

											body := openapi.NewFeedbackFeedbackPost()

											//Set class id and object type by default
											body.ClassId = "feedback.FeedbackPost"
											body.ObjectType = "feedback.FeedbackPost"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "FeedbackData") && isMoRef(openapi.FeedbackFeedbackData{}) {
												if f, err := cmd.Flags().GetString("FeedbackData"); err == nil {
													paramVal := openapi.FeedbackFeedbackData{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.FeedbackData = &paramVal
														//                                if v, ok := v.(openapi.FeedbackFeedbackData); ok {
														//                                    body.FeedbackData = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Account") && isMoRef(openapi.IamAccountRelationship{}) {
												if f, err := cmd.Flags().GetString("Account"); err == nil {
													paramVal := openapi.IamAccountRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Account = &paramVal
														//                                if v, ok := v.(openapi.IamAccountRelationship); ok {
														//                                    body.Account = &v
														//                                }
													}
												}
											}

											req = req.FeedbackFeedbackPost(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'feedback.FeedbackPost' resource.",
										Long: `Create a 'feedback.FeedbackPost' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var FeedbackData with unknown data type FeedbackFeedbackData
									if isMoRef(openapi.FeedbackFeedbackData{}) {
										cmd.Flags().String("FeedbackData", "", "FeedbackData")
									}

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "firmware",

								Short: "Create Firmware resource(s)",
								Long: `Create Firmware resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									//Skipping var DownloadCount with unknown data type int64

									var ImportAction string

									var ImportState string

									//Skipping var ImportedTime with unknown data type time.Time

									//Skipping var LastAccessTime with unknown data type time.Time

									var Md5sum string

									var Name string

									//Skipping var ReleaseDate with unknown data type time.Time

									var Sha512sum string

									//Skipping var Size with unknown data type int64

									var SoftwareAdvisoryUrl string

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer

									var Version string

									var BundleType string

									var Guid string

									var Mdfid string

									var Model string

									var PlatformType string

									var RecommendedBuild string

									var ReleaseNotesUrl string

									var SoftwareTypeId string

									var SupportedModels []string

									var Vendor string

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship

									cmd := &cobra.Command{
										Use: "distributable",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.FirmwareApi.CreateFirmwareDistributable(authCtx)

											body := openapi.NewFirmwareDistributable()

											//Set class id and object type by default
											body.ClassId = "firmware.Distributable"
											body.ObjectType = "firmware.Distributable"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "ImportAction") {
												body.ImportAction = &ImportAction
											}

											if isFlagPassed(cmd.Flags(), "ImportState") {
												body.ImportState = &ImportState
											}

											if isFlagPassed(cmd.Flags(), "Md5sum") {
												body.Md5sum = &Md5sum
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Sha512sum") {
												body.Sha512sum = &Sha512sum
											}

											if isFlagPassed(cmd.Flags(), "SoftwareAdvisoryUrl") {
												body.SoftwareAdvisoryUrl = &SoftwareAdvisoryUrl
											}

											if isFlagPassed(cmd.Flags(), "Source") && isMoRef(openapi.SoftwarerepositoryFileServer{}) {
												if f, err := cmd.Flags().GetString("Source"); err == nil {
													paramVal := openapi.SoftwarerepositoryFileServer{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Source = &paramVal
														//                                if v, ok := v.(openapi.SoftwarerepositoryFileServer); ok {
														//                                    body.Source = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Version") {
												body.Version = &Version
											}

											if isFlagPassed(cmd.Flags(), "BundleType") {
												body.BundleType = &BundleType
											}

											if isFlagPassed(cmd.Flags(), "Guid") {
												body.Guid = &Guid
											}

											if isFlagPassed(cmd.Flags(), "Mdfid") {
												body.Mdfid = &Mdfid
											}

											if isFlagPassed(cmd.Flags(), "Model") {
												body.Model = &Model
											}

											if isFlagPassed(cmd.Flags(), "PlatformType") {
												body.PlatformType = &PlatformType
											}

											if isFlagPassed(cmd.Flags(), "RecommendedBuild") {
												body.RecommendedBuild = &RecommendedBuild
											}

											if isFlagPassed(cmd.Flags(), "ReleaseNotesUrl") {
												body.ReleaseNotesUrl = &ReleaseNotesUrl
											}

											if isFlagPassed(cmd.Flags(), "SoftwareTypeId") {
												body.SoftwareTypeId = &SoftwareTypeId
											}

											if isFlagPassed(cmd.Flags(), "SupportedModels") {
												body.SupportedModels = &SupportedModels
											}

											if isFlagPassed(cmd.Flags(), "Vendor") {
												body.Vendor = &Vendor
											}

											if isFlagPassed(cmd.Flags(), "Catalog") && isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
												if f, err := cmd.Flags().GetString("Catalog"); err == nil {
													paramVal := openapi.SoftwarerepositoryCatalogRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Catalog = &paramVal
														//                                if v, ok := v.(openapi.SoftwarerepositoryCatalogRelationship); ok {
														//                                    body.Catalog = &v
														//                                }
													}
												}
											}

											req = req.FirmwareDistributable(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'firmware.Distributable' resource.",
										Long: `Create a 'firmware.Distributable' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&ImportAction, "ImportAction", "", "ImportAction")

									cmd.Flags().StringVar(&ImportState, "ImportState", "", "ImportState")

									cmd.Flags().StringVar(&Md5sum, "Md5sum", "", "Md5sum")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Sha512sum, "Sha512sum", "", "Sha512sum")

									cmd.Flags().StringVar(&SoftwareAdvisoryUrl, "SoftwareAdvisoryUrl", "", "SoftwareAdvisoryUrl")

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer
									if isMoRef(openapi.SoftwarerepositoryFileServer{}) {
										cmd.Flags().String("Source", "", "Source")
									}

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									cmd.Flags().StringVar(&BundleType, "BundleType", "", "BundleType")

									cmd.Flags().StringVar(&Guid, "Guid", "", "Guid")

									cmd.Flags().StringVar(&Mdfid, "Mdfid", "", "Mdfid")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									cmd.Flags().StringVar(&RecommendedBuild, "RecommendedBuild", "", "RecommendedBuild")

									cmd.Flags().StringVar(&ReleaseNotesUrl, "ReleaseNotesUrl", "", "ReleaseNotesUrl")

									cmd.Flags().StringVar(&SoftwareTypeId, "SoftwareTypeId", "", "SoftwareTypeId")

									cmd.Flags().StringSliceVar(&SupportedModels, "SupportedModels", []string{}, "SupportedModels")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship
									if isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									//Skipping var DownloadCount with unknown data type int64

									var ImportAction string

									var ImportState string

									//Skipping var ImportedTime with unknown data type time.Time

									//Skipping var LastAccessTime with unknown data type time.Time

									var Md5sum string

									var Name string

									//Skipping var ReleaseDate with unknown data type time.Time

									var Sha512sum string

									//Skipping var Size with unknown data type int64

									var SoftwareAdvisoryUrl string

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer

									var Version string

									var BundleType string

									var Guid string

									var Mdfid string

									var Model string

									var PlatformType string

									var RecommendedBuild string

									var ReleaseNotesUrl string

									var SoftwareTypeId string

									var SupportedModels []string

									var Vendor string

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship

									cmd := &cobra.Command{
										Use: "driverdistributable",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.FirmwareApi.CreateFirmwareDriverDistributable(authCtx)

											body := openapi.NewFirmwareDriverDistributable()

											//Set class id and object type by default
											body.ClassId = "firmware.DriverDistributable"
											body.ObjectType = "firmware.DriverDistributable"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "ImportAction") {
												body.ImportAction = &ImportAction
											}

											if isFlagPassed(cmd.Flags(), "ImportState") {
												body.ImportState = &ImportState
											}

											if isFlagPassed(cmd.Flags(), "Md5sum") {
												body.Md5sum = &Md5sum
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Sha512sum") {
												body.Sha512sum = &Sha512sum
											}

											if isFlagPassed(cmd.Flags(), "SoftwareAdvisoryUrl") {
												body.SoftwareAdvisoryUrl = &SoftwareAdvisoryUrl
											}

											if isFlagPassed(cmd.Flags(), "Source") && isMoRef(openapi.SoftwarerepositoryFileServer{}) {
												if f, err := cmd.Flags().GetString("Source"); err == nil {
													paramVal := openapi.SoftwarerepositoryFileServer{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Source = &paramVal
														//                                if v, ok := v.(openapi.SoftwarerepositoryFileServer); ok {
														//                                    body.Source = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Version") {
												body.Version = &Version
											}

											if isFlagPassed(cmd.Flags(), "BundleType") {
												body.BundleType = &BundleType
											}

											if isFlagPassed(cmd.Flags(), "Guid") {
												body.Guid = &Guid
											}

											if isFlagPassed(cmd.Flags(), "Mdfid") {
												body.Mdfid = &Mdfid
											}

											if isFlagPassed(cmd.Flags(), "Model") {
												body.Model = &Model
											}

											if isFlagPassed(cmd.Flags(), "PlatformType") {
												body.PlatformType = &PlatformType
											}

											if isFlagPassed(cmd.Flags(), "RecommendedBuild") {
												body.RecommendedBuild = &RecommendedBuild
											}

											if isFlagPassed(cmd.Flags(), "ReleaseNotesUrl") {
												body.ReleaseNotesUrl = &ReleaseNotesUrl
											}

											if isFlagPassed(cmd.Flags(), "SoftwareTypeId") {
												body.SoftwareTypeId = &SoftwareTypeId
											}

											if isFlagPassed(cmd.Flags(), "SupportedModels") {
												body.SupportedModels = &SupportedModels
											}

											if isFlagPassed(cmd.Flags(), "Vendor") {
												body.Vendor = &Vendor
											}

											if isFlagPassed(cmd.Flags(), "Catalog") && isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
												if f, err := cmd.Flags().GetString("Catalog"); err == nil {
													paramVal := openapi.SoftwarerepositoryCatalogRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Catalog = &paramVal
														//                                if v, ok := v.(openapi.SoftwarerepositoryCatalogRelationship); ok {
														//                                    body.Catalog = &v
														//                                }
													}
												}
											}

											req = req.FirmwareDriverDistributable(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'firmware.DriverDistributable' resource.",
										Long: `Create a 'firmware.DriverDistributable' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&ImportAction, "ImportAction", "", "ImportAction")

									cmd.Flags().StringVar(&ImportState, "ImportState", "", "ImportState")

									cmd.Flags().StringVar(&Md5sum, "Md5sum", "", "Md5sum")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Sha512sum, "Sha512sum", "", "Sha512sum")

									cmd.Flags().StringVar(&SoftwareAdvisoryUrl, "SoftwareAdvisoryUrl", "", "SoftwareAdvisoryUrl")

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer
									if isMoRef(openapi.SoftwarerepositoryFileServer{}) {
										cmd.Flags().String("Source", "", "Source")
									}

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									cmd.Flags().StringVar(&BundleType, "BundleType", "", "BundleType")

									cmd.Flags().StringVar(&Guid, "Guid", "", "Guid")

									cmd.Flags().StringVar(&Mdfid, "Mdfid", "", "Mdfid")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									cmd.Flags().StringVar(&RecommendedBuild, "RecommendedBuild", "", "RecommendedBuild")

									cmd.Flags().StringVar(&ReleaseNotesUrl, "ReleaseNotesUrl", "", "ReleaseNotesUrl")

									cmd.Flags().StringVar(&SoftwareTypeId, "SoftwareTypeId", "", "SoftwareTypeId")

									cmd.Flags().StringSliceVar(&SupportedModels, "SupportedModels", []string{}, "SupportedModels")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship
									if isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Accepted bool

									var Content string

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "eula",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.FirmwareApi.CreateFirmwareEula(authCtx)

											body := openapi.NewFirmwareEula()

											//Set class id and object type by default
											body.ClassId = "firmware.Eula"
											body.ObjectType = "firmware.Eula"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Accepted") {
												body.Accepted = &Accepted
											}

											if isFlagPassed(cmd.Flags(), "Content") {
												body.Content = &Content
											}

											if isFlagPassed(cmd.Flags(), "Account") && isMoRef(openapi.IamAccountRelationship{}) {
												if f, err := cmd.Flags().GetString("Account"); err == nil {
													paramVal := openapi.IamAccountRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Account = &paramVal
														//                                if v, ok := v.(openapi.IamAccountRelationship); ok {
														//                                    body.Account = &v
														//                                }
													}
												}
											}

											req = req.FirmwareEula(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'firmware.Eula' resource.",
										Long: `Create a 'firmware.Eula' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&Accepted, "Accepted", false, "Accepted")

									cmd.Flags().StringVar(&Content, "Content", "", "Content")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									//Skipping var DownloadCount with unknown data type int64

									var ImportAction string

									var ImportState string

									//Skipping var ImportedTime with unknown data type time.Time

									//Skipping var LastAccessTime with unknown data type time.Time

									var Md5sum string

									var Name string

									//Skipping var ReleaseDate with unknown data type time.Time

									var Sha512sum string

									//Skipping var Size with unknown data type int64

									var SoftwareAdvisoryUrl string

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer

									var Version string

									var BundleType string

									var Guid string

									var Mdfid string

									var Model string

									var PlatformType string

									var RecommendedBuild string

									var ReleaseNotesUrl string

									var SoftwareTypeId string

									var SupportedModels []string

									var Vendor string

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship

									cmd := &cobra.Command{
										Use: "serverconfigurationutilitydistributable",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.FirmwareApi.CreateFirmwareServerConfigurationUtilityDistributable(authCtx)

											body := openapi.NewFirmwareServerConfigurationUtilityDistributable()

											//Set class id and object type by default
											body.ClassId = "firmware.ServerConfigurationUtilityDistributable"
											body.ObjectType = "firmware.ServerConfigurationUtilityDistributable"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "ImportAction") {
												body.ImportAction = &ImportAction
											}

											if isFlagPassed(cmd.Flags(), "ImportState") {
												body.ImportState = &ImportState
											}

											if isFlagPassed(cmd.Flags(), "Md5sum") {
												body.Md5sum = &Md5sum
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Sha512sum") {
												body.Sha512sum = &Sha512sum
											}

											if isFlagPassed(cmd.Flags(), "SoftwareAdvisoryUrl") {
												body.SoftwareAdvisoryUrl = &SoftwareAdvisoryUrl
											}

											if isFlagPassed(cmd.Flags(), "Source") && isMoRef(openapi.SoftwarerepositoryFileServer{}) {
												if f, err := cmd.Flags().GetString("Source"); err == nil {
													paramVal := openapi.SoftwarerepositoryFileServer{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Source = &paramVal
														//                                if v, ok := v.(openapi.SoftwarerepositoryFileServer); ok {
														//                                    body.Source = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Version") {
												body.Version = &Version
											}

											if isFlagPassed(cmd.Flags(), "BundleType") {
												body.BundleType = &BundleType
											}

											if isFlagPassed(cmd.Flags(), "Guid") {
												body.Guid = &Guid
											}

											if isFlagPassed(cmd.Flags(), "Mdfid") {
												body.Mdfid = &Mdfid
											}

											if isFlagPassed(cmd.Flags(), "Model") {
												body.Model = &Model
											}

											if isFlagPassed(cmd.Flags(), "PlatformType") {
												body.PlatformType = &PlatformType
											}

											if isFlagPassed(cmd.Flags(), "RecommendedBuild") {
												body.RecommendedBuild = &RecommendedBuild
											}

											if isFlagPassed(cmd.Flags(), "ReleaseNotesUrl") {
												body.ReleaseNotesUrl = &ReleaseNotesUrl
											}

											if isFlagPassed(cmd.Flags(), "SoftwareTypeId") {
												body.SoftwareTypeId = &SoftwareTypeId
											}

											if isFlagPassed(cmd.Flags(), "SupportedModels") {
												body.SupportedModels = &SupportedModels
											}

											if isFlagPassed(cmd.Flags(), "Vendor") {
												body.Vendor = &Vendor
											}

											if isFlagPassed(cmd.Flags(), "Catalog") && isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
												if f, err := cmd.Flags().GetString("Catalog"); err == nil {
													paramVal := openapi.SoftwarerepositoryCatalogRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Catalog = &paramVal
														//                                if v, ok := v.(openapi.SoftwarerepositoryCatalogRelationship); ok {
														//                                    body.Catalog = &v
														//                                }
													}
												}
											}

											req = req.FirmwareServerConfigurationUtilityDistributable(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'firmware.ServerConfigurationUtilityDistributable' resource.",
										Long: `Create a 'firmware.ServerConfigurationUtilityDistributable' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&ImportAction, "ImportAction", "", "ImportAction")

									cmd.Flags().StringVar(&ImportState, "ImportState", "", "ImportState")

									cmd.Flags().StringVar(&Md5sum, "Md5sum", "", "Md5sum")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Sha512sum, "Sha512sum", "", "Sha512sum")

									cmd.Flags().StringVar(&SoftwareAdvisoryUrl, "SoftwareAdvisoryUrl", "", "SoftwareAdvisoryUrl")

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer
									if isMoRef(openapi.SoftwarerepositoryFileServer{}) {
										cmd.Flags().String("Source", "", "Source")
									}

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									cmd.Flags().StringVar(&BundleType, "BundleType", "", "BundleType")

									cmd.Flags().StringVar(&Guid, "Guid", "", "Guid")

									cmd.Flags().StringVar(&Mdfid, "Mdfid", "", "Mdfid")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									cmd.Flags().StringVar(&RecommendedBuild, "RecommendedBuild", "", "RecommendedBuild")

									cmd.Flags().StringVar(&ReleaseNotesUrl, "ReleaseNotesUrl", "", "ReleaseNotesUrl")

									cmd.Flags().StringVar(&SoftwareTypeId, "SoftwareTypeId", "", "SoftwareTypeId")

									cmd.Flags().StringSliceVar(&SupportedModels, "SupportedModels", []string{}, "SupportedModels")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship
									if isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									//Skipping var DownloadCount with unknown data type int64

									var ImportAction string

									var ImportState string

									//Skipping var ImportedTime with unknown data type time.Time

									//Skipping var LastAccessTime with unknown data type time.Time

									var Md5sum string

									var Name string

									//Skipping var ReleaseDate with unknown data type time.Time

									var Sha512sum string

									//Skipping var Size with unknown data type int64

									var SoftwareAdvisoryUrl string

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer

									var Version string

									var BundleType string

									var Guid string

									var Mdfid string

									var Model string

									var PlatformType string

									var RecommendedBuild string

									var ReleaseNotesUrl string

									var SoftwareTypeId string

									var SupportedModels []string

									var Vendor string

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship

									cmd := &cobra.Command{
										Use: "updatefirmwaredistributable",

										Short: "Update a 'firmware.Distributable' resource.",
										Long: `Update a 'firmware.Distributable' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.FirmwareApi.UpdateFirmwareDistributable(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&ImportAction, "ImportAction", "", "ImportAction")

									cmd.Flags().StringVar(&ImportState, "ImportState", "", "ImportState")

									cmd.Flags().StringVar(&Md5sum, "Md5sum", "", "Md5sum")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Sha512sum, "Sha512sum", "", "Sha512sum")

									cmd.Flags().StringVar(&SoftwareAdvisoryUrl, "SoftwareAdvisoryUrl", "", "SoftwareAdvisoryUrl")

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer
									if isMoRef(openapi.SoftwarerepositoryFileServer{}) {
										cmd.Flags().String("Source", "", "Source")
									}

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									cmd.Flags().StringVar(&BundleType, "BundleType", "", "BundleType")

									cmd.Flags().StringVar(&Guid, "Guid", "", "Guid")

									cmd.Flags().StringVar(&Mdfid, "Mdfid", "", "Mdfid")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									cmd.Flags().StringVar(&RecommendedBuild, "RecommendedBuild", "", "RecommendedBuild")

									cmd.Flags().StringVar(&ReleaseNotesUrl, "ReleaseNotesUrl", "", "ReleaseNotesUrl")

									cmd.Flags().StringVar(&SoftwareTypeId, "SoftwareTypeId", "", "SoftwareTypeId")

									cmd.Flags().StringSliceVar(&SupportedModels, "SupportedModels", []string{}, "SupportedModels")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship
									if isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									//Skipping var DownloadCount with unknown data type int64

									var ImportAction string

									var ImportState string

									//Skipping var ImportedTime with unknown data type time.Time

									//Skipping var LastAccessTime with unknown data type time.Time

									var Md5sum string

									var Name string

									//Skipping var ReleaseDate with unknown data type time.Time

									var Sha512sum string

									//Skipping var Size with unknown data type int64

									var SoftwareAdvisoryUrl string

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer

									var Version string

									var BundleType string

									var Guid string

									var Mdfid string

									var Model string

									var PlatformType string

									var RecommendedBuild string

									var ReleaseNotesUrl string

									var SoftwareTypeId string

									var SupportedModels []string

									var Vendor string

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship

									cmd := &cobra.Command{
										Use: "updatefirmwaredriverdistributable",

										Short: "Update a 'firmware.DriverDistributable' resource.",
										Long: `Update a 'firmware.DriverDistributable' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.FirmwareApi.UpdateFirmwareDriverDistributable(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&ImportAction, "ImportAction", "", "ImportAction")

									cmd.Flags().StringVar(&ImportState, "ImportState", "", "ImportState")

									cmd.Flags().StringVar(&Md5sum, "Md5sum", "", "Md5sum")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Sha512sum, "Sha512sum", "", "Sha512sum")

									cmd.Flags().StringVar(&SoftwareAdvisoryUrl, "SoftwareAdvisoryUrl", "", "SoftwareAdvisoryUrl")

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer
									if isMoRef(openapi.SoftwarerepositoryFileServer{}) {
										cmd.Flags().String("Source", "", "Source")
									}

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									cmd.Flags().StringVar(&BundleType, "BundleType", "", "BundleType")

									cmd.Flags().StringVar(&Guid, "Guid", "", "Guid")

									cmd.Flags().StringVar(&Mdfid, "Mdfid", "", "Mdfid")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									cmd.Flags().StringVar(&RecommendedBuild, "RecommendedBuild", "", "RecommendedBuild")

									cmd.Flags().StringVar(&ReleaseNotesUrl, "ReleaseNotesUrl", "", "ReleaseNotesUrl")

									cmd.Flags().StringVar(&SoftwareTypeId, "SoftwareTypeId", "", "SoftwareTypeId")

									cmd.Flags().StringSliceVar(&SupportedModels, "SupportedModels", []string{}, "SupportedModels")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship
									if isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Component string

									var PackageVersion string

									var Type string

									var Version string

									//Skipping var BiosUnit with unknown data type BiosUnitRelationship

									//Skipping var ManagementController with unknown data type ManagementControllerRelationship

									//Skipping var NetworkElements with unknown data type []NetworkElementRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StorageController with unknown data type StorageControllerRelationship

									//Skipping var StoragePhysicalDisk with unknown data type StoragePhysicalDiskRelationship

									cmd := &cobra.Command{
										Use: "updatefirmwarerunningfirmware",

										Short: "Update a 'firmware.RunningFirmware' resource.",
										Long: `Update a 'firmware.RunningFirmware' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.FirmwareApi.UpdateFirmwareRunningFirmware(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Component, "Component", "", "Component")

									cmd.Flags().StringVar(&PackageVersion, "PackageVersion", "", "PackageVersion")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									//Skipping var BiosUnit with unknown data type BiosUnitRelationship
									if isMoRef(openapi.BiosUnitRelationship{}) {
										cmd.Flags().String("BiosUnit", "", "BiosUnit")
									}

									//Skipping var ManagementController with unknown data type ManagementControllerRelationship
									if isMoRef(openapi.ManagementControllerRelationship{}) {
										cmd.Flags().String("ManagementController", "", "ManagementController")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageController with unknown data type StorageControllerRelationship
									if isMoRef(openapi.StorageControllerRelationship{}) {
										cmd.Flags().String("StorageController", "", "StorageController")
									}

									//Skipping var StoragePhysicalDisk with unknown data type StoragePhysicalDiskRelationship
									if isMoRef(openapi.StoragePhysicalDiskRelationship{}) {
										cmd.Flags().String("StoragePhysicalDisk", "", "StoragePhysicalDisk")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									//Skipping var DownloadCount with unknown data type int64

									var ImportAction string

									var ImportState string

									//Skipping var ImportedTime with unknown data type time.Time

									//Skipping var LastAccessTime with unknown data type time.Time

									var Md5sum string

									var Name string

									//Skipping var ReleaseDate with unknown data type time.Time

									var Sha512sum string

									//Skipping var Size with unknown data type int64

									var SoftwareAdvisoryUrl string

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer

									var Version string

									var BundleType string

									var Guid string

									var Mdfid string

									var Model string

									var PlatformType string

									var RecommendedBuild string

									var ReleaseNotesUrl string

									var SoftwareTypeId string

									var SupportedModels []string

									var Vendor string

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship

									cmd := &cobra.Command{
										Use: "updatefirmwareserverconfigurationutilitydistributable",

										Short: "Update a 'firmware.ServerConfigurationUtilityDistributable' resource.",
										Long: `Update a 'firmware.ServerConfigurationUtilityDistributable' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.FirmwareApi.UpdateFirmwareServerConfigurationUtilityDistributable(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&ImportAction, "ImportAction", "", "ImportAction")

									cmd.Flags().StringVar(&ImportState, "ImportState", "", "ImportState")

									cmd.Flags().StringVar(&Md5sum, "Md5sum", "", "Md5sum")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Sha512sum, "Sha512sum", "", "Sha512sum")

									cmd.Flags().StringVar(&SoftwareAdvisoryUrl, "SoftwareAdvisoryUrl", "", "SoftwareAdvisoryUrl")

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer
									if isMoRef(openapi.SoftwarerepositoryFileServer{}) {
										cmd.Flags().String("Source", "", "Source")
									}

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									cmd.Flags().StringVar(&BundleType, "BundleType", "", "BundleType")

									cmd.Flags().StringVar(&Guid, "Guid", "", "Guid")

									cmd.Flags().StringVar(&Mdfid, "Mdfid", "", "Mdfid")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									cmd.Flags().StringVar(&RecommendedBuild, "RecommendedBuild", "", "RecommendedBuild")

									cmd.Flags().StringVar(&ReleaseNotesUrl, "ReleaseNotesUrl", "", "ReleaseNotesUrl")

									cmd.Flags().StringVar(&SoftwareTypeId, "SoftwareTypeId", "", "SoftwareTypeId")

									cmd.Flags().StringSliceVar(&SupportedModels, "SupportedModels", []string{}, "SupportedModels")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship
									if isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var DirectDownload with unknown data type FirmwareDirectDownload

									//Skipping var NetworkShare with unknown data type FirmwareNetworkShare

									var UpgradeType string

									//Skipping var Device with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var Distributable with unknown data type FirmwareDistributableRelationship

									//Skipping var Server with unknown data type ComputeRackUnitRelationship

									//Skipping var UpgradeStatus with unknown data type FirmwareUpgradeStatusRelationship

									cmd := &cobra.Command{
										Use: "upgrade",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.FirmwareApi.CreateFirmwareUpgrade(authCtx)

											body := openapi.NewFirmwareUpgrade()

											//Set class id and object type by default
											body.ClassId = "firmware.Upgrade"
											body.ObjectType = "firmware.Upgrade"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "DirectDownload") && isMoRef(openapi.FirmwareDirectDownload{}) {
												if f, err := cmd.Flags().GetString("DirectDownload"); err == nil {
													paramVal := openapi.FirmwareDirectDownload{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.DirectDownload = &paramVal
														//                                if v, ok := v.(openapi.FirmwareDirectDownload); ok {
														//                                    body.DirectDownload = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "NetworkShare") && isMoRef(openapi.FirmwareNetworkShare{}) {
												if f, err := cmd.Flags().GetString("NetworkShare"); err == nil {
													paramVal := openapi.FirmwareNetworkShare{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.NetworkShare = &paramVal
														//                                if v, ok := v.(openapi.FirmwareNetworkShare); ok {
														//                                    body.NetworkShare = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "UpgradeType") {
												body.UpgradeType = &UpgradeType
											}

											if isFlagPassed(cmd.Flags(), "Device") && isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
												if f, err := cmd.Flags().GetString("Device"); err == nil {
													paramVal := openapi.AssetDeviceRegistrationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Device = &paramVal
														//                                if v, ok := v.(openapi.AssetDeviceRegistrationRelationship); ok {
														//                                    body.Device = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Distributable") && isMoRef(openapi.FirmwareDistributableRelationship{}) {
												if f, err := cmd.Flags().GetString("Distributable"); err == nil {
													paramVal := openapi.FirmwareDistributableRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Distributable = &paramVal
														//                                if v, ok := v.(openapi.FirmwareDistributableRelationship); ok {
														//                                    body.Distributable = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Server") && isMoRef(openapi.ComputeRackUnitRelationship{}) {
												if f, err := cmd.Flags().GetString("Server"); err == nil {
													paramVal := openapi.ComputeRackUnitRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Server = &paramVal
														//                                if v, ok := v.(openapi.ComputeRackUnitRelationship); ok {
														//                                    body.Server = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "UpgradeStatus") && isMoRef(openapi.FirmwareUpgradeStatusRelationship{}) {
												if f, err := cmd.Flags().GetString("UpgradeStatus"); err == nil {
													paramVal := openapi.FirmwareUpgradeStatusRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.UpgradeStatus = &paramVal
														//                                if v, ok := v.(openapi.FirmwareUpgradeStatusRelationship); ok {
														//                                    body.UpgradeStatus = &v
														//                                }
													}
												}
											}

											req = req.FirmwareUpgrade(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'firmware.Upgrade' resource.",
										Long: `Create a 'firmware.Upgrade' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var DirectDownload with unknown data type FirmwareDirectDownload
									if isMoRef(openapi.FirmwareDirectDownload{}) {
										cmd.Flags().String("DirectDownload", "", "DirectDownload")
									}

									//Skipping var NetworkShare with unknown data type FirmwareNetworkShare
									if isMoRef(openapi.FirmwareNetworkShare{}) {
										cmd.Flags().String("NetworkShare", "", "NetworkShare")
									}

									cmd.Flags().StringVar(&UpgradeType, "UpgradeType", "", "UpgradeType")

									//Skipping var Device with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("Device", "", "Device")
									}

									//Skipping var Distributable with unknown data type FirmwareDistributableRelationship
									if isMoRef(openapi.FirmwareDistributableRelationship{}) {
										cmd.Flags().String("Distributable", "", "Distributable")
									}

									//Skipping var Server with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("Server", "", "Server")
									}

									//Skipping var UpgradeStatus with unknown data type FirmwareUpgradeStatusRelationship
									if isMoRef(openapi.FirmwareUpgradeStatusRelationship{}) {
										cmd.Flags().String("UpgradeStatus", "", "UpgradeStatus")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "graphics",

								Short: "Create Graphics resource(s)",
								Long: `Create Graphics resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									//Skipping var CardId with unknown data type int64

									//Skipping var DeviceId with unknown data type int64

									var ExpanderSlot string

									var FirmwareVersion string

									var Mode string

									var NumGpus string

									var OperState string

									var PciAddress string

									var PciAddressList string

									var PciSlot string

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship

									//Skipping var GraphicsControllers with unknown data type []GraphicsControllerRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updategraphicscard",

										Short: "Update a 'graphics.Card' resource.",
										Long: `Update a 'graphics.Card' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.GraphicsApi.UpdateGraphicsCard(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&ExpanderSlot, "ExpanderSlot", "", "ExpanderSlot")

									cmd.Flags().StringVar(&FirmwareVersion, "FirmwareVersion", "", "FirmwareVersion")

									cmd.Flags().StringVar(&Mode, "Mode", "", "Mode")

									cmd.Flags().StringVar(&NumGpus, "NumGpus", "", "NumGpus")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&PciAddress, "PciAddress", "", "PciAddress")

									cmd.Flags().StringVar(&PciAddressList, "PciAddressList", "", "PciAddressList")

									cmd.Flags().StringVar(&PciSlot, "PciSlot", "", "PciSlot")

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship
									if isMoRef(openapi.ComputeBoardRelationship{}) {
										cmd.Flags().String("ComputeBoard", "", "ComputeBoard")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									//Skipping var ControllerId with unknown data type int64

									var PciAddr string

									var PciSlot string

									//Skipping var GraphicsCard with unknown data type GraphicsCardRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updategraphicscontroller",

										Short: "Update a 'graphics.Controller' resource.",
										Long: `Update a 'graphics.Controller' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.GraphicsApi.UpdateGraphicsController(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&PciAddr, "PciAddr", "", "PciAddr")

									cmd.Flags().StringVar(&PciSlot, "PciSlot", "", "PciSlot")

									//Skipping var GraphicsCard with unknown data type GraphicsCardRelationship
									if isMoRef(openapi.GraphicsCardRelationship{}) {
										cmd.Flags().String("GraphicsCard", "", "GraphicsCard")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "hcl",

								Short: "Create Hcl resource(s)",
								Long: `Create Hcl resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var ProfileList with unknown data type []HclHardwareCompatibilityProfile

									var RequestType string

									cmd := &cobra.Command{
										Use: "compatibilitystatus",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HclApi.CreateHclCompatibilityStatus(authCtx)

											body := openapi.NewHclCompatibilityStatus()

											//Set class id and object type by default
											body.ClassId = "hcl.CompatibilityStatus"
											body.ObjectType = "hcl.CompatibilityStatus"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "RequestType") {
												body.RequestType = &RequestType
											}

											req = req.HclCompatibilityStatus(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'hcl.CompatibilityStatus' resource.",
										Long: `Create a 'hcl.CompatibilityStatus' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&RequestType, "RequestType", "", "RequestType")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Constraints with unknown data type []HclConstraint

									var HxdpVersion string

									var HypervisorType string

									var HypervisorVersion string

									var ServerFwVersion string

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship

									cmd := &cobra.Command{
										Use: "hyperflexsoftwarecompatibilityinfo",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HclApi.CreateHclHyperflexSoftwareCompatibilityInfo(authCtx)

											body := openapi.NewHclHyperflexSoftwareCompatibilityInfo()

											//Set class id and object type by default
											body.ClassId = "hcl.HyperflexSoftwareCompatibilityInfo"
											body.ObjectType = "hcl.HyperflexSoftwareCompatibilityInfo"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "HxdpVersion") {
												body.HxdpVersion = &HxdpVersion
											}

											if isFlagPassed(cmd.Flags(), "HypervisorType") {
												body.HypervisorType = &HypervisorType
											}

											if isFlagPassed(cmd.Flags(), "HypervisorVersion") {
												body.HypervisorVersion = &HypervisorVersion
											}

											if isFlagPassed(cmd.Flags(), "ServerFwVersion") {
												body.ServerFwVersion = &ServerFwVersion
											}

											if isFlagPassed(cmd.Flags(), "AppCatalog") && isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
												if f, err := cmd.Flags().GetString("AppCatalog"); err == nil {
													paramVal := openapi.HyperflexAppCatalogRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.AppCatalog = &paramVal
														//                                if v, ok := v.(openapi.HyperflexAppCatalogRelationship); ok {
														//                                    body.AppCatalog = &v
														//                                }
													}
												}
											}

											req = req.HclHyperflexSoftwareCompatibilityInfo(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'hcl.HyperflexSoftwareCompatibilityInfo' resource.",
										Long: `Create a 'hcl.HyperflexSoftwareCompatibilityInfo' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&HxdpVersion, "HxdpVersion", "", "HxdpVersion")

									cmd.Flags().StringVar(&HypervisorType, "HypervisorType", "", "HypervisorType")

									cmd.Flags().StringVar(&HypervisorVersion, "HypervisorVersion", "", "HypervisorVersion")

									cmd.Flags().StringVar(&ServerFwVersion, "ServerFwVersion", "", "ServerFwVersion")

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship
									if isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
										cmd.Flags().String("AppCatalog", "", "AppCatalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var OsVendor string

									var OsVersion string

									//Skipping var ProductList with unknown data type []HclProduct

									cmd := &cobra.Command{
										Use: "supporteddrivername",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HclApi.CreateHclSupportedDriverName(authCtx)

											body := openapi.NewHclSupportedDriverName()

											//Set class id and object type by default
											body.ClassId = "hcl.SupportedDriverName"
											body.ObjectType = "hcl.SupportedDriverName"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "OsVendor") {
												body.OsVendor = &OsVendor
											}

											if isFlagPassed(cmd.Flags(), "OsVersion") {
												body.OsVersion = &OsVersion
											}

											req = req.HclSupportedDriverName(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'hcl.SupportedDriverName' resource.",
										Long: `Create a 'hcl.SupportedDriverName' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&OsVendor, "OsVendor", "", "OsVendor")

									cmd.Flags().StringVar(&OsVersion, "OsVersion", "", "OsVersion")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Constraints with unknown data type []HclConstraint

									var HxdpVersion string

									var HypervisorType string

									var HypervisorVersion string

									var ServerFwVersion string

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship

									cmd := &cobra.Command{
										Use: "updatehclhyperflexsoftwarecompatibilityinfo",

										Short: "Update a 'hcl.HyperflexSoftwareCompatibilityInfo' resource.",
										Long: `Update a 'hcl.HyperflexSoftwareCompatibilityInfo' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HclApi.UpdateHclHyperflexSoftwareCompatibilityInfo(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&HxdpVersion, "HxdpVersion", "", "HxdpVersion")

									cmd.Flags().StringVar(&HypervisorType, "HypervisorType", "", "HypervisorType")

									cmd.Flags().StringVar(&HypervisorVersion, "HypervisorVersion", "", "HypervisorVersion")

									cmd.Flags().StringVar(&ServerFwVersion, "ServerFwVersion", "", "ServerFwVersion")

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship
									if isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
										cmd.Flags().String("AppCatalog", "", "AppCatalog")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "hyperflex",

								Short: "Create Hyperflex resource(s)",
								Long: `Create Hyperflex resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Version string

									//Skipping var FeatureLimitExternal with unknown data type HyperflexFeatureLimitExternalRelationship

									//Skipping var FeatureLimitInternal with unknown data type HyperflexFeatureLimitInternalRelationship

									//Skipping var HxdpVersions with unknown data type []HyperflexHxdpVersionRelationship

									//Skipping var HyperflexCapabilityInfos with unknown data type []HyperflexCapabilityInfoRelationship

									//Skipping var HyperflexSoftwareCompatibilityInfos with unknown data type []HclHyperflexSoftwareCompatibilityInfoRelationship

									//Skipping var ServerFirmwareVersion with unknown data type HyperflexServerFirmwareVersionRelationship

									//Skipping var ServerModel with unknown data type HyperflexServerModelRelationship

									cmd := &cobra.Command{
										Use: "appcatalog",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.CreateHyperflexAppCatalog(authCtx)

											body := openapi.NewHyperflexAppCatalog()

											//Set class id and object type by default
											body.ClassId = "hyperflex.AppCatalog"
											body.ObjectType = "hyperflex.AppCatalog"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Version") {
												body.Version = &Version
											}

											if isFlagPassed(cmd.Flags(), "FeatureLimitExternal") && isMoRef(openapi.HyperflexFeatureLimitExternalRelationship{}) {
												if f, err := cmd.Flags().GetString("FeatureLimitExternal"); err == nil {
													paramVal := openapi.HyperflexFeatureLimitExternalRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.FeatureLimitExternal = &paramVal
														//                                if v, ok := v.(openapi.HyperflexFeatureLimitExternalRelationship); ok {
														//                                    body.FeatureLimitExternal = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "FeatureLimitInternal") && isMoRef(openapi.HyperflexFeatureLimitInternalRelationship{}) {
												if f, err := cmd.Flags().GetString("FeatureLimitInternal"); err == nil {
													paramVal := openapi.HyperflexFeatureLimitInternalRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.FeatureLimitInternal = &paramVal
														//                                if v, ok := v.(openapi.HyperflexFeatureLimitInternalRelationship); ok {
														//                                    body.FeatureLimitInternal = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ServerFirmwareVersion") && isMoRef(openapi.HyperflexServerFirmwareVersionRelationship{}) {
												if f, err := cmd.Flags().GetString("ServerFirmwareVersion"); err == nil {
													paramVal := openapi.HyperflexServerFirmwareVersionRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ServerFirmwareVersion = &paramVal
														//                                if v, ok := v.(openapi.HyperflexServerFirmwareVersionRelationship); ok {
														//                                    body.ServerFirmwareVersion = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ServerModel") && isMoRef(openapi.HyperflexServerModelRelationship{}) {
												if f, err := cmd.Flags().GetString("ServerModel"); err == nil {
													paramVal := openapi.HyperflexServerModelRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ServerModel = &paramVal
														//                                if v, ok := v.(openapi.HyperflexServerModelRelationship); ok {
														//                                    body.ServerModel = &v
														//                                }
													}
												}
											}

											req = req.HyperflexAppCatalog(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'hyperflex.AppCatalog' resource.",
										Long: `Create a 'hyperflex.AppCatalog' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									//Skipping var FeatureLimitExternal with unknown data type HyperflexFeatureLimitExternalRelationship
									if isMoRef(openapi.HyperflexFeatureLimitExternalRelationship{}) {
										cmd.Flags().String("FeatureLimitExternal", "", "FeatureLimitExternal")
									}

									//Skipping var FeatureLimitInternal with unknown data type HyperflexFeatureLimitInternalRelationship
									if isMoRef(openapi.HyperflexFeatureLimitInternalRelationship{}) {
										cmd.Flags().String("FeatureLimitInternal", "", "FeatureLimitInternal")
									}

									//Skipping var ServerFirmwareVersion with unknown data type HyperflexServerFirmwareVersionRelationship
									if isMoRef(openapi.HyperflexServerFirmwareVersionRelationship{}) {
										cmd.Flags().String("ServerFirmwareVersion", "", "ServerFirmwareVersion")
									}

									//Skipping var ServerModel with unknown data type HyperflexServerModelRelationship
									if isMoRef(openapi.HyperflexServerModelRelationship{}) {
										cmd.Flags().String("ServerModel", "", "ServerModel")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var AdminState bool

									var ServiceTicketReceipient string

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "autosupportpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.CreateHyperflexAutoSupportPolicy(authCtx)

											body := openapi.NewHyperflexAutoSupportPolicy()

											//Set class id and object type by default
											body.ClassId = "hyperflex.AutoSupportPolicy"
											body.ObjectType = "hyperflex.AutoSupportPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "AdminState") {
												body.AdminState = &AdminState
											}

											if isFlagPassed(cmd.Flags(), "ServiceTicketReceipient") {
												body.ServiceTicketReceipient = &ServiceTicketReceipient
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.HyperflexAutoSupportPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'hyperflex.AutoSupportPolicy' resource.",
										Long: `Create a 'hyperflex.AutoSupportPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&AdminState, "AdminState", false, "AdminState")

									cmd.Flags().StringVar(&ServiceTicketReceipient, "ServiceTicketReceipient", "", "ServiceTicketReceipient")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var CapabilityConstraints with unknown data type []HclConstraint

									var Name string

									var Value string

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship

									cmd := &cobra.Command{
										Use: "capabilityinfo",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.CreateHyperflexCapabilityInfo(authCtx)

											body := openapi.NewHyperflexCapabilityInfo()

											//Set class id and object type by default
											body.ClassId = "hyperflex.CapabilityInfo"
											body.ObjectType = "hyperflex.CapabilityInfo"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Value") {
												body.Value = &Value
											}

											if isFlagPassed(cmd.Flags(), "AppCatalog") && isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
												if f, err := cmd.Flags().GetString("AppCatalog"); err == nil {
													paramVal := openapi.HyperflexAppCatalogRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.AppCatalog = &paramVal
														//                                if v, ok := v.(openapi.HyperflexAppCatalogRelationship); ok {
														//                                    body.AppCatalog = &v
														//                                }
													}
												}
											}

											req = req.HyperflexCapabilityInfo(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'hyperflex.CapabilityInfo' resource.",
										Long: `Create a 'hyperflex.CapabilityInfo' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Value, "Value", "", "Value")

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship
									if isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
										cmd.Flags().String("AppCatalog", "", "AppCatalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var JumboFrame bool

									//Skipping var KvmIpRange with unknown data type HyperflexIpAddrRange

									//Skipping var MacPrefixRange with unknown data type HyperflexMacAddrPrefixRange

									//Skipping var MgmtVlan with unknown data type HyperflexNamedVlan

									var UplinkSpeed string

									//Skipping var VmMigrationVlan with unknown data type HyperflexNamedVlan

									//Skipping var VmNetworkVlans with unknown data type []HyperflexNamedVlan

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "clusternetworkpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.CreateHyperflexClusterNetworkPolicy(authCtx)

											body := openapi.NewHyperflexClusterNetworkPolicy()

											//Set class id and object type by default
											body.ClassId = "hyperflex.ClusterNetworkPolicy"
											body.ObjectType = "hyperflex.ClusterNetworkPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "JumboFrame") {
												body.JumboFrame = &JumboFrame
											}

											if isFlagPassed(cmd.Flags(), "KvmIpRange") && isMoRef(openapi.HyperflexIpAddrRange{}) {
												if f, err := cmd.Flags().GetString("KvmIpRange"); err == nil {
													paramVal := openapi.HyperflexIpAddrRange{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.KvmIpRange = &paramVal
														//                                if v, ok := v.(openapi.HyperflexIpAddrRange); ok {
														//                                    body.KvmIpRange = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "MacPrefixRange") && isMoRef(openapi.HyperflexMacAddrPrefixRange{}) {
												if f, err := cmd.Flags().GetString("MacPrefixRange"); err == nil {
													paramVal := openapi.HyperflexMacAddrPrefixRange{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.MacPrefixRange = &paramVal
														//                                if v, ok := v.(openapi.HyperflexMacAddrPrefixRange); ok {
														//                                    body.MacPrefixRange = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "MgmtVlan") && isMoRef(openapi.HyperflexNamedVlan{}) {
												if f, err := cmd.Flags().GetString("MgmtVlan"); err == nil {
													paramVal := openapi.HyperflexNamedVlan{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.MgmtVlan = &paramVal
														//                                if v, ok := v.(openapi.HyperflexNamedVlan); ok {
														//                                    body.MgmtVlan = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "UplinkSpeed") {
												body.UplinkSpeed = &UplinkSpeed
											}

											if isFlagPassed(cmd.Flags(), "VmMigrationVlan") && isMoRef(openapi.HyperflexNamedVlan{}) {
												if f, err := cmd.Flags().GetString("VmMigrationVlan"); err == nil {
													paramVal := openapi.HyperflexNamedVlan{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VmMigrationVlan = &paramVal
														//                                if v, ok := v.(openapi.HyperflexNamedVlan); ok {
														//                                    body.VmMigrationVlan = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.HyperflexClusterNetworkPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'hyperflex.ClusterNetworkPolicy' resource.",
										Long: `Create a 'hyperflex.ClusterNetworkPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&JumboFrame, "JumboFrame", false, "JumboFrame")

									//Skipping var KvmIpRange with unknown data type HyperflexIpAddrRange
									if isMoRef(openapi.HyperflexIpAddrRange{}) {
										cmd.Flags().String("KvmIpRange", "", "KvmIpRange")
									}

									//Skipping var MacPrefixRange with unknown data type HyperflexMacAddrPrefixRange
									if isMoRef(openapi.HyperflexMacAddrPrefixRange{}) {
										cmd.Flags().String("MacPrefixRange", "", "MacPrefixRange")
									}

									//Skipping var MgmtVlan with unknown data type HyperflexNamedVlan
									if isMoRef(openapi.HyperflexNamedVlan{}) {
										cmd.Flags().String("MgmtVlan", "", "MgmtVlan")
									}

									cmd.Flags().StringVar(&UplinkSpeed, "UplinkSpeed", "", "UplinkSpeed")

									//Skipping var VmMigrationVlan with unknown data type HyperflexNamedVlan
									if isMoRef(openapi.HyperflexNamedVlan{}) {
										cmd.Flags().String("VmMigrationVlan", "", "VmMigrationVlan")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Type string

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship

									var Action string

									//Skipping var ConfigContext with unknown data type PolicyConfigContext

									var DataIpAddress string

									var HypervisorType string

									var MacAddressPrefix string

									var MgmtIpAddress string

									var MgmtPlatform string

									//Skipping var Replication with unknown data type int64

									//Skipping var StorageDataVlan with unknown data type HyperflexNamedVlan

									var WwxnPrefix string

									//Skipping var AssociatedCluster with unknown data type HyperflexClusterRelationship

									//Skipping var AutoSupport with unknown data type HyperflexAutoSupportPolicyRelationship

									//Skipping var ClusterNetwork with unknown data type HyperflexClusterNetworkPolicyRelationship

									//Skipping var ClusterStorage with unknown data type HyperflexClusterStoragePolicyRelationship

									//Skipping var ConfigResult with unknown data type HyperflexConfigResultRelationship

									//Skipping var ExtFcStorage with unknown data type HyperflexExtFcStoragePolicyRelationship

									//Skipping var ExtIscsiStorage with unknown data type HyperflexExtIscsiStoragePolicyRelationship

									//Skipping var LocalCredential with unknown data type HyperflexLocalCredentialPolicyRelationship

									//Skipping var NodeConfig with unknown data type HyperflexNodeConfigPolicyRelationship

									//Skipping var NodeProfileConfig with unknown data type []HyperflexNodeProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var ProxySetting with unknown data type HyperflexProxySettingPolicyRelationship

									//Skipping var RunningWorkflows with unknown data type []WorkflowWorkflowInfoRelationship

									//Skipping var SoftwareVersion with unknown data type HyperflexSoftwareVersionPolicyRelationship

									//Skipping var SysConfig with unknown data type HyperflexSysConfigPolicyRelationship

									//Skipping var UcsmConfig with unknown data type HyperflexUcsmConfigPolicyRelationship

									//Skipping var VcenterConfig with unknown data type HyperflexVcenterConfigPolicyRelationship

									cmd := &cobra.Command{
										Use: "clusterprofile",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.CreateHyperflexClusterProfile(authCtx)

											body := openapi.NewHyperflexClusterProfile()

											//Set class id and object type by default
											body.ClassId = "hyperflex.ClusterProfile"
											body.ObjectType = "hyperflex.ClusterProfile"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Type") {
												body.Type = &Type
											}

											if isFlagPassed(cmd.Flags(), "SrcTemplate") && isMoRef(openapi.PolicyAbstractProfileRelationship{}) {
												if f, err := cmd.Flags().GetString("SrcTemplate"); err == nil {
													paramVal := openapi.PolicyAbstractProfileRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.SrcTemplate = &paramVal
														//                                if v, ok := v.(openapi.PolicyAbstractProfileRelationship); ok {
														//                                    body.SrcTemplate = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Action") {
												body.Action = &Action
											}

											if isFlagPassed(cmd.Flags(), "ConfigContext") && isMoRef(openapi.PolicyConfigContext{}) {
												if f, err := cmd.Flags().GetString("ConfigContext"); err == nil {
													paramVal := openapi.PolicyConfigContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ConfigContext = &paramVal
														//                                if v, ok := v.(openapi.PolicyConfigContext); ok {
														//                                    body.ConfigContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "DataIpAddress") {
												body.DataIpAddress = &DataIpAddress
											}

											if isFlagPassed(cmd.Flags(), "HypervisorType") {
												body.HypervisorType = &HypervisorType
											}

											if isFlagPassed(cmd.Flags(), "MacAddressPrefix") {
												body.MacAddressPrefix = &MacAddressPrefix
											}

											if isFlagPassed(cmd.Flags(), "MgmtIpAddress") {
												body.MgmtIpAddress = &MgmtIpAddress
											}

											if isFlagPassed(cmd.Flags(), "MgmtPlatform") {
												body.MgmtPlatform = &MgmtPlatform
											}

											if isFlagPassed(cmd.Flags(), "StorageDataVlan") && isMoRef(openapi.HyperflexNamedVlan{}) {
												if f, err := cmd.Flags().GetString("StorageDataVlan"); err == nil {
													paramVal := openapi.HyperflexNamedVlan{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.StorageDataVlan = &paramVal
														//                                if v, ok := v.(openapi.HyperflexNamedVlan); ok {
														//                                    body.StorageDataVlan = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "WwxnPrefix") {
												body.WwxnPrefix = &WwxnPrefix
											}

											if isFlagPassed(cmd.Flags(), "AssociatedCluster") && isMoRef(openapi.HyperflexClusterRelationship{}) {
												if f, err := cmd.Flags().GetString("AssociatedCluster"); err == nil {
													paramVal := openapi.HyperflexClusterRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.AssociatedCluster = &paramVal
														//                                if v, ok := v.(openapi.HyperflexClusterRelationship); ok {
														//                                    body.AssociatedCluster = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "AutoSupport") && isMoRef(openapi.HyperflexAutoSupportPolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("AutoSupport"); err == nil {
													paramVal := openapi.HyperflexAutoSupportPolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.AutoSupport = &paramVal
														//                                if v, ok := v.(openapi.HyperflexAutoSupportPolicyRelationship); ok {
														//                                    body.AutoSupport = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ClusterNetwork") && isMoRef(openapi.HyperflexClusterNetworkPolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("ClusterNetwork"); err == nil {
													paramVal := openapi.HyperflexClusterNetworkPolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ClusterNetwork = &paramVal
														//                                if v, ok := v.(openapi.HyperflexClusterNetworkPolicyRelationship); ok {
														//                                    body.ClusterNetwork = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ClusterStorage") && isMoRef(openapi.HyperflexClusterStoragePolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("ClusterStorage"); err == nil {
													paramVal := openapi.HyperflexClusterStoragePolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ClusterStorage = &paramVal
														//                                if v, ok := v.(openapi.HyperflexClusterStoragePolicyRelationship); ok {
														//                                    body.ClusterStorage = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ConfigResult") && isMoRef(openapi.HyperflexConfigResultRelationship{}) {
												if f, err := cmd.Flags().GetString("ConfigResult"); err == nil {
													paramVal := openapi.HyperflexConfigResultRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ConfigResult = &paramVal
														//                                if v, ok := v.(openapi.HyperflexConfigResultRelationship); ok {
														//                                    body.ConfigResult = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ExtFcStorage") && isMoRef(openapi.HyperflexExtFcStoragePolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("ExtFcStorage"); err == nil {
													paramVal := openapi.HyperflexExtFcStoragePolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ExtFcStorage = &paramVal
														//                                if v, ok := v.(openapi.HyperflexExtFcStoragePolicyRelationship); ok {
														//                                    body.ExtFcStorage = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ExtIscsiStorage") && isMoRef(openapi.HyperflexExtIscsiStoragePolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("ExtIscsiStorage"); err == nil {
													paramVal := openapi.HyperflexExtIscsiStoragePolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ExtIscsiStorage = &paramVal
														//                                if v, ok := v.(openapi.HyperflexExtIscsiStoragePolicyRelationship); ok {
														//                                    body.ExtIscsiStorage = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "LocalCredential") && isMoRef(openapi.HyperflexLocalCredentialPolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("LocalCredential"); err == nil {
													paramVal := openapi.HyperflexLocalCredentialPolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.LocalCredential = &paramVal
														//                                if v, ok := v.(openapi.HyperflexLocalCredentialPolicyRelationship); ok {
														//                                    body.LocalCredential = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "NodeConfig") && isMoRef(openapi.HyperflexNodeConfigPolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("NodeConfig"); err == nil {
													paramVal := openapi.HyperflexNodeConfigPolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.NodeConfig = &paramVal
														//                                if v, ok := v.(openapi.HyperflexNodeConfigPolicyRelationship); ok {
														//                                    body.NodeConfig = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ProxySetting") && isMoRef(openapi.HyperflexProxySettingPolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("ProxySetting"); err == nil {
													paramVal := openapi.HyperflexProxySettingPolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ProxySetting = &paramVal
														//                                if v, ok := v.(openapi.HyperflexProxySettingPolicyRelationship); ok {
														//                                    body.ProxySetting = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "SoftwareVersion") && isMoRef(openapi.HyperflexSoftwareVersionPolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("SoftwareVersion"); err == nil {
													paramVal := openapi.HyperflexSoftwareVersionPolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.SoftwareVersion = &paramVal
														//                                if v, ok := v.(openapi.HyperflexSoftwareVersionPolicyRelationship); ok {
														//                                    body.SoftwareVersion = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "SysConfig") && isMoRef(openapi.HyperflexSysConfigPolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("SysConfig"); err == nil {
													paramVal := openapi.HyperflexSysConfigPolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.SysConfig = &paramVal
														//                                if v, ok := v.(openapi.HyperflexSysConfigPolicyRelationship); ok {
														//                                    body.SysConfig = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "UcsmConfig") && isMoRef(openapi.HyperflexUcsmConfigPolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("UcsmConfig"); err == nil {
													paramVal := openapi.HyperflexUcsmConfigPolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.UcsmConfig = &paramVal
														//                                if v, ok := v.(openapi.HyperflexUcsmConfigPolicyRelationship); ok {
														//                                    body.UcsmConfig = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "VcenterConfig") && isMoRef(openapi.HyperflexVcenterConfigPolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("VcenterConfig"); err == nil {
													paramVal := openapi.HyperflexVcenterConfigPolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VcenterConfig = &paramVal
														//                                if v, ok := v.(openapi.HyperflexVcenterConfigPolicyRelationship); ok {
														//                                    body.VcenterConfig = &v
														//                                }
													}
												}
											}

											req = req.HyperflexClusterProfile(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'hyperflex.ClusterProfile' resource.",
										Long: `Create a 'hyperflex.ClusterProfile' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship
									if isMoRef(openapi.PolicyAbstractProfileRelationship{}) {
										cmd.Flags().String("SrcTemplate", "", "SrcTemplate")
									}

									cmd.Flags().StringVar(&Action, "Action", "", "Action")

									//Skipping var ConfigContext with unknown data type PolicyConfigContext
									if isMoRef(openapi.PolicyConfigContext{}) {
										cmd.Flags().String("ConfigContext", "", "ConfigContext")
									}

									cmd.Flags().StringVar(&DataIpAddress, "DataIpAddress", "", "DataIpAddress")

									cmd.Flags().StringVar(&HypervisorType, "HypervisorType", "", "HypervisorType")

									cmd.Flags().StringVar(&MacAddressPrefix, "MacAddressPrefix", "", "MacAddressPrefix")

									cmd.Flags().StringVar(&MgmtIpAddress, "MgmtIpAddress", "", "MgmtIpAddress")

									cmd.Flags().StringVar(&MgmtPlatform, "MgmtPlatform", "", "MgmtPlatform")

									//Skipping var StorageDataVlan with unknown data type HyperflexNamedVlan
									if isMoRef(openapi.HyperflexNamedVlan{}) {
										cmd.Flags().String("StorageDataVlan", "", "StorageDataVlan")
									}

									cmd.Flags().StringVar(&WwxnPrefix, "WwxnPrefix", "", "WwxnPrefix")

									//Skipping var AssociatedCluster with unknown data type HyperflexClusterRelationship
									if isMoRef(openapi.HyperflexClusterRelationship{}) {
										cmd.Flags().String("AssociatedCluster", "", "AssociatedCluster")
									}

									//Skipping var AutoSupport with unknown data type HyperflexAutoSupportPolicyRelationship
									if isMoRef(openapi.HyperflexAutoSupportPolicyRelationship{}) {
										cmd.Flags().String("AutoSupport", "", "AutoSupport")
									}

									//Skipping var ClusterNetwork with unknown data type HyperflexClusterNetworkPolicyRelationship
									if isMoRef(openapi.HyperflexClusterNetworkPolicyRelationship{}) {
										cmd.Flags().String("ClusterNetwork", "", "ClusterNetwork")
									}

									//Skipping var ClusterStorage with unknown data type HyperflexClusterStoragePolicyRelationship
									if isMoRef(openapi.HyperflexClusterStoragePolicyRelationship{}) {
										cmd.Flags().String("ClusterStorage", "", "ClusterStorage")
									}

									//Skipping var ConfigResult with unknown data type HyperflexConfigResultRelationship
									if isMoRef(openapi.HyperflexConfigResultRelationship{}) {
										cmd.Flags().String("ConfigResult", "", "ConfigResult")
									}

									//Skipping var ExtFcStorage with unknown data type HyperflexExtFcStoragePolicyRelationship
									if isMoRef(openapi.HyperflexExtFcStoragePolicyRelationship{}) {
										cmd.Flags().String("ExtFcStorage", "", "ExtFcStorage")
									}

									//Skipping var ExtIscsiStorage with unknown data type HyperflexExtIscsiStoragePolicyRelationship
									if isMoRef(openapi.HyperflexExtIscsiStoragePolicyRelationship{}) {
										cmd.Flags().String("ExtIscsiStorage", "", "ExtIscsiStorage")
									}

									//Skipping var LocalCredential with unknown data type HyperflexLocalCredentialPolicyRelationship
									if isMoRef(openapi.HyperflexLocalCredentialPolicyRelationship{}) {
										cmd.Flags().String("LocalCredential", "", "LocalCredential")
									}

									//Skipping var NodeConfig with unknown data type HyperflexNodeConfigPolicyRelationship
									if isMoRef(openapi.HyperflexNodeConfigPolicyRelationship{}) {
										cmd.Flags().String("NodeConfig", "", "NodeConfig")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									//Skipping var ProxySetting with unknown data type HyperflexProxySettingPolicyRelationship
									if isMoRef(openapi.HyperflexProxySettingPolicyRelationship{}) {
										cmd.Flags().String("ProxySetting", "", "ProxySetting")
									}

									//Skipping var SoftwareVersion with unknown data type HyperflexSoftwareVersionPolicyRelationship
									if isMoRef(openapi.HyperflexSoftwareVersionPolicyRelationship{}) {
										cmd.Flags().String("SoftwareVersion", "", "SoftwareVersion")
									}

									//Skipping var SysConfig with unknown data type HyperflexSysConfigPolicyRelationship
									if isMoRef(openapi.HyperflexSysConfigPolicyRelationship{}) {
										cmd.Flags().String("SysConfig", "", "SysConfig")
									}

									//Skipping var UcsmConfig with unknown data type HyperflexUcsmConfigPolicyRelationship
									if isMoRef(openapi.HyperflexUcsmConfigPolicyRelationship{}) {
										cmd.Flags().String("UcsmConfig", "", "UcsmConfig")
									}

									//Skipping var VcenterConfig with unknown data type HyperflexVcenterConfigPolicyRelationship
									if isMoRef(openapi.HyperflexVcenterConfigPolicyRelationship{}) {
										cmd.Flags().String("VcenterConfig", "", "VcenterConfig")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var DiskPartitionCleanup bool

									//Skipping var LogicalAvalabilityZoneConfig with unknown data type HyperflexLogicalAvailabilityZone

									var VdiOptimization bool

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "clusterstoragepolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.CreateHyperflexClusterStoragePolicy(authCtx)

											body := openapi.NewHyperflexClusterStoragePolicy()

											//Set class id and object type by default
											body.ClassId = "hyperflex.ClusterStoragePolicy"
											body.ObjectType = "hyperflex.ClusterStoragePolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "DiskPartitionCleanup") {
												body.DiskPartitionCleanup = &DiskPartitionCleanup
											}

											if isFlagPassed(cmd.Flags(), "LogicalAvalabilityZoneConfig") && isMoRef(openapi.HyperflexLogicalAvailabilityZone{}) {
												if f, err := cmd.Flags().GetString("LogicalAvalabilityZoneConfig"); err == nil {
													paramVal := openapi.HyperflexLogicalAvailabilityZone{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.LogicalAvalabilityZoneConfig = &paramVal
														//                                if v, ok := v.(openapi.HyperflexLogicalAvailabilityZone); ok {
														//                                    body.LogicalAvalabilityZoneConfig = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "VdiOptimization") {
												body.VdiOptimization = &VdiOptimization
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.HyperflexClusterStoragePolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'hyperflex.ClusterStoragePolicy' resource.",
										Long: `Create a 'hyperflex.ClusterStoragePolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&DiskPartitionCleanup, "DiskPartitionCleanup", false, "DiskPartitionCleanup")

									//Skipping var LogicalAvalabilityZoneConfig with unknown data type HyperflexLogicalAvailabilityZone
									if isMoRef(openapi.HyperflexLogicalAvailabilityZone{}) {
										cmd.Flags().String("LogicalAvalabilityZoneConfig", "", "LogicalAvalabilityZoneConfig")
									}

									cmd.Flags().BoolVar(&VdiOptimization, "VdiOptimization", false, "VdiOptimization")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var AdminState bool

									//Skipping var ExtaTraffic with unknown data type HyperflexNamedVsan

									//Skipping var ExtbTraffic with unknown data type HyperflexNamedVsan

									//Skipping var WwxnPrefixRange with unknown data type HyperflexWwxnPrefixRange

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "extfcstoragepolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.CreateHyperflexExtFcStoragePolicy(authCtx)

											body := openapi.NewHyperflexExtFcStoragePolicy()

											//Set class id and object type by default
											body.ClassId = "hyperflex.ExtFcStoragePolicy"
											body.ObjectType = "hyperflex.ExtFcStoragePolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "AdminState") {
												body.AdminState = &AdminState
											}

											if isFlagPassed(cmd.Flags(), "ExtaTraffic") && isMoRef(openapi.HyperflexNamedVsan{}) {
												if f, err := cmd.Flags().GetString("ExtaTraffic"); err == nil {
													paramVal := openapi.HyperflexNamedVsan{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ExtaTraffic = &paramVal
														//                                if v, ok := v.(openapi.HyperflexNamedVsan); ok {
														//                                    body.ExtaTraffic = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ExtbTraffic") && isMoRef(openapi.HyperflexNamedVsan{}) {
												if f, err := cmd.Flags().GetString("ExtbTraffic"); err == nil {
													paramVal := openapi.HyperflexNamedVsan{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ExtbTraffic = &paramVal
														//                                if v, ok := v.(openapi.HyperflexNamedVsan); ok {
														//                                    body.ExtbTraffic = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "WwxnPrefixRange") && isMoRef(openapi.HyperflexWwxnPrefixRange{}) {
												if f, err := cmd.Flags().GetString("WwxnPrefixRange"); err == nil {
													paramVal := openapi.HyperflexWwxnPrefixRange{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.WwxnPrefixRange = &paramVal
														//                                if v, ok := v.(openapi.HyperflexWwxnPrefixRange); ok {
														//                                    body.WwxnPrefixRange = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.HyperflexExtFcStoragePolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'hyperflex.ExtFcStoragePolicy' resource.",
										Long: `Create a 'hyperflex.ExtFcStoragePolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&AdminState, "AdminState", false, "AdminState")

									//Skipping var ExtaTraffic with unknown data type HyperflexNamedVsan
									if isMoRef(openapi.HyperflexNamedVsan{}) {
										cmd.Flags().String("ExtaTraffic", "", "ExtaTraffic")
									}

									//Skipping var ExtbTraffic with unknown data type HyperflexNamedVsan
									if isMoRef(openapi.HyperflexNamedVsan{}) {
										cmd.Flags().String("ExtbTraffic", "", "ExtbTraffic")
									}

									//Skipping var WwxnPrefixRange with unknown data type HyperflexWwxnPrefixRange
									if isMoRef(openapi.HyperflexWwxnPrefixRange{}) {
										cmd.Flags().String("WwxnPrefixRange", "", "WwxnPrefixRange")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var AdminState bool

									//Skipping var ExtaTraffic with unknown data type HyperflexNamedVlan

									//Skipping var ExtbTraffic with unknown data type HyperflexNamedVlan

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "extiscsistoragepolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.CreateHyperflexExtIscsiStoragePolicy(authCtx)

											body := openapi.NewHyperflexExtIscsiStoragePolicy()

											//Set class id and object type by default
											body.ClassId = "hyperflex.ExtIscsiStoragePolicy"
											body.ObjectType = "hyperflex.ExtIscsiStoragePolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "AdminState") {
												body.AdminState = &AdminState
											}

											if isFlagPassed(cmd.Flags(), "ExtaTraffic") && isMoRef(openapi.HyperflexNamedVlan{}) {
												if f, err := cmd.Flags().GetString("ExtaTraffic"); err == nil {
													paramVal := openapi.HyperflexNamedVlan{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ExtaTraffic = &paramVal
														//                                if v, ok := v.(openapi.HyperflexNamedVlan); ok {
														//                                    body.ExtaTraffic = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ExtbTraffic") && isMoRef(openapi.HyperflexNamedVlan{}) {
												if f, err := cmd.Flags().GetString("ExtbTraffic"); err == nil {
													paramVal := openapi.HyperflexNamedVlan{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ExtbTraffic = &paramVal
														//                                if v, ok := v.(openapi.HyperflexNamedVlan); ok {
														//                                    body.ExtbTraffic = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.HyperflexExtIscsiStoragePolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'hyperflex.ExtIscsiStoragePolicy' resource.",
										Long: `Create a 'hyperflex.ExtIscsiStoragePolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&AdminState, "AdminState", false, "AdminState")

									//Skipping var ExtaTraffic with unknown data type HyperflexNamedVlan
									if isMoRef(openapi.HyperflexNamedVlan{}) {
										cmd.Flags().String("ExtaTraffic", "", "ExtaTraffic")
									}

									//Skipping var ExtbTraffic with unknown data type HyperflexNamedVlan
									if isMoRef(openapi.HyperflexNamedVlan{}) {
										cmd.Flags().String("ExtbTraffic", "", "ExtbTraffic")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var FeatureLimitEntries with unknown data type []HyperflexFeatureLimitEntry

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship

									cmd := &cobra.Command{
										Use: "featurelimitexternal",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.CreateHyperflexFeatureLimitExternal(authCtx)

											body := openapi.NewHyperflexFeatureLimitExternal()

											//Set class id and object type by default
											body.ClassId = "hyperflex.FeatureLimitExternal"
											body.ObjectType = "hyperflex.FeatureLimitExternal"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "AppCatalog") && isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
												if f, err := cmd.Flags().GetString("AppCatalog"); err == nil {
													paramVal := openapi.HyperflexAppCatalogRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.AppCatalog = &paramVal
														//                                if v, ok := v.(openapi.HyperflexAppCatalogRelationship); ok {
														//                                    body.AppCatalog = &v
														//                                }
													}
												}
											}

											req = req.HyperflexFeatureLimitExternal(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'hyperflex.FeatureLimitExternal' resource.",
										Long: `Create a 'hyperflex.FeatureLimitExternal' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship
									if isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
										cmd.Flags().String("AppCatalog", "", "AppCatalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var FeatureLimitEntries with unknown data type []HyperflexFeatureLimitEntry

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship

									cmd := &cobra.Command{
										Use: "featurelimitinternal",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.CreateHyperflexFeatureLimitInternal(authCtx)

											body := openapi.NewHyperflexFeatureLimitInternal()

											//Set class id and object type by default
											body.ClassId = "hyperflex.FeatureLimitInternal"
											body.ObjectType = "hyperflex.FeatureLimitInternal"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "AppCatalog") && isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
												if f, err := cmd.Flags().GetString("AppCatalog"); err == nil {
													paramVal := openapi.HyperflexAppCatalogRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.AppCatalog = &paramVal
														//                                if v, ok := v.(openapi.HyperflexAppCatalogRelationship); ok {
														//                                    body.AppCatalog = &v
														//                                }
													}
												}
											}

											req = req.HyperflexFeatureLimitInternal(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'hyperflex.FeatureLimitInternal' resource.",
										Long: `Create a 'hyperflex.FeatureLimitInternal' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship
									if isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
										cmd.Flags().String("AppCatalog", "", "AppCatalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Version string

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship

									cmd := &cobra.Command{
										Use: "hxdpversion",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.CreateHyperflexHxdpVersion(authCtx)

											body := openapi.NewHyperflexHxdpVersion()

											//Set class id and object type by default
											body.ClassId = "hyperflex.HxdpVersion"
											body.ObjectType = "hyperflex.HxdpVersion"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Version") {
												body.Version = &Version
											}

											if isFlagPassed(cmd.Flags(), "AppCatalog") && isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
												if f, err := cmd.Flags().GetString("AppCatalog"); err == nil {
													paramVal := openapi.HyperflexAppCatalogRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.AppCatalog = &paramVal
														//                                if v, ok := v.(openapi.HyperflexAppCatalogRelationship); ok {
														//                                    body.AppCatalog = &v
														//                                }
													}
												}
											}

											req = req.HyperflexHxdpVersion(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'hyperflex.HxdpVersion' resource.",
										Long: `Create a 'hyperflex.HxdpVersion' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship
									if isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
										cmd.Flags().String("AppCatalog", "", "AppCatalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var FactoryHypervisorPassword bool

									var HxdpRootPwd string

									var HypervisorAdmin string

									var HypervisorAdminPwd string

									var IsHxdpRootPwdSet bool

									var IsHypervisorAdminPwdSet bool

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "localcredentialpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.CreateHyperflexLocalCredentialPolicy(authCtx)

											body := openapi.NewHyperflexLocalCredentialPolicy()

											//Set class id and object type by default
											body.ClassId = "hyperflex.LocalCredentialPolicy"
											body.ObjectType = "hyperflex.LocalCredentialPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "FactoryHypervisorPassword") {
												body.FactoryHypervisorPassword = &FactoryHypervisorPassword
											}

											if isFlagPassed(cmd.Flags(), "HxdpRootPwd") {
												body.HxdpRootPwd = &HxdpRootPwd
											}

											if isFlagPassed(cmd.Flags(), "HypervisorAdmin") {
												body.HypervisorAdmin = &HypervisorAdmin
											}

											if isFlagPassed(cmd.Flags(), "HypervisorAdminPwd") {
												body.HypervisorAdminPwd = &HypervisorAdminPwd
											}

											if isFlagPassed(cmd.Flags(), "IsHxdpRootPwdSet") {
												body.IsHxdpRootPwdSet = &IsHxdpRootPwdSet
											}

											if isFlagPassed(cmd.Flags(), "IsHypervisorAdminPwdSet") {
												body.IsHypervisorAdminPwdSet = &IsHypervisorAdminPwdSet
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.HyperflexLocalCredentialPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'hyperflex.LocalCredentialPolicy' resource.",
										Long: `Create a 'hyperflex.LocalCredentialPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&FactoryHypervisorPassword, "FactoryHypervisorPassword", false, "FactoryHypervisorPassword")

									cmd.Flags().StringVar(&HxdpRootPwd, "HxdpRootPwd", "", "HxdpRootPwd")

									cmd.Flags().StringVar(&HypervisorAdmin, "HypervisorAdmin", "", "HypervisorAdmin")

									cmd.Flags().StringVar(&HypervisorAdminPwd, "HypervisorAdminPwd", "", "HypervisorAdminPwd")

									cmd.Flags().BoolVar(&IsHxdpRootPwdSet, "IsHxdpRootPwdSet", false, "IsHxdpRootPwdSet")

									cmd.Flags().BoolVar(&IsHypervisorAdminPwdSet, "IsHypervisorAdminPwdSet", false, "IsHypervisorAdminPwdSet")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var DataIpRange with unknown data type HyperflexIpAddrRange

									//Skipping var HxdpIpRange with unknown data type HyperflexIpAddrRange

									//Skipping var MgmtIpRange with unknown data type HyperflexIpAddrRange

									var NodeNamePrefix string

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "nodeconfigpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.CreateHyperflexNodeConfigPolicy(authCtx)

											body := openapi.NewHyperflexNodeConfigPolicy()

											//Set class id and object type by default
											body.ClassId = "hyperflex.NodeConfigPolicy"
											body.ObjectType = "hyperflex.NodeConfigPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "DataIpRange") && isMoRef(openapi.HyperflexIpAddrRange{}) {
												if f, err := cmd.Flags().GetString("DataIpRange"); err == nil {
													paramVal := openapi.HyperflexIpAddrRange{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.DataIpRange = &paramVal
														//                                if v, ok := v.(openapi.HyperflexIpAddrRange); ok {
														//                                    body.DataIpRange = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "HxdpIpRange") && isMoRef(openapi.HyperflexIpAddrRange{}) {
												if f, err := cmd.Flags().GetString("HxdpIpRange"); err == nil {
													paramVal := openapi.HyperflexIpAddrRange{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.HxdpIpRange = &paramVal
														//                                if v, ok := v.(openapi.HyperflexIpAddrRange); ok {
														//                                    body.HxdpIpRange = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "MgmtIpRange") && isMoRef(openapi.HyperflexIpAddrRange{}) {
												if f, err := cmd.Flags().GetString("MgmtIpRange"); err == nil {
													paramVal := openapi.HyperflexIpAddrRange{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.MgmtIpRange = &paramVal
														//                                if v, ok := v.(openapi.HyperflexIpAddrRange); ok {
														//                                    body.MgmtIpRange = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "NodeNamePrefix") {
												body.NodeNamePrefix = &NodeNamePrefix
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.HyperflexNodeConfigPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'hyperflex.NodeConfigPolicy' resource.",
										Long: `Create a 'hyperflex.NodeConfigPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var DataIpRange with unknown data type HyperflexIpAddrRange
									if isMoRef(openapi.HyperflexIpAddrRange{}) {
										cmd.Flags().String("DataIpRange", "", "DataIpRange")
									}

									//Skipping var HxdpIpRange with unknown data type HyperflexIpAddrRange
									if isMoRef(openapi.HyperflexIpAddrRange{}) {
										cmd.Flags().String("HxdpIpRange", "", "HxdpIpRange")
									}

									//Skipping var MgmtIpRange with unknown data type HyperflexIpAddrRange
									if isMoRef(openapi.HyperflexIpAddrRange{}) {
										cmd.Flags().String("MgmtIpRange", "", "MgmtIpRange")
									}

									cmd.Flags().StringVar(&NodeNamePrefix, "NodeNamePrefix", "", "NodeNamePrefix")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Type string

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship

									var HxdpDataIp string

									var HxdpMgmtIp string

									var HypervisorDataIp string

									var HypervisorMgmtIp string

									//Skipping var AssignedServer with unknown data type ComputeRackUnitRelationship

									//Skipping var ClusterProfile with unknown data type HyperflexClusterProfileRelationship

									cmd := &cobra.Command{
										Use: "nodeprofile",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.CreateHyperflexNodeProfile(authCtx)

											body := openapi.NewHyperflexNodeProfile()

											//Set class id and object type by default
											body.ClassId = "hyperflex.NodeProfile"
											body.ObjectType = "hyperflex.NodeProfile"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Type") {
												body.Type = &Type
											}

											if isFlagPassed(cmd.Flags(), "SrcTemplate") && isMoRef(openapi.PolicyAbstractProfileRelationship{}) {
												if f, err := cmd.Flags().GetString("SrcTemplate"); err == nil {
													paramVal := openapi.PolicyAbstractProfileRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.SrcTemplate = &paramVal
														//                                if v, ok := v.(openapi.PolicyAbstractProfileRelationship); ok {
														//                                    body.SrcTemplate = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "HxdpDataIp") {
												body.HxdpDataIp = &HxdpDataIp
											}

											if isFlagPassed(cmd.Flags(), "HxdpMgmtIp") {
												body.HxdpMgmtIp = &HxdpMgmtIp
											}

											if isFlagPassed(cmd.Flags(), "HypervisorDataIp") {
												body.HypervisorDataIp = &HypervisorDataIp
											}

											if isFlagPassed(cmd.Flags(), "HypervisorMgmtIp") {
												body.HypervisorMgmtIp = &HypervisorMgmtIp
											}

											if isFlagPassed(cmd.Flags(), "AssignedServer") && isMoRef(openapi.ComputeRackUnitRelationship{}) {
												if f, err := cmd.Flags().GetString("AssignedServer"); err == nil {
													paramVal := openapi.ComputeRackUnitRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.AssignedServer = &paramVal
														//                                if v, ok := v.(openapi.ComputeRackUnitRelationship); ok {
														//                                    body.AssignedServer = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ClusterProfile") && isMoRef(openapi.HyperflexClusterProfileRelationship{}) {
												if f, err := cmd.Flags().GetString("ClusterProfile"); err == nil {
													paramVal := openapi.HyperflexClusterProfileRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ClusterProfile = &paramVal
														//                                if v, ok := v.(openapi.HyperflexClusterProfileRelationship); ok {
														//                                    body.ClusterProfile = &v
														//                                }
													}
												}
											}

											req = req.HyperflexNodeProfile(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'hyperflex.NodeProfile' resource.",
										Long: `Create a 'hyperflex.NodeProfile' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship
									if isMoRef(openapi.PolicyAbstractProfileRelationship{}) {
										cmd.Flags().String("SrcTemplate", "", "SrcTemplate")
									}

									cmd.Flags().StringVar(&HxdpDataIp, "HxdpDataIp", "", "HxdpDataIp")

									cmd.Flags().StringVar(&HxdpMgmtIp, "HxdpMgmtIp", "", "HxdpMgmtIp")

									cmd.Flags().StringVar(&HypervisorDataIp, "HypervisorDataIp", "", "HypervisorDataIp")

									cmd.Flags().StringVar(&HypervisorMgmtIp, "HypervisorMgmtIp", "", "HypervisorMgmtIp")

									//Skipping var AssignedServer with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("AssignedServer", "", "AssignedServer")
									}

									//Skipping var ClusterProfile with unknown data type HyperflexClusterProfileRelationship
									if isMoRef(openapi.HyperflexClusterProfileRelationship{}) {
										cmd.Flags().String("ClusterProfile", "", "ClusterProfile")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Hostname string

									var IsPasswordSet bool

									var Password string

									//Skipping var Port with unknown data type int64

									var Username string

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "proxysettingpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.CreateHyperflexProxySettingPolicy(authCtx)

											body := openapi.NewHyperflexProxySettingPolicy()

											//Set class id and object type by default
											body.ClassId = "hyperflex.ProxySettingPolicy"
											body.ObjectType = "hyperflex.ProxySettingPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Hostname") {
												body.Hostname = &Hostname
											}

											if isFlagPassed(cmd.Flags(), "IsPasswordSet") {
												body.IsPasswordSet = &IsPasswordSet
											}

											if isFlagPassed(cmd.Flags(), "Password") {
												body.Password = &Password
											}

											if isFlagPassed(cmd.Flags(), "Username") {
												body.Username = &Username
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.HyperflexProxySettingPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'hyperflex.ProxySettingPolicy' resource.",
										Long: `Create a 'hyperflex.ProxySettingPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Hostname, "Hostname", "", "Hostname")

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									cmd.Flags().StringVar(&Username, "Username", "", "Username")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var ServerFirmwareVersionEntries with unknown data type []HyperflexServerFirmwareVersionEntry

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship

									cmd := &cobra.Command{
										Use: "serverfirmwareversion",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.CreateHyperflexServerFirmwareVersion(authCtx)

											body := openapi.NewHyperflexServerFirmwareVersion()

											//Set class id and object type by default
											body.ClassId = "hyperflex.ServerFirmwareVersion"
											body.ObjectType = "hyperflex.ServerFirmwareVersion"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "AppCatalog") && isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
												if f, err := cmd.Flags().GetString("AppCatalog"); err == nil {
													paramVal := openapi.HyperflexAppCatalogRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.AppCatalog = &paramVal
														//                                if v, ok := v.(openapi.HyperflexAppCatalogRelationship); ok {
														//                                    body.AppCatalog = &v
														//                                }
													}
												}
											}

											req = req.HyperflexServerFirmwareVersion(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'hyperflex.ServerFirmwareVersion' resource.",
										Long: `Create a 'hyperflex.ServerFirmwareVersion' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship
									if isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
										cmd.Flags().String("AppCatalog", "", "AppCatalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var ServerModelEntries with unknown data type []HyperflexServerModelEntry

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship

									cmd := &cobra.Command{
										Use: "servermodel",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.CreateHyperflexServerModel(authCtx)

											body := openapi.NewHyperflexServerModel()

											//Set class id and object type by default
											body.ClassId = "hyperflex.ServerModel"
											body.ObjectType = "hyperflex.ServerModel"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "AppCatalog") && isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
												if f, err := cmd.Flags().GetString("AppCatalog"); err == nil {
													paramVal := openapi.HyperflexAppCatalogRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.AppCatalog = &paramVal
														//                                if v, ok := v.(openapi.HyperflexAppCatalogRelationship); ok {
														//                                    body.AppCatalog = &v
														//                                }
													}
												}
											}

											req = req.HyperflexServerModel(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'hyperflex.ServerModel' resource.",
										Long: `Create a 'hyperflex.ServerModel' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship
									if isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
										cmd.Flags().String("AppCatalog", "", "AppCatalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var HxdpVersion string

									var HypervisorVersion string

									var ServerFirmwareVersion string

									var UpgradeTypes []string

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var HxdpVersionInfo with unknown data type SoftwareHyperflexDistributableRelationship

									//Skipping var HypervisorVersionInfo with unknown data type SoftwareHyperflexDistributableRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var ServerFirmwareVersionInfo with unknown data type FirmwareDistributableRelationship

									cmd := &cobra.Command{
										Use: "softwareversionpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.CreateHyperflexSoftwareVersionPolicy(authCtx)

											body := openapi.NewHyperflexSoftwareVersionPolicy()

											//Set class id and object type by default
											body.ClassId = "hyperflex.SoftwareVersionPolicy"
											body.ObjectType = "hyperflex.SoftwareVersionPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "HxdpVersion") {
												body.HxdpVersion = &HxdpVersion
											}

											if isFlagPassed(cmd.Flags(), "HypervisorVersion") {
												body.HypervisorVersion = &HypervisorVersion
											}

											if isFlagPassed(cmd.Flags(), "ServerFirmwareVersion") {
												body.ServerFirmwareVersion = &ServerFirmwareVersion
											}

											if isFlagPassed(cmd.Flags(), "UpgradeTypes") {
												body.UpgradeTypes = &UpgradeTypes
											}

											if isFlagPassed(cmd.Flags(), "HxdpVersionInfo") && isMoRef(openapi.SoftwareHyperflexDistributableRelationship{}) {
												if f, err := cmd.Flags().GetString("HxdpVersionInfo"); err == nil {
													paramVal := openapi.SoftwareHyperflexDistributableRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.HxdpVersionInfo = &paramVal
														//                                if v, ok := v.(openapi.SoftwareHyperflexDistributableRelationship); ok {
														//                                    body.HxdpVersionInfo = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "HypervisorVersionInfo") && isMoRef(openapi.SoftwareHyperflexDistributableRelationship{}) {
												if f, err := cmd.Flags().GetString("HypervisorVersionInfo"); err == nil {
													paramVal := openapi.SoftwareHyperflexDistributableRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.HypervisorVersionInfo = &paramVal
														//                                if v, ok := v.(openapi.SoftwareHyperflexDistributableRelationship); ok {
														//                                    body.HypervisorVersionInfo = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ServerFirmwareVersionInfo") && isMoRef(openapi.FirmwareDistributableRelationship{}) {
												if f, err := cmd.Flags().GetString("ServerFirmwareVersionInfo"); err == nil {
													paramVal := openapi.FirmwareDistributableRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ServerFirmwareVersionInfo = &paramVal
														//                                if v, ok := v.(openapi.FirmwareDistributableRelationship); ok {
														//                                    body.ServerFirmwareVersionInfo = &v
														//                                }
													}
												}
											}

											req = req.HyperflexSoftwareVersionPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'hyperflex.SoftwareVersionPolicy' resource.",
										Long: `Create a 'hyperflex.SoftwareVersionPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&HxdpVersion, "HxdpVersion", "", "HxdpVersion")

									cmd.Flags().StringVar(&HypervisorVersion, "HypervisorVersion", "", "HypervisorVersion")

									cmd.Flags().StringVar(&ServerFirmwareVersion, "ServerFirmwareVersion", "", "ServerFirmwareVersion")

									cmd.Flags().StringSliceVar(&UpgradeTypes, "UpgradeTypes", []string{}, "UpgradeTypes")

									//Skipping var HxdpVersionInfo with unknown data type SoftwareHyperflexDistributableRelationship
									if isMoRef(openapi.SoftwareHyperflexDistributableRelationship{}) {
										cmd.Flags().String("HxdpVersionInfo", "", "HxdpVersionInfo")
									}

									//Skipping var HypervisorVersionInfo with unknown data type SoftwareHyperflexDistributableRelationship
									if isMoRef(openapi.SoftwareHyperflexDistributableRelationship{}) {
										cmd.Flags().String("HypervisorVersionInfo", "", "HypervisorVersionInfo")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									//Skipping var ServerFirmwareVersionInfo with unknown data type FirmwareDistributableRelationship
									if isMoRef(openapi.FirmwareDistributableRelationship{}) {
										cmd.Flags().String("ServerFirmwareVersionInfo", "", "ServerFirmwareVersionInfo")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var DnsDomainName string

									var DnsServers []string

									var NtpServers []string

									var Timezone string

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "sysconfigpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.CreateHyperflexSysConfigPolicy(authCtx)

											body := openapi.NewHyperflexSysConfigPolicy()

											//Set class id and object type by default
											body.ClassId = "hyperflex.SysConfigPolicy"
											body.ObjectType = "hyperflex.SysConfigPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "DnsDomainName") {
												body.DnsDomainName = &DnsDomainName
											}

											if isFlagPassed(cmd.Flags(), "DnsServers") {
												body.DnsServers = &DnsServers
											}

											if isFlagPassed(cmd.Flags(), "NtpServers") {
												body.NtpServers = &NtpServers
											}

											if isFlagPassed(cmd.Flags(), "Timezone") {
												body.Timezone = &Timezone
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.HyperflexSysConfigPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'hyperflex.SysConfigPolicy' resource.",
										Long: `Create a 'hyperflex.SysConfigPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&DnsDomainName, "DnsDomainName", "", "DnsDomainName")

									cmd.Flags().StringSliceVar(&DnsServers, "DnsServers", []string{}, "DnsServers")

									cmd.Flags().StringSliceVar(&NtpServers, "NtpServers", []string{}, "NtpServers")

									cmd.Flags().StringVar(&Timezone, "Timezone", "", "Timezone")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var KvmIpRange with unknown data type HyperflexIpAddrRange

									//Skipping var MacPrefixRange with unknown data type HyperflexMacAddrPrefixRange

									var ServerFirmwareVersion string

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "ucsmconfigpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.CreateHyperflexUcsmConfigPolicy(authCtx)

											body := openapi.NewHyperflexUcsmConfigPolicy()

											//Set class id and object type by default
											body.ClassId = "hyperflex.UcsmConfigPolicy"
											body.ObjectType = "hyperflex.UcsmConfigPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "KvmIpRange") && isMoRef(openapi.HyperflexIpAddrRange{}) {
												if f, err := cmd.Flags().GetString("KvmIpRange"); err == nil {
													paramVal := openapi.HyperflexIpAddrRange{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.KvmIpRange = &paramVal
														//                                if v, ok := v.(openapi.HyperflexIpAddrRange); ok {
														//                                    body.KvmIpRange = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "MacPrefixRange") && isMoRef(openapi.HyperflexMacAddrPrefixRange{}) {
												if f, err := cmd.Flags().GetString("MacPrefixRange"); err == nil {
													paramVal := openapi.HyperflexMacAddrPrefixRange{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.MacPrefixRange = &paramVal
														//                                if v, ok := v.(openapi.HyperflexMacAddrPrefixRange); ok {
														//                                    body.MacPrefixRange = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ServerFirmwareVersion") {
												body.ServerFirmwareVersion = &ServerFirmwareVersion
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.HyperflexUcsmConfigPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'hyperflex.UcsmConfigPolicy' resource.",
										Long: `Create a 'hyperflex.UcsmConfigPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var KvmIpRange with unknown data type HyperflexIpAddrRange
									if isMoRef(openapi.HyperflexIpAddrRange{}) {
										cmd.Flags().String("KvmIpRange", "", "KvmIpRange")
									}

									//Skipping var MacPrefixRange with unknown data type HyperflexMacAddrPrefixRange
									if isMoRef(openapi.HyperflexMacAddrPrefixRange{}) {
										cmd.Flags().String("MacPrefixRange", "", "MacPrefixRange")
									}

									cmd.Flags().StringVar(&ServerFirmwareVersion, "ServerFirmwareVersion", "", "ServerFirmwareVersion")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Version string

									//Skipping var FeatureLimitExternal with unknown data type HyperflexFeatureLimitExternalRelationship

									//Skipping var FeatureLimitInternal with unknown data type HyperflexFeatureLimitInternalRelationship

									//Skipping var HxdpVersions with unknown data type []HyperflexHxdpVersionRelationship

									//Skipping var HyperflexCapabilityInfos with unknown data type []HyperflexCapabilityInfoRelationship

									//Skipping var HyperflexSoftwareCompatibilityInfos with unknown data type []HclHyperflexSoftwareCompatibilityInfoRelationship

									//Skipping var ServerFirmwareVersion with unknown data type HyperflexServerFirmwareVersionRelationship

									//Skipping var ServerModel with unknown data type HyperflexServerModelRelationship

									cmd := &cobra.Command{
										Use: "updatehyperflexappcatalog",

										Short: "Update a 'hyperflex.AppCatalog' resource.",
										Long: `Update a 'hyperflex.AppCatalog' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.UpdateHyperflexAppCatalog(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									//Skipping var FeatureLimitExternal with unknown data type HyperflexFeatureLimitExternalRelationship
									if isMoRef(openapi.HyperflexFeatureLimitExternalRelationship{}) {
										cmd.Flags().String("FeatureLimitExternal", "", "FeatureLimitExternal")
									}

									//Skipping var FeatureLimitInternal with unknown data type HyperflexFeatureLimitInternalRelationship
									if isMoRef(openapi.HyperflexFeatureLimitInternalRelationship{}) {
										cmd.Flags().String("FeatureLimitInternal", "", "FeatureLimitInternal")
									}

									//Skipping var ServerFirmwareVersion with unknown data type HyperflexServerFirmwareVersionRelationship
									if isMoRef(openapi.HyperflexServerFirmwareVersionRelationship{}) {
										cmd.Flags().String("ServerFirmwareVersion", "", "ServerFirmwareVersion")
									}

									//Skipping var ServerModel with unknown data type HyperflexServerModelRelationship
									if isMoRef(openapi.HyperflexServerModelRelationship{}) {
										cmd.Flags().String("ServerModel", "", "ServerModel")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var AdminState bool

									var ServiceTicketReceipient string

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "updatehyperflexautosupportpolicy",

										Short: "Update a 'hyperflex.AutoSupportPolicy' resource.",
										Long: `Update a 'hyperflex.AutoSupportPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.UpdateHyperflexAutoSupportPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&AdminState, "AdminState", false, "AdminState")

									cmd.Flags().StringVar(&ServiceTicketReceipient, "ServiceTicketReceipient", "", "ServiceTicketReceipient")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var CapabilityConstraints with unknown data type []HclConstraint

									var Name string

									var Value string

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship

									cmd := &cobra.Command{
										Use: "updatehyperflexcapabilityinfo",

										Short: "Update a 'hyperflex.CapabilityInfo' resource.",
										Long: `Update a 'hyperflex.CapabilityInfo' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.UpdateHyperflexCapabilityInfo(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Value, "Value", "", "Value")

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship
									if isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
										cmd.Flags().String("AppCatalog", "", "AppCatalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var CapacityRunway with unknown data type int64

									var ClusterName string

									//Skipping var ClusterType with unknown data type int64

									var ClusterUuid string

									//Skipping var ComputeNodeCount with unknown data type int64

									//Skipping var ConvergedNodeCount with unknown data type int64

									var DeploymentType string

									var DeviceId string

									//Skipping var FltAggr with unknown data type int64

									var HxVersion string

									var HxdpBuildVersion string

									var HypervisorType string

									var HypervisorVersion string

									//Skipping var Summary with unknown data type HyperflexSummary

									//Skipping var UtilizationPercentage with unknown data type float32

									//Skipping var UtilizationTrendPercentage with unknown data type float32

									//Skipping var VmCount with unknown data type int64

									//Skipping var Alarm with unknown data type []HyperflexAlarmRelationship

									//Skipping var Health with unknown data type HyperflexHealthRelationship

									//Skipping var Nodes with unknown data type []HyperflexNodeRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatehyperflexcluster",

										Short: "Update a 'hyperflex.Cluster' resource.",
										Long: `Update a 'hyperflex.Cluster' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.UpdateHyperflexCluster(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&ClusterName, "ClusterName", "", "ClusterName")

									cmd.Flags().StringVar(&ClusterUuid, "ClusterUuid", "", "ClusterUuid")

									cmd.Flags().StringVar(&DeploymentType, "DeploymentType", "", "DeploymentType")

									cmd.Flags().StringVar(&DeviceId, "DeviceId", "", "DeviceId")

									cmd.Flags().StringVar(&HxVersion, "HxVersion", "", "HxVersion")

									cmd.Flags().StringVar(&HxdpBuildVersion, "HxdpBuildVersion", "", "HxdpBuildVersion")

									cmd.Flags().StringVar(&HypervisorType, "HypervisorType", "", "HypervisorType")

									cmd.Flags().StringVar(&HypervisorVersion, "HypervisorVersion", "", "HypervisorVersion")

									//Skipping var Summary with unknown data type HyperflexSummary
									if isMoRef(openapi.HyperflexSummary{}) {
										cmd.Flags().String("Summary", "", "Summary")
									}

									//Skipping var Health with unknown data type HyperflexHealthRelationship
									if isMoRef(openapi.HyperflexHealthRelationship{}) {
										cmd.Flags().String("Health", "", "Health")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var JumboFrame bool

									//Skipping var KvmIpRange with unknown data type HyperflexIpAddrRange

									//Skipping var MacPrefixRange with unknown data type HyperflexMacAddrPrefixRange

									//Skipping var MgmtVlan with unknown data type HyperflexNamedVlan

									var UplinkSpeed string

									//Skipping var VmMigrationVlan with unknown data type HyperflexNamedVlan

									//Skipping var VmNetworkVlans with unknown data type []HyperflexNamedVlan

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "updatehyperflexclusternetworkpolicy",

										Short: "Update a 'hyperflex.ClusterNetworkPolicy' resource.",
										Long: `Update a 'hyperflex.ClusterNetworkPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.UpdateHyperflexClusterNetworkPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&JumboFrame, "JumboFrame", false, "JumboFrame")

									//Skipping var KvmIpRange with unknown data type HyperflexIpAddrRange
									if isMoRef(openapi.HyperflexIpAddrRange{}) {
										cmd.Flags().String("KvmIpRange", "", "KvmIpRange")
									}

									//Skipping var MacPrefixRange with unknown data type HyperflexMacAddrPrefixRange
									if isMoRef(openapi.HyperflexMacAddrPrefixRange{}) {
										cmd.Flags().String("MacPrefixRange", "", "MacPrefixRange")
									}

									//Skipping var MgmtVlan with unknown data type HyperflexNamedVlan
									if isMoRef(openapi.HyperflexNamedVlan{}) {
										cmd.Flags().String("MgmtVlan", "", "MgmtVlan")
									}

									cmd.Flags().StringVar(&UplinkSpeed, "UplinkSpeed", "", "UplinkSpeed")

									//Skipping var VmMigrationVlan with unknown data type HyperflexNamedVlan
									if isMoRef(openapi.HyperflexNamedVlan{}) {
										cmd.Flags().String("VmMigrationVlan", "", "VmMigrationVlan")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Type string

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship

									var Action string

									//Skipping var ConfigContext with unknown data type PolicyConfigContext

									var DataIpAddress string

									var HypervisorType string

									var MacAddressPrefix string

									var MgmtIpAddress string

									var MgmtPlatform string

									//Skipping var Replication with unknown data type int64

									//Skipping var StorageDataVlan with unknown data type HyperflexNamedVlan

									var WwxnPrefix string

									//Skipping var AssociatedCluster with unknown data type HyperflexClusterRelationship

									//Skipping var AutoSupport with unknown data type HyperflexAutoSupportPolicyRelationship

									//Skipping var ClusterNetwork with unknown data type HyperflexClusterNetworkPolicyRelationship

									//Skipping var ClusterStorage with unknown data type HyperflexClusterStoragePolicyRelationship

									//Skipping var ConfigResult with unknown data type HyperflexConfigResultRelationship

									//Skipping var ExtFcStorage with unknown data type HyperflexExtFcStoragePolicyRelationship

									//Skipping var ExtIscsiStorage with unknown data type HyperflexExtIscsiStoragePolicyRelationship

									//Skipping var LocalCredential with unknown data type HyperflexLocalCredentialPolicyRelationship

									//Skipping var NodeConfig with unknown data type HyperflexNodeConfigPolicyRelationship

									//Skipping var NodeProfileConfig with unknown data type []HyperflexNodeProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var ProxySetting with unknown data type HyperflexProxySettingPolicyRelationship

									//Skipping var RunningWorkflows with unknown data type []WorkflowWorkflowInfoRelationship

									//Skipping var SoftwareVersion with unknown data type HyperflexSoftwareVersionPolicyRelationship

									//Skipping var SysConfig with unknown data type HyperflexSysConfigPolicyRelationship

									//Skipping var UcsmConfig with unknown data type HyperflexUcsmConfigPolicyRelationship

									//Skipping var VcenterConfig with unknown data type HyperflexVcenterConfigPolicyRelationship

									cmd := &cobra.Command{
										Use: "updatehyperflexclusterprofile",

										Short: "Update a 'hyperflex.ClusterProfile' resource.",
										Long: `Update a 'hyperflex.ClusterProfile' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.UpdateHyperflexClusterProfile(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship
									if isMoRef(openapi.PolicyAbstractProfileRelationship{}) {
										cmd.Flags().String("SrcTemplate", "", "SrcTemplate")
									}

									cmd.Flags().StringVar(&Action, "Action", "", "Action")

									//Skipping var ConfigContext with unknown data type PolicyConfigContext
									if isMoRef(openapi.PolicyConfigContext{}) {
										cmd.Flags().String("ConfigContext", "", "ConfigContext")
									}

									cmd.Flags().StringVar(&DataIpAddress, "DataIpAddress", "", "DataIpAddress")

									cmd.Flags().StringVar(&HypervisorType, "HypervisorType", "", "HypervisorType")

									cmd.Flags().StringVar(&MacAddressPrefix, "MacAddressPrefix", "", "MacAddressPrefix")

									cmd.Flags().StringVar(&MgmtIpAddress, "MgmtIpAddress", "", "MgmtIpAddress")

									cmd.Flags().StringVar(&MgmtPlatform, "MgmtPlatform", "", "MgmtPlatform")

									//Skipping var StorageDataVlan with unknown data type HyperflexNamedVlan
									if isMoRef(openapi.HyperflexNamedVlan{}) {
										cmd.Flags().String("StorageDataVlan", "", "StorageDataVlan")
									}

									cmd.Flags().StringVar(&WwxnPrefix, "WwxnPrefix", "", "WwxnPrefix")

									//Skipping var AssociatedCluster with unknown data type HyperflexClusterRelationship
									if isMoRef(openapi.HyperflexClusterRelationship{}) {
										cmd.Flags().String("AssociatedCluster", "", "AssociatedCluster")
									}

									//Skipping var AutoSupport with unknown data type HyperflexAutoSupportPolicyRelationship
									if isMoRef(openapi.HyperflexAutoSupportPolicyRelationship{}) {
										cmd.Flags().String("AutoSupport", "", "AutoSupport")
									}

									//Skipping var ClusterNetwork with unknown data type HyperflexClusterNetworkPolicyRelationship
									if isMoRef(openapi.HyperflexClusterNetworkPolicyRelationship{}) {
										cmd.Flags().String("ClusterNetwork", "", "ClusterNetwork")
									}

									//Skipping var ClusterStorage with unknown data type HyperflexClusterStoragePolicyRelationship
									if isMoRef(openapi.HyperflexClusterStoragePolicyRelationship{}) {
										cmd.Flags().String("ClusterStorage", "", "ClusterStorage")
									}

									//Skipping var ConfigResult with unknown data type HyperflexConfigResultRelationship
									if isMoRef(openapi.HyperflexConfigResultRelationship{}) {
										cmd.Flags().String("ConfigResult", "", "ConfigResult")
									}

									//Skipping var ExtFcStorage with unknown data type HyperflexExtFcStoragePolicyRelationship
									if isMoRef(openapi.HyperflexExtFcStoragePolicyRelationship{}) {
										cmd.Flags().String("ExtFcStorage", "", "ExtFcStorage")
									}

									//Skipping var ExtIscsiStorage with unknown data type HyperflexExtIscsiStoragePolicyRelationship
									if isMoRef(openapi.HyperflexExtIscsiStoragePolicyRelationship{}) {
										cmd.Flags().String("ExtIscsiStorage", "", "ExtIscsiStorage")
									}

									//Skipping var LocalCredential with unknown data type HyperflexLocalCredentialPolicyRelationship
									if isMoRef(openapi.HyperflexLocalCredentialPolicyRelationship{}) {
										cmd.Flags().String("LocalCredential", "", "LocalCredential")
									}

									//Skipping var NodeConfig with unknown data type HyperflexNodeConfigPolicyRelationship
									if isMoRef(openapi.HyperflexNodeConfigPolicyRelationship{}) {
										cmd.Flags().String("NodeConfig", "", "NodeConfig")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									//Skipping var ProxySetting with unknown data type HyperflexProxySettingPolicyRelationship
									if isMoRef(openapi.HyperflexProxySettingPolicyRelationship{}) {
										cmd.Flags().String("ProxySetting", "", "ProxySetting")
									}

									//Skipping var SoftwareVersion with unknown data type HyperflexSoftwareVersionPolicyRelationship
									if isMoRef(openapi.HyperflexSoftwareVersionPolicyRelationship{}) {
										cmd.Flags().String("SoftwareVersion", "", "SoftwareVersion")
									}

									//Skipping var SysConfig with unknown data type HyperflexSysConfigPolicyRelationship
									if isMoRef(openapi.HyperflexSysConfigPolicyRelationship{}) {
										cmd.Flags().String("SysConfig", "", "SysConfig")
									}

									//Skipping var UcsmConfig with unknown data type HyperflexUcsmConfigPolicyRelationship
									if isMoRef(openapi.HyperflexUcsmConfigPolicyRelationship{}) {
										cmd.Flags().String("UcsmConfig", "", "UcsmConfig")
									}

									//Skipping var VcenterConfig with unknown data type HyperflexVcenterConfigPolicyRelationship
									if isMoRef(openapi.HyperflexVcenterConfigPolicyRelationship{}) {
										cmd.Flags().String("VcenterConfig", "", "VcenterConfig")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var DiskPartitionCleanup bool

									//Skipping var LogicalAvalabilityZoneConfig with unknown data type HyperflexLogicalAvailabilityZone

									var VdiOptimization bool

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "updatehyperflexclusterstoragepolicy",

										Short: "Update a 'hyperflex.ClusterStoragePolicy' resource.",
										Long: `Update a 'hyperflex.ClusterStoragePolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.UpdateHyperflexClusterStoragePolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&DiskPartitionCleanup, "DiskPartitionCleanup", false, "DiskPartitionCleanup")

									//Skipping var LogicalAvalabilityZoneConfig with unknown data type HyperflexLogicalAvailabilityZone
									if isMoRef(openapi.HyperflexLogicalAvailabilityZone{}) {
										cmd.Flags().String("LogicalAvalabilityZoneConfig", "", "LogicalAvalabilityZoneConfig")
									}

									cmd.Flags().BoolVar(&VdiOptimization, "VdiOptimization", false, "VdiOptimization")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var AdminState bool

									//Skipping var ExtaTraffic with unknown data type HyperflexNamedVsan

									//Skipping var ExtbTraffic with unknown data type HyperflexNamedVsan

									//Skipping var WwxnPrefixRange with unknown data type HyperflexWwxnPrefixRange

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "updatehyperflexextfcstoragepolicy",

										Short: "Update a 'hyperflex.ExtFcStoragePolicy' resource.",
										Long: `Update a 'hyperflex.ExtFcStoragePolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.UpdateHyperflexExtFcStoragePolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&AdminState, "AdminState", false, "AdminState")

									//Skipping var ExtaTraffic with unknown data type HyperflexNamedVsan
									if isMoRef(openapi.HyperflexNamedVsan{}) {
										cmd.Flags().String("ExtaTraffic", "", "ExtaTraffic")
									}

									//Skipping var ExtbTraffic with unknown data type HyperflexNamedVsan
									if isMoRef(openapi.HyperflexNamedVsan{}) {
										cmd.Flags().String("ExtbTraffic", "", "ExtbTraffic")
									}

									//Skipping var WwxnPrefixRange with unknown data type HyperflexWwxnPrefixRange
									if isMoRef(openapi.HyperflexWwxnPrefixRange{}) {
										cmd.Flags().String("WwxnPrefixRange", "", "WwxnPrefixRange")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var AdminState bool

									//Skipping var ExtaTraffic with unknown data type HyperflexNamedVlan

									//Skipping var ExtbTraffic with unknown data type HyperflexNamedVlan

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "updatehyperflexextiscsistoragepolicy",

										Short: "Update a 'hyperflex.ExtIscsiStoragePolicy' resource.",
										Long: `Update a 'hyperflex.ExtIscsiStoragePolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.UpdateHyperflexExtIscsiStoragePolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&AdminState, "AdminState", false, "AdminState")

									//Skipping var ExtaTraffic with unknown data type HyperflexNamedVlan
									if isMoRef(openapi.HyperflexNamedVlan{}) {
										cmd.Flags().String("ExtaTraffic", "", "ExtaTraffic")
									}

									//Skipping var ExtbTraffic with unknown data type HyperflexNamedVlan
									if isMoRef(openapi.HyperflexNamedVlan{}) {
										cmd.Flags().String("ExtbTraffic", "", "ExtbTraffic")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var FeatureLimitEntries with unknown data type []HyperflexFeatureLimitEntry

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship

									cmd := &cobra.Command{
										Use: "updatehyperflexfeaturelimitexternal",

										Short: "Update a 'hyperflex.FeatureLimitExternal' resource.",
										Long: `Update a 'hyperflex.FeatureLimitExternal' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.UpdateHyperflexFeatureLimitExternal(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship
									if isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
										cmd.Flags().String("AppCatalog", "", "AppCatalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var FeatureLimitEntries with unknown data type []HyperflexFeatureLimitEntry

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship

									cmd := &cobra.Command{
										Use: "updatehyperflexfeaturelimitinternal",

										Short: "Update a 'hyperflex.FeatureLimitInternal' resource.",
										Long: `Update a 'hyperflex.FeatureLimitInternal' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.UpdateHyperflexFeatureLimitInternal(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship
									if isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
										cmd.Flags().String("AppCatalog", "", "AppCatalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Version string

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship

									cmd := &cobra.Command{
										Use: "updatehyperflexhxdpversion",

										Short: "Update a 'hyperflex.HxdpVersion' resource.",
										Long: `Update a 'hyperflex.HxdpVersion' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.UpdateHyperflexHxdpVersion(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship
									if isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
										cmd.Flags().String("AppCatalog", "", "AppCatalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var FactoryHypervisorPassword bool

									var HxdpRootPwd string

									var HypervisorAdmin string

									var HypervisorAdminPwd string

									var IsHxdpRootPwdSet bool

									var IsHypervisorAdminPwdSet bool

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "updatehyperflexlocalcredentialpolicy",

										Short: "Update a 'hyperflex.LocalCredentialPolicy' resource.",
										Long: `Update a 'hyperflex.LocalCredentialPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.UpdateHyperflexLocalCredentialPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&FactoryHypervisorPassword, "FactoryHypervisorPassword", false, "FactoryHypervisorPassword")

									cmd.Flags().StringVar(&HxdpRootPwd, "HxdpRootPwd", "", "HxdpRootPwd")

									cmd.Flags().StringVar(&HypervisorAdmin, "HypervisorAdmin", "", "HypervisorAdmin")

									cmd.Flags().StringVar(&HypervisorAdminPwd, "HypervisorAdminPwd", "", "HypervisorAdminPwd")

									cmd.Flags().BoolVar(&IsHxdpRootPwdSet, "IsHxdpRootPwdSet", false, "IsHxdpRootPwdSet")

									cmd.Flags().BoolVar(&IsHypervisorAdminPwdSet, "IsHypervisorAdminPwdSet", false, "IsHypervisorAdminPwdSet")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var DataIpRange with unknown data type HyperflexIpAddrRange

									//Skipping var HxdpIpRange with unknown data type HyperflexIpAddrRange

									//Skipping var MgmtIpRange with unknown data type HyperflexIpAddrRange

									var NodeNamePrefix string

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "updatehyperflexnodeconfigpolicy",

										Short: "Update a 'hyperflex.NodeConfigPolicy' resource.",
										Long: `Update a 'hyperflex.NodeConfigPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.UpdateHyperflexNodeConfigPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var DataIpRange with unknown data type HyperflexIpAddrRange
									if isMoRef(openapi.HyperflexIpAddrRange{}) {
										cmd.Flags().String("DataIpRange", "", "DataIpRange")
									}

									//Skipping var HxdpIpRange with unknown data type HyperflexIpAddrRange
									if isMoRef(openapi.HyperflexIpAddrRange{}) {
										cmd.Flags().String("HxdpIpRange", "", "HxdpIpRange")
									}

									//Skipping var MgmtIpRange with unknown data type HyperflexIpAddrRange
									if isMoRef(openapi.HyperflexIpAddrRange{}) {
										cmd.Flags().String("MgmtIpRange", "", "MgmtIpRange")
									}

									cmd.Flags().StringVar(&NodeNamePrefix, "NodeNamePrefix", "", "NodeNamePrefix")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Type string

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship

									var HxdpDataIp string

									var HxdpMgmtIp string

									var HypervisorDataIp string

									var HypervisorMgmtIp string

									//Skipping var AssignedServer with unknown data type ComputeRackUnitRelationship

									//Skipping var ClusterProfile with unknown data type HyperflexClusterProfileRelationship

									cmd := &cobra.Command{
										Use: "updatehyperflexnodeprofile",

										Short: "Update a 'hyperflex.NodeProfile' resource.",
										Long: `Update a 'hyperflex.NodeProfile' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.UpdateHyperflexNodeProfile(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship
									if isMoRef(openapi.PolicyAbstractProfileRelationship{}) {
										cmd.Flags().String("SrcTemplate", "", "SrcTemplate")
									}

									cmd.Flags().StringVar(&HxdpDataIp, "HxdpDataIp", "", "HxdpDataIp")

									cmd.Flags().StringVar(&HxdpMgmtIp, "HxdpMgmtIp", "", "HxdpMgmtIp")

									cmd.Flags().StringVar(&HypervisorDataIp, "HypervisorDataIp", "", "HypervisorDataIp")

									cmd.Flags().StringVar(&HypervisorMgmtIp, "HypervisorMgmtIp", "", "HypervisorMgmtIp")

									//Skipping var AssignedServer with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("AssignedServer", "", "AssignedServer")
									}

									//Skipping var ClusterProfile with unknown data type HyperflexClusterProfileRelationship
									if isMoRef(openapi.HyperflexClusterProfileRelationship{}) {
										cmd.Flags().String("ClusterProfile", "", "ClusterProfile")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Hostname string

									var IsPasswordSet bool

									var Password string

									//Skipping var Port with unknown data type int64

									var Username string

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "updatehyperflexproxysettingpolicy",

										Short: "Update a 'hyperflex.ProxySettingPolicy' resource.",
										Long: `Update a 'hyperflex.ProxySettingPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.UpdateHyperflexProxySettingPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Hostname, "Hostname", "", "Hostname")

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									cmd.Flags().StringVar(&Username, "Username", "", "Username")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var ServerFirmwareVersionEntries with unknown data type []HyperflexServerFirmwareVersionEntry

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship

									cmd := &cobra.Command{
										Use: "updatehyperflexserverfirmwareversion",

										Short: "Update a 'hyperflex.ServerFirmwareVersion' resource.",
										Long: `Update a 'hyperflex.ServerFirmwareVersion' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.UpdateHyperflexServerFirmwareVersion(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship
									if isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
										cmd.Flags().String("AppCatalog", "", "AppCatalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var ServerModelEntries with unknown data type []HyperflexServerModelEntry

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship

									cmd := &cobra.Command{
										Use: "updatehyperflexservermodel",

										Short: "Update a 'hyperflex.ServerModel' resource.",
										Long: `Update a 'hyperflex.ServerModel' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.UpdateHyperflexServerModel(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship
									if isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
										cmd.Flags().String("AppCatalog", "", "AppCatalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var HxdpVersion string

									var HypervisorVersion string

									var ServerFirmwareVersion string

									var UpgradeTypes []string

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var HxdpVersionInfo with unknown data type SoftwareHyperflexDistributableRelationship

									//Skipping var HypervisorVersionInfo with unknown data type SoftwareHyperflexDistributableRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var ServerFirmwareVersionInfo with unknown data type FirmwareDistributableRelationship

									cmd := &cobra.Command{
										Use: "updatehyperflexsoftwareversionpolicy",

										Short: "Update a 'hyperflex.SoftwareVersionPolicy' resource.",
										Long: `Update a 'hyperflex.SoftwareVersionPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.UpdateHyperflexSoftwareVersionPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&HxdpVersion, "HxdpVersion", "", "HxdpVersion")

									cmd.Flags().StringVar(&HypervisorVersion, "HypervisorVersion", "", "HypervisorVersion")

									cmd.Flags().StringVar(&ServerFirmwareVersion, "ServerFirmwareVersion", "", "ServerFirmwareVersion")

									cmd.Flags().StringSliceVar(&UpgradeTypes, "UpgradeTypes", []string{}, "UpgradeTypes")

									//Skipping var HxdpVersionInfo with unknown data type SoftwareHyperflexDistributableRelationship
									if isMoRef(openapi.SoftwareHyperflexDistributableRelationship{}) {
										cmd.Flags().String("HxdpVersionInfo", "", "HxdpVersionInfo")
									}

									//Skipping var HypervisorVersionInfo with unknown data type SoftwareHyperflexDistributableRelationship
									if isMoRef(openapi.SoftwareHyperflexDistributableRelationship{}) {
										cmd.Flags().String("HypervisorVersionInfo", "", "HypervisorVersionInfo")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									//Skipping var ServerFirmwareVersionInfo with unknown data type FirmwareDistributableRelationship
									if isMoRef(openapi.FirmwareDistributableRelationship{}) {
										cmd.Flags().String("ServerFirmwareVersionInfo", "", "ServerFirmwareVersionInfo")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var DnsDomainName string

									var DnsServers []string

									var NtpServers []string

									var Timezone string

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "updatehyperflexsysconfigpolicy",

										Short: "Update a 'hyperflex.SysConfigPolicy' resource.",
										Long: `Update a 'hyperflex.SysConfigPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.UpdateHyperflexSysConfigPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&DnsDomainName, "DnsDomainName", "", "DnsDomainName")

									cmd.Flags().StringSliceVar(&DnsServers, "DnsServers", []string{}, "DnsServers")

									cmd.Flags().StringSliceVar(&NtpServers, "NtpServers", []string{}, "NtpServers")

									cmd.Flags().StringVar(&Timezone, "Timezone", "", "Timezone")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var KvmIpRange with unknown data type HyperflexIpAddrRange

									//Skipping var MacPrefixRange with unknown data type HyperflexMacAddrPrefixRange

									var ServerFirmwareVersion string

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "updatehyperflexucsmconfigpolicy",

										Short: "Update a 'hyperflex.UcsmConfigPolicy' resource.",
										Long: `Update a 'hyperflex.UcsmConfigPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.UpdateHyperflexUcsmConfigPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var KvmIpRange with unknown data type HyperflexIpAddrRange
									if isMoRef(openapi.HyperflexIpAddrRange{}) {
										cmd.Flags().String("KvmIpRange", "", "KvmIpRange")
									}

									//Skipping var MacPrefixRange with unknown data type HyperflexMacAddrPrefixRange
									if isMoRef(openapi.HyperflexMacAddrPrefixRange{}) {
										cmd.Flags().String("MacPrefixRange", "", "MacPrefixRange")
									}

									cmd.Flags().StringVar(&ServerFirmwareVersion, "ServerFirmwareVersion", "", "ServerFirmwareVersion")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var DataCenter string

									var Hostname string

									var IsPasswordSet bool

									var Password string

									var SsoUrl string

									var Username string

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "updatehyperflexvcenterconfigpolicy",

										Short: "Update a 'hyperflex.VcenterConfigPolicy' resource.",
										Long: `Update a 'hyperflex.VcenterConfigPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.UpdateHyperflexVcenterConfigPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&DataCenter, "DataCenter", "", "DataCenter")

									cmd.Flags().StringVar(&Hostname, "Hostname", "", "Hostname")

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									cmd.Flags().StringVar(&SsoUrl, "SsoUrl", "", "SsoUrl")

									cmd.Flags().StringVar(&Username, "Username", "", "Username")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var DataCenter string

									var Hostname string

									var IsPasswordSet bool

									var Password string

									var SsoUrl string

									var Username string

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "vcenterconfigpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.CreateHyperflexVcenterConfigPolicy(authCtx)

											body := openapi.NewHyperflexVcenterConfigPolicy()

											//Set class id and object type by default
											body.ClassId = "hyperflex.VcenterConfigPolicy"
											body.ObjectType = "hyperflex.VcenterConfigPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "DataCenter") {
												body.DataCenter = &DataCenter
											}

											if isFlagPassed(cmd.Flags(), "Hostname") {
												body.Hostname = &Hostname
											}

											if isFlagPassed(cmd.Flags(), "IsPasswordSet") {
												body.IsPasswordSet = &IsPasswordSet
											}

											if isFlagPassed(cmd.Flags(), "Password") {
												body.Password = &Password
											}

											if isFlagPassed(cmd.Flags(), "SsoUrl") {
												body.SsoUrl = &SsoUrl
											}

											if isFlagPassed(cmd.Flags(), "Username") {
												body.Username = &Username
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.HyperflexVcenterConfigPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'hyperflex.VcenterConfigPolicy' resource.",
										Long: `Create a 'hyperflex.VcenterConfigPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&DataCenter, "DataCenter", "", "DataCenter")

									cmd.Flags().StringVar(&Hostname, "Hostname", "", "Hostname")

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									cmd.Flags().StringVar(&SsoUrl, "SsoUrl", "", "SsoUrl")

									cmd.Flags().StringVar(&Username, "Username", "", "Username")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "iaas",

								Short: "Create Iaas resource(s)",
								Long: `Create Iaas resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceId string

									var Guid string

									var HostName string

									var Ip string

									//Skipping var LastBackup with unknown data type time.Time

									var NodeType string

									var ProductName string

									var ProductVendor string

									var ProductVersion string

									var Status string

									//Skipping var ConnectorPack with unknown data type []IaasConnectorPackRelationship

									//Skipping var DeviceStatus with unknown data type []IaasDeviceStatusRelationship

									//Skipping var LicenseInfo with unknown data type IaasLicenseInfoRelationship

									//Skipping var MostRunTasks with unknown data type []IaasMostRunTasksRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var UcsdManagedInfra with unknown data type IaasUcsdManagedInfraRelationship

									cmd := &cobra.Command{
										Use: "updateiaasucsdinfo",

										Short: "Update a 'iaas.UcsdInfo' resource.",
										Long: `Update a 'iaas.UcsdInfo' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IaasApi.UpdateIaasUcsdInfo(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceId, "DeviceId", "", "DeviceId")

									cmd.Flags().StringVar(&Guid, "Guid", "", "Guid")

									cmd.Flags().StringVar(&HostName, "HostName", "", "HostName")

									cmd.Flags().StringVar(&Ip, "Ip", "", "Ip")

									cmd.Flags().StringVar(&NodeType, "NodeType", "", "NodeType")

									cmd.Flags().StringVar(&ProductName, "ProductName", "", "ProductName")

									cmd.Flags().StringVar(&ProductVendor, "ProductVendor", "", "ProductVendor")

									cmd.Flags().StringVar(&ProductVersion, "ProductVersion", "", "ProductVersion")

									cmd.Flags().StringVar(&Status, "Status", "", "Status")

									//Skipping var LicenseInfo with unknown data type IaasLicenseInfoRelationship
									if isMoRef(openapi.IaasLicenseInfoRelationship{}) {
										cmd.Flags().String("LicenseInfo", "", "LicenseInfo")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var UcsdManagedInfra with unknown data type IaasUcsdManagedInfraRelationship
									if isMoRef(openapi.IaasUcsdManagedInfraRelationship{}) {
										cmd.Flags().String("UcsdManagedInfra", "", "UcsdManagedInfra")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "iam",

								Short: "Create Iam resource(s)",
								Long: `Create Iam resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Name string

									var Status string

									//Skipping var AppRegistrations with unknown data type []IamAppRegistrationRelationship

									//Skipping var DomainGroups with unknown data type []IamDomainGroupRelationship

									//Skipping var EndPointRoles with unknown data type []IamEndPointRoleRelationship

									//Skipping var Idpreferences with unknown data type []IamIdpReferenceRelationship

									//Skipping var Idps with unknown data type []IamIdpRelationship

									//Skipping var Permissions with unknown data type []IamPermissionRelationship

									//Skipping var PrivilegeSets with unknown data type []IamPrivilegeSetRelationship

									//Skipping var Privileges with unknown data type []IamPrivilegeRelationship

									//Skipping var ResourceLimits with unknown data type IamResourceLimitsRelationship

									//Skipping var Roles with unknown data type []IamRoleRelationship

									//Skipping var SecurityHolder with unknown data type IamSecurityHolderRelationship

									//Skipping var SessionLimits with unknown data type IamSessionLimitsRelationship

									cmd := &cobra.Command{
										Use: "account",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.CreateIamAccount(authCtx)

											body := openapi.NewIamAccount()

											//Set class id and object type by default
											body.ClassId = "iam.Account"
											body.ObjectType = "iam.Account"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Status") {
												body.Status = &Status
											}

											if isFlagPassed(cmd.Flags(), "ResourceLimits") && isMoRef(openapi.IamResourceLimitsRelationship{}) {
												if f, err := cmd.Flags().GetString("ResourceLimits"); err == nil {
													paramVal := openapi.IamResourceLimitsRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ResourceLimits = &paramVal
														//                                if v, ok := v.(openapi.IamResourceLimitsRelationship); ok {
														//                                    body.ResourceLimits = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "SecurityHolder") && isMoRef(openapi.IamSecurityHolderRelationship{}) {
												if f, err := cmd.Flags().GetString("SecurityHolder"); err == nil {
													paramVal := openapi.IamSecurityHolderRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.SecurityHolder = &paramVal
														//                                if v, ok := v.(openapi.IamSecurityHolderRelationship); ok {
														//                                    body.SecurityHolder = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "SessionLimits") && isMoRef(openapi.IamSessionLimitsRelationship{}) {
												if f, err := cmd.Flags().GetString("SessionLimits"); err == nil {
													paramVal := openapi.IamSessionLimitsRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.SessionLimits = &paramVal
														//                                if v, ok := v.(openapi.IamSessionLimitsRelationship); ok {
														//                                    body.SessionLimits = &v
														//                                }
													}
												}
											}

											req = req.IamAccount(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'iam.Account' resource.",
										Long: `Create a 'iam.Account' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Status, "Status", "", "Status")

									//Skipping var ResourceLimits with unknown data type IamResourceLimitsRelationship
									if isMoRef(openapi.IamResourceLimitsRelationship{}) {
										cmd.Flags().String("ResourceLimits", "", "ResourceLimits")
									}

									//Skipping var SecurityHolder with unknown data type IamSecurityHolderRelationship
									if isMoRef(openapi.IamSecurityHolderRelationship{}) {
										cmd.Flags().String("SecurityHolder", "", "SecurityHolder")
									}

									//Skipping var SessionLimits with unknown data type IamSessionLimitsRelationship
									if isMoRef(openapi.IamSessionLimitsRelationship{}) {
										cmd.Flags().String("SessionLimits", "", "SessionLimits")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var HashAlgorithm string

									//Skipping var KeySpec with unknown data type PkixKeyGenerationSpec

									var PrivateKey string

									var Purpose string

									var SigningAlgorithm string

									//Skipping var Permission with unknown data type IamPermissionRelationship

									//Skipping var User with unknown data type IamUserRelationship

									cmd := &cobra.Command{
										Use: "apikey",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.CreateIamApiKey(authCtx)

											body := openapi.NewIamApiKey()

											//Set class id and object type by default
											body.ClassId = "iam.ApiKey"
											body.ObjectType = "iam.ApiKey"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "HashAlgorithm") {
												body.HashAlgorithm = &HashAlgorithm
											}

											if isFlagPassed(cmd.Flags(), "KeySpec") && isMoRef(openapi.PkixKeyGenerationSpec{}) {
												if f, err := cmd.Flags().GetString("KeySpec"); err == nil {
													paramVal := openapi.PkixKeyGenerationSpec{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.KeySpec = &paramVal
														//                                if v, ok := v.(openapi.PkixKeyGenerationSpec); ok {
														//                                    body.KeySpec = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "PrivateKey") {
												body.PrivateKey = &PrivateKey
											}

											if isFlagPassed(cmd.Flags(), "Purpose") {
												body.Purpose = &Purpose
											}

											if isFlagPassed(cmd.Flags(), "SigningAlgorithm") {
												body.SigningAlgorithm = &SigningAlgorithm
											}

											if isFlagPassed(cmd.Flags(), "Permission") && isMoRef(openapi.IamPermissionRelationship{}) {
												if f, err := cmd.Flags().GetString("Permission"); err == nil {
													paramVal := openapi.IamPermissionRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Permission = &paramVal
														//                                if v, ok := v.(openapi.IamPermissionRelationship); ok {
														//                                    body.Permission = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "User") && isMoRef(openapi.IamUserRelationship{}) {
												if f, err := cmd.Flags().GetString("User"); err == nil {
													paramVal := openapi.IamUserRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.User = &paramVal
														//                                if v, ok := v.(openapi.IamUserRelationship); ok {
														//                                    body.User = &v
														//                                }
													}
												}
											}

											req = req.IamApiKey(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'iam.ApiKey' resource.",
										Long: `Create a 'iam.ApiKey' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&HashAlgorithm, "HashAlgorithm", "", "HashAlgorithm")

									//Skipping var KeySpec with unknown data type PkixKeyGenerationSpec
									if isMoRef(openapi.PkixKeyGenerationSpec{}) {
										cmd.Flags().String("KeySpec", "", "KeySpec")
									}

									cmd.Flags().StringVar(&PrivateKey, "PrivateKey", "", "PrivateKey")

									cmd.Flags().StringVar(&Purpose, "Purpose", "", "Purpose")

									cmd.Flags().StringVar(&SigningAlgorithm, "SigningAlgorithm", "", "SigningAlgorithm")

									//Skipping var Permission with unknown data type IamPermissionRelationship
									if isMoRef(openapi.IamPermissionRelationship{}) {
										cmd.Flags().String("Permission", "", "Permission")
									}

									//Skipping var User with unknown data type IamUserRelationship
									if isMoRef(openapi.IamUserRelationship{}) {
										cmd.Flags().String("User", "", "User")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var ClientId string

									var ClientName string

									var ClientSecret string

									var ClientType string

									var Description string

									var GrantTypes []string

									var RedirectUris []string

									var RenewClientSecret bool

									var ResponseTypes []string

									//Skipping var RevocationTimestamp with unknown data type time.Time

									var Revoke bool

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var OauthTokens with unknown data type []IamOAuthTokenRelationship

									//Skipping var Permission with unknown data type IamPermissionRelationship

									//Skipping var Roles with unknown data type []IamRoleRelationship

									//Skipping var User with unknown data type IamUserRelationship

									cmd := &cobra.Command{
										Use: "appregistration",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.CreateIamAppRegistration(authCtx)

											body := openapi.NewIamAppRegistration()

											//Set class id and object type by default
											body.ClassId = "iam.AppRegistration"
											body.ObjectType = "iam.AppRegistration"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ClientId") {
												body.ClientId = &ClientId
											}

											if isFlagPassed(cmd.Flags(), "ClientName") {
												body.ClientName = &ClientName
											}

											if isFlagPassed(cmd.Flags(), "ClientSecret") {
												body.ClientSecret = &ClientSecret
											}

											if isFlagPassed(cmd.Flags(), "ClientType") {
												body.ClientType = &ClientType
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "GrantTypes") {
												body.GrantTypes = &GrantTypes
											}

											if isFlagPassed(cmd.Flags(), "RedirectUris") {
												body.RedirectUris = &RedirectUris
											}

											if isFlagPassed(cmd.Flags(), "RenewClientSecret") {
												body.RenewClientSecret = &RenewClientSecret
											}

											if isFlagPassed(cmd.Flags(), "ResponseTypes") {
												body.ResponseTypes = &ResponseTypes
											}

											if isFlagPassed(cmd.Flags(), "Revoke") {
												body.Revoke = &Revoke
											}

											if isFlagPassed(cmd.Flags(), "Account") && isMoRef(openapi.IamAccountRelationship{}) {
												if f, err := cmd.Flags().GetString("Account"); err == nil {
													paramVal := openapi.IamAccountRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Account = &paramVal
														//                                if v, ok := v.(openapi.IamAccountRelationship); ok {
														//                                    body.Account = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Permission") && isMoRef(openapi.IamPermissionRelationship{}) {
												if f, err := cmd.Flags().GetString("Permission"); err == nil {
													paramVal := openapi.IamPermissionRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Permission = &paramVal
														//                                if v, ok := v.(openapi.IamPermissionRelationship); ok {
														//                                    body.Permission = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "User") && isMoRef(openapi.IamUserRelationship{}) {
												if f, err := cmd.Flags().GetString("User"); err == nil {
													paramVal := openapi.IamUserRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.User = &paramVal
														//                                if v, ok := v.(openapi.IamUserRelationship); ok {
														//                                    body.User = &v
														//                                }
													}
												}
											}

											req = req.IamAppRegistration(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'iam.AppRegistration' resource.",
										Long: `Create a 'iam.AppRegistration' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&ClientId, "ClientId", "", "ClientId")

									cmd.Flags().StringVar(&ClientName, "ClientName", "", "ClientName")

									cmd.Flags().StringVar(&ClientSecret, "ClientSecret", "", "ClientSecret")

									cmd.Flags().StringVar(&ClientType, "ClientType", "", "ClientType")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringSliceVar(&GrantTypes, "GrantTypes", []string{}, "GrantTypes")

									cmd.Flags().StringSliceVar(&RedirectUris, "RedirectUris", []string{}, "RedirectUris")

									cmd.Flags().BoolVar(&RenewClientSecret, "RenewClientSecret", false, "RenewClientSecret")

									cmd.Flags().StringSliceVar(&ResponseTypes, "ResponseTypes", []string{}, "ResponseTypes")

									cmd.Flags().BoolVar(&Revoke, "Revoke", false, "Revoke")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var Permission with unknown data type IamPermissionRelationship
									if isMoRef(openapi.IamPermissionRelationship{}) {
										cmd.Flags().String("Permission", "", "Permission")
									}

									//Skipping var User with unknown data type IamUserRelationship
									if isMoRef(openapi.IamUserRelationship{}) {
										cmd.Flags().String("User", "", "User")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Certificate with unknown data type X509Certificate

									var Status string

									//Skipping var CertificateRequest with unknown data type IamCertificateRequestRelationship

									cmd := &cobra.Command{
										Use: "certificate",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.CreateIamCertificate(authCtx)

											body := openapi.NewIamCertificate()

											//Set class id and object type by default
											body.ClassId = "iam.Certificate"
											body.ObjectType = "iam.Certificate"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Certificate") && isMoRef(openapi.X509Certificate{}) {
												if f, err := cmd.Flags().GetString("Certificate"); err == nil {
													paramVal := openapi.X509Certificate{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Certificate = &paramVal
														//                                if v, ok := v.(openapi.X509Certificate); ok {
														//                                    body.Certificate = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Status") {
												body.Status = &Status
											}

											if isFlagPassed(cmd.Flags(), "CertificateRequest") && isMoRef(openapi.IamCertificateRequestRelationship{}) {
												if f, err := cmd.Flags().GetString("CertificateRequest"); err == nil {
													paramVal := openapi.IamCertificateRequestRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.CertificateRequest = &paramVal
														//                                if v, ok := v.(openapi.IamCertificateRequestRelationship); ok {
														//                                    body.CertificateRequest = &v
														//                                }
													}
												}
											}

											req = req.IamCertificate(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'iam.Certificate' resource.",
										Long: `Create a 'iam.Certificate' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Certificate with unknown data type X509Certificate
									if isMoRef(openapi.X509Certificate{}) {
										cmd.Flags().String("Certificate", "", "Certificate")
									}

									cmd.Flags().StringVar(&Status, "Status", "", "Status")

									//Skipping var CertificateRequest with unknown data type IamCertificateRequestRelationship
									if isMoRef(openapi.IamCertificateRequestRelationship{}) {
										cmd.Flags().String("CertificateRequest", "", "CertificateRequest")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var EmailAddress string

									var Name string

									var Request string

									var SelfSigned bool

									//Skipping var Subject with unknown data type PkixDistinguishedName

									//Skipping var SubjectAlternateName with unknown data type PkixSubjectAlternateName

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var Certificate with unknown data type IamCertificateRelationship

									//Skipping var PrivateKeySpec with unknown data type IamPrivateKeySpecRelationship

									cmd := &cobra.Command{
										Use: "certificaterequest",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.CreateIamCertificateRequest(authCtx)

											body := openapi.NewIamCertificateRequest()

											//Set class id and object type by default
											body.ClassId = "iam.CertificateRequest"
											body.ObjectType = "iam.CertificateRequest"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "EmailAddress") {
												body.EmailAddress = &EmailAddress
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Request") {
												body.Request = &Request
											}

											if isFlagPassed(cmd.Flags(), "SelfSigned") {
												body.SelfSigned = &SelfSigned
											}

											if isFlagPassed(cmd.Flags(), "Subject") && isMoRef(openapi.PkixDistinguishedName{}) {
												if f, err := cmd.Flags().GetString("Subject"); err == nil {
													paramVal := openapi.PkixDistinguishedName{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Subject = &paramVal
														//                                if v, ok := v.(openapi.PkixDistinguishedName); ok {
														//                                    body.Subject = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "SubjectAlternateName") && isMoRef(openapi.PkixSubjectAlternateName{}) {
												if f, err := cmd.Flags().GetString("SubjectAlternateName"); err == nil {
													paramVal := openapi.PkixSubjectAlternateName{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.SubjectAlternateName = &paramVal
														//                                if v, ok := v.(openapi.PkixSubjectAlternateName); ok {
														//                                    body.SubjectAlternateName = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Account") && isMoRef(openapi.IamAccountRelationship{}) {
												if f, err := cmd.Flags().GetString("Account"); err == nil {
													paramVal := openapi.IamAccountRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Account = &paramVal
														//                                if v, ok := v.(openapi.IamAccountRelationship); ok {
														//                                    body.Account = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Certificate") && isMoRef(openapi.IamCertificateRelationship{}) {
												if f, err := cmd.Flags().GetString("Certificate"); err == nil {
													paramVal := openapi.IamCertificateRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Certificate = &paramVal
														//                                if v, ok := v.(openapi.IamCertificateRelationship); ok {
														//                                    body.Certificate = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "PrivateKeySpec") && isMoRef(openapi.IamPrivateKeySpecRelationship{}) {
												if f, err := cmd.Flags().GetString("PrivateKeySpec"); err == nil {
													paramVal := openapi.IamPrivateKeySpecRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.PrivateKeySpec = &paramVal
														//                                if v, ok := v.(openapi.IamPrivateKeySpecRelationship); ok {
														//                                    body.PrivateKeySpec = &v
														//                                }
													}
												}
											}

											req = req.IamCertificateRequest(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'iam.CertificateRequest' resource.",
										Long: `Create a 'iam.CertificateRequest' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&EmailAddress, "EmailAddress", "", "EmailAddress")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Request, "Request", "", "Request")

									cmd.Flags().BoolVar(&SelfSigned, "SelfSigned", false, "SelfSigned")

									//Skipping var Subject with unknown data type PkixDistinguishedName
									if isMoRef(openapi.PkixDistinguishedName{}) {
										cmd.Flags().String("Subject", "", "Subject")
									}

									//Skipping var SubjectAlternateName with unknown data type PkixSubjectAlternateName
									if isMoRef(openapi.PkixSubjectAlternateName{}) {
										cmd.Flags().String("SubjectAlternateName", "", "SubjectAlternateName")
									}

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var Certificate with unknown data type IamCertificateRelationship
									if isMoRef(openapi.IamCertificateRelationship{}) {
										cmd.Flags().String("Certificate", "", "Certificate")
									}

									//Skipping var PrivateKeySpec with unknown data type IamPrivateKeySpecRelationship
									if isMoRef(openapi.IamPrivateKeySpecRelationship{}) {
										cmd.Flags().String("PrivateKeySpec", "", "PrivateKeySpec")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Name string

									//Skipping var EndPointUserRole with unknown data type []IamEndPointUserRoleRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "endpointuser",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.CreateIamEndPointUser(authCtx)

											body := openapi.NewIamEndPointUser()

											//Set class id and object type by default
											body.ClassId = "iam.EndPointUser"
											body.ObjectType = "iam.EndPointUser"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.IamEndPointUser(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'iam.EndPointUser' resource.",
										Long: `Create a 'iam.EndPointUser' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var PasswordProperties with unknown data type IamEndPointPasswordProperties

									//Skipping var EndPointUserRoles with unknown data type []IamEndPointUserRoleRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "endpointuserpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.CreateIamEndPointUserPolicy(authCtx)

											body := openapi.NewIamEndPointUserPolicy()

											//Set class id and object type by default
											body.ClassId = "iam.EndPointUserPolicy"
											body.ObjectType = "iam.EndPointUserPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "PasswordProperties") && isMoRef(openapi.IamEndPointPasswordProperties{}) {
												if f, err := cmd.Flags().GetString("PasswordProperties"); err == nil {
													paramVal := openapi.IamEndPointPasswordProperties{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.PasswordProperties = &paramVal
														//                                if v, ok := v.(openapi.IamEndPointPasswordProperties); ok {
														//                                    body.PasswordProperties = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.IamEndPointUserPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'iam.EndPointUserPolicy' resource.",
										Long: `Create a 'iam.EndPointUserPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var PasswordProperties with unknown data type IamEndPointPasswordProperties
									if isMoRef(openapi.IamEndPointPasswordProperties{}) {
										cmd.Flags().String("PasswordProperties", "", "PasswordProperties")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var ChangePassword bool

									var Enabled bool

									var IsPasswordSet bool

									var Password string

									//Skipping var EndPointRole with unknown data type []IamEndPointRoleRelationship

									//Skipping var EndPointUser with unknown data type IamEndPointUserRelationship

									//Skipping var EndPointUserPolicy with unknown data type IamEndPointUserPolicyRelationship

									cmd := &cobra.Command{
										Use: "endpointuserrole",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.CreateIamEndPointUserRole(authCtx)

											body := openapi.NewIamEndPointUserRole()

											//Set class id and object type by default
											body.ClassId = "iam.EndPointUserRole"
											body.ObjectType = "iam.EndPointUserRole"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ChangePassword") {
												body.ChangePassword = &ChangePassword
											}

											if isFlagPassed(cmd.Flags(), "Enabled") {
												body.Enabled = &Enabled
											}

											if isFlagPassed(cmd.Flags(), "IsPasswordSet") {
												body.IsPasswordSet = &IsPasswordSet
											}

											if isFlagPassed(cmd.Flags(), "Password") {
												body.Password = &Password
											}

											if isFlagPassed(cmd.Flags(), "EndPointUser") && isMoRef(openapi.IamEndPointUserRelationship{}) {
												if f, err := cmd.Flags().GetString("EndPointUser"); err == nil {
													paramVal := openapi.IamEndPointUserRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.EndPointUser = &paramVal
														//                                if v, ok := v.(openapi.IamEndPointUserRelationship); ok {
														//                                    body.EndPointUser = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "EndPointUserPolicy") && isMoRef(openapi.IamEndPointUserPolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("EndPointUserPolicy"); err == nil {
													paramVal := openapi.IamEndPointUserPolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.EndPointUserPolicy = &paramVal
														//                                if v, ok := v.(openapi.IamEndPointUserPolicyRelationship); ok {
														//                                    body.EndPointUserPolicy = &v
														//                                }
													}
												}
											}

											req = req.IamEndPointUserRole(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'iam.EndPointUserRole' resource.",
										Long: `Create a 'iam.EndPointUserRole' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&ChangePassword, "ChangePassword", false, "ChangePassword")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									//Skipping var EndPointUser with unknown data type IamEndPointUserRelationship
									if isMoRef(openapi.IamEndPointUserRelationship{}) {
										cmd.Flags().String("EndPointUser", "", "EndPointUser")
									}

									//Skipping var EndPointUserPolicy with unknown data type IamEndPointUserPolicyRelationship
									if isMoRef(openapi.IamEndPointUserPolicyRelationship{}) {
										cmd.Flags().String("EndPointUserPolicy", "", "EndPointUserPolicy")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DomainName string

									var IdpEntityId string

									var Metadata string

									var Name string

									var Type string

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var LdapPolicy with unknown data type IamLdapPolicyRelationship

									//Skipping var System with unknown data type IamSystemRelationship

									//Skipping var UserPreferences with unknown data type []IamUserPreferenceRelationship

									//Skipping var Usergroups with unknown data type []IamUserGroupRelationship

									//Skipping var Users with unknown data type []IamUserRelationship

									cmd := &cobra.Command{
										Use: "idp",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.CreateIamIdp(authCtx)

											body := openapi.NewIamIdp()

											//Set class id and object type by default
											body.ClassId = "iam.Idp"
											body.ObjectType = "iam.Idp"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "DomainName") {
												body.DomainName = &DomainName
											}

											if isFlagPassed(cmd.Flags(), "IdpEntityId") {
												body.IdpEntityId = &IdpEntityId
											}

											if isFlagPassed(cmd.Flags(), "Metadata") {
												body.Metadata = &Metadata
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Type") {
												body.Type = &Type
											}

											if isFlagPassed(cmd.Flags(), "Account") && isMoRef(openapi.IamAccountRelationship{}) {
												if f, err := cmd.Flags().GetString("Account"); err == nil {
													paramVal := openapi.IamAccountRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Account = &paramVal
														//                                if v, ok := v.(openapi.IamAccountRelationship); ok {
														//                                    body.Account = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "LdapPolicy") && isMoRef(openapi.IamLdapPolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("LdapPolicy"); err == nil {
													paramVal := openapi.IamLdapPolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.LdapPolicy = &paramVal
														//                                if v, ok := v.(openapi.IamLdapPolicyRelationship); ok {
														//                                    body.LdapPolicy = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "System") && isMoRef(openapi.IamSystemRelationship{}) {
												if f, err := cmd.Flags().GetString("System"); err == nil {
													paramVal := openapi.IamSystemRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.System = &paramVal
														//                                if v, ok := v.(openapi.IamSystemRelationship); ok {
														//                                    body.System = &v
														//                                }
													}
												}
											}

											req = req.IamIdp(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'iam.Idp' resource.",
										Long: `Create a 'iam.Idp' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DomainName, "DomainName", "", "DomainName")

									cmd.Flags().StringVar(&IdpEntityId, "IdpEntityId", "", "IdpEntityId")

									cmd.Flags().StringVar(&Metadata, "Metadata", "", "Metadata")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var LdapPolicy with unknown data type IamLdapPolicyRelationship
									if isMoRef(openapi.IamLdapPolicyRelationship{}) {
										cmd.Flags().String("LdapPolicy", "", "LdapPolicy")
									}

									//Skipping var System with unknown data type IamSystemRelationship
									if isMoRef(openapi.IamSystemRelationship{}) {
										cmd.Flags().String("System", "", "System")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Domain string

									var Name string

									//Skipping var EndPointRole with unknown data type []IamEndPointRoleRelationship

									//Skipping var LdapPolicy with unknown data type IamLdapPolicyRelationship

									cmd := &cobra.Command{
										Use: "ldapgroup",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.CreateIamLdapGroup(authCtx)

											body := openapi.NewIamLdapGroup()

											//Set class id and object type by default
											body.ClassId = "iam.LdapGroup"
											body.ObjectType = "iam.LdapGroup"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Domain") {
												body.Domain = &Domain
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "LdapPolicy") && isMoRef(openapi.IamLdapPolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("LdapPolicy"); err == nil {
													paramVal := openapi.IamLdapPolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.LdapPolicy = &paramVal
														//                                if v, ok := v.(openapi.IamLdapPolicyRelationship); ok {
														//                                    body.LdapPolicy = &v
														//                                }
													}
												}
											}

											req = req.IamLdapGroup(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'iam.LdapGroup' resource.",
										Long: `Create a 'iam.LdapGroup' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Domain, "Domain", "", "Domain")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var LdapPolicy with unknown data type IamLdapPolicyRelationship
									if isMoRef(openapi.IamLdapPolicyRelationship{}) {
										cmd.Flags().String("LdapPolicy", "", "LdapPolicy")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var BaseProperties with unknown data type IamLdapBaseProperties

									//Skipping var DnsParameters with unknown data type IamLdapDnsParameters

									var EnableDns bool

									var Enabled bool

									var UserSearchPrecedence string

									//Skipping var Var0Idp with unknown data type IamIdpRelationship

									//Skipping var ApplianceAccount with unknown data type IamAccountRelationship

									//Skipping var Groups with unknown data type []IamLdapGroupRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									//Skipping var Providers with unknown data type []IamLdapProviderRelationship

									cmd := &cobra.Command{
										Use: "ldappolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.CreateIamLdapPolicy(authCtx)

											body := openapi.NewIamLdapPolicy()

											//Set class id and object type by default
											body.ClassId = "iam.LdapPolicy"
											body.ObjectType = "iam.LdapPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "BaseProperties") && isMoRef(openapi.IamLdapBaseProperties{}) {
												if f, err := cmd.Flags().GetString("BaseProperties"); err == nil {
													paramVal := openapi.IamLdapBaseProperties{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.BaseProperties = &paramVal
														//                                if v, ok := v.(openapi.IamLdapBaseProperties); ok {
														//                                    body.BaseProperties = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "DnsParameters") && isMoRef(openapi.IamLdapDnsParameters{}) {
												if f, err := cmd.Flags().GetString("DnsParameters"); err == nil {
													paramVal := openapi.IamLdapDnsParameters{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.DnsParameters = &paramVal
														//                                if v, ok := v.(openapi.IamLdapDnsParameters); ok {
														//                                    body.DnsParameters = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "EnableDns") {
												body.EnableDns = &EnableDns
											}

											if isFlagPassed(cmd.Flags(), "Enabled") {
												body.Enabled = &Enabled
											}

											if isFlagPassed(cmd.Flags(), "UserSearchPrecedence") {
												body.UserSearchPrecedence = &UserSearchPrecedence
											}

											if isFlagPassed(cmd.Flags(), "Var0Idp") && isMoRef(openapi.IamIdpRelationship{}) {
												if f, err := cmd.Flags().GetString("Var0Idp"); err == nil {
													paramVal := openapi.IamIdpRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Var0Idp = &paramVal
														//                                if v, ok := v.(openapi.IamIdpRelationship); ok {
														//                                    body.Var0Idp = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ApplianceAccount") && isMoRef(openapi.IamAccountRelationship{}) {
												if f, err := cmd.Flags().GetString("ApplianceAccount"); err == nil {
													paramVal := openapi.IamAccountRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ApplianceAccount = &paramVal
														//                                if v, ok := v.(openapi.IamAccountRelationship); ok {
														//                                    body.ApplianceAccount = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.IamLdapPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'iam.LdapPolicy' resource.",
										Long: `Create a 'iam.LdapPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var BaseProperties with unknown data type IamLdapBaseProperties
									if isMoRef(openapi.IamLdapBaseProperties{}) {
										cmd.Flags().String("BaseProperties", "", "BaseProperties")
									}

									//Skipping var DnsParameters with unknown data type IamLdapDnsParameters
									if isMoRef(openapi.IamLdapDnsParameters{}) {
										cmd.Flags().String("DnsParameters", "", "DnsParameters")
									}

									cmd.Flags().BoolVar(&EnableDns, "EnableDns", false, "EnableDns")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									cmd.Flags().StringVar(&UserSearchPrecedence, "UserSearchPrecedence", "", "UserSearchPrecedence")

									//Skipping var Var0Idp with unknown data type IamIdpRelationship
									if isMoRef(openapi.IamIdpRelationship{}) {
										cmd.Flags().String("Var0Idp", "", "Var0Idp")
									}

									//Skipping var ApplianceAccount with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("ApplianceAccount", "", "ApplianceAccount")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Port with unknown data type int64

									var Server string

									//Skipping var LdapPolicy with unknown data type IamLdapPolicyRelationship

									cmd := &cobra.Command{
										Use: "ldapprovider",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.CreateIamLdapProvider(authCtx)

											body := openapi.NewIamLdapProvider()

											//Set class id and object type by default
											body.ClassId = "iam.LdapProvider"
											body.ObjectType = "iam.LdapProvider"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Server") {
												body.Server = &Server
											}

											if isFlagPassed(cmd.Flags(), "LdapPolicy") && isMoRef(openapi.IamLdapPolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("LdapPolicy"); err == nil {
													paramVal := openapi.IamLdapPolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.LdapPolicy = &paramVal
														//                                if v, ok := v.(openapi.IamLdapPolicyRelationship); ok {
														//                                    body.LdapPolicy = &v
														//                                }
													}
												}
											}

											req = req.IamLdapProvider(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'iam.LdapProvider' resource.",
										Long: `Create a 'iam.LdapProvider' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Server, "Server", "", "Server")

									//Skipping var LdapPolicy with unknown data type IamLdapPolicyRelationship
									if isMoRef(openapi.IamLdapPolicyRelationship{}) {
										cmd.Flags().String("LdapPolicy", "", "LdapPolicy")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var EndPointRoles with unknown data type []IamEndPointRoleRelationship

									//Skipping var ResourceRoles with unknown data type []IamResourceRolesRelationship

									//Skipping var Roles with unknown data type []IamRoleRelationship

									//Skipping var SessionLimits with unknown data type IamSessionLimitsRelationship

									//Skipping var UserGroups with unknown data type []IamUserGroupRelationship

									//Skipping var Users with unknown data type []IamUserRelationship

									cmd := &cobra.Command{
										Use: "permission",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.CreateIamPermission(authCtx)

											body := openapi.NewIamPermission()

											//Set class id and object type by default
											body.ClassId = "iam.Permission"
											body.ObjectType = "iam.Permission"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Account") && isMoRef(openapi.IamAccountRelationship{}) {
												if f, err := cmd.Flags().GetString("Account"); err == nil {
													paramVal := openapi.IamAccountRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Account = &paramVal
														//                                if v, ok := v.(openapi.IamAccountRelationship); ok {
														//                                    body.Account = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "SessionLimits") && isMoRef(openapi.IamSessionLimitsRelationship{}) {
												if f, err := cmd.Flags().GetString("SessionLimits"); err == nil {
													paramVal := openapi.IamSessionLimitsRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.SessionLimits = &paramVal
														//                                if v, ok := v.(openapi.IamSessionLimitsRelationship); ok {
														//                                    body.SessionLimits = &v
														//                                }
													}
												}
											}

											req = req.IamPermission(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'iam.Permission' resource.",
										Long: `Create a 'iam.Permission' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var SessionLimits with unknown data type IamSessionLimitsRelationship
									if isMoRef(openapi.IamSessionLimitsRelationship{}) {
										cmd.Flags().String("SessionLimits", "", "SessionLimits")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Algorithm with unknown data type PkixKeyGenerationSpec

									//Skipping var CertificateRequest with unknown data type IamCertificateRequestRelationship

									cmd := &cobra.Command{
										Use: "privatekeyspec",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.CreateIamPrivateKeySpec(authCtx)

											body := openapi.NewIamPrivateKeySpec()

											//Set class id and object type by default
											body.ClassId = "iam.PrivateKeySpec"
											body.ObjectType = "iam.PrivateKeySpec"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Algorithm") && isMoRef(openapi.PkixKeyGenerationSpec{}) {
												if f, err := cmd.Flags().GetString("Algorithm"); err == nil {
													paramVal := openapi.PkixKeyGenerationSpec{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Algorithm = &paramVal
														//                                if v, ok := v.(openapi.PkixKeyGenerationSpec); ok {
														//                                    body.Algorithm = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "CertificateRequest") && isMoRef(openapi.IamCertificateRequestRelationship{}) {
												if f, err := cmd.Flags().GetString("CertificateRequest"); err == nil {
													paramVal := openapi.IamCertificateRequestRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.CertificateRequest = &paramVal
														//                                if v, ok := v.(openapi.IamCertificateRequestRelationship); ok {
														//                                    body.CertificateRequest = &v
														//                                }
													}
												}
											}

											req = req.IamPrivateKeySpec(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'iam.PrivateKeySpec' resource.",
										Long: `Create a 'iam.PrivateKeySpec' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Algorithm with unknown data type PkixKeyGenerationSpec
									if isMoRef(openapi.PkixKeyGenerationSpec{}) {
										cmd.Flags().String("Algorithm", "", "Algorithm")
									}

									//Skipping var CertificateRequest with unknown data type IamCertificateRequestRelationship
									if isMoRef(openapi.IamCertificateRequestRelationship{}) {
										cmd.Flags().String("CertificateRequest", "", "CertificateRequest")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Name string

									var Value []string

									//Skipping var Usergroup with unknown data type IamUserGroupRelationship

									cmd := &cobra.Command{
										Use: "qualifier",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.CreateIamQualifier(authCtx)

											body := openapi.NewIamQualifier()

											//Set class id and object type by default
											body.ClassId = "iam.Qualifier"
											body.ObjectType = "iam.Qualifier"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Value") {
												body.Value = &Value
											}

											if isFlagPassed(cmd.Flags(), "Usergroup") && isMoRef(openapi.IamUserGroupRelationship{}) {
												if f, err := cmd.Flags().GetString("Usergroup"); err == nil {
													paramVal := openapi.IamUserGroupRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Usergroup = &paramVal
														//                                if v, ok := v.(openapi.IamUserGroupRelationship); ok {
														//                                    body.Usergroup = &v
														//                                }
													}
												}
											}

											req = req.IamQualifier(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'iam.Qualifier' resource.",
										Long: `Create a 'iam.Qualifier' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringSliceVar(&Value, "Value", []string{}, "Value")

									//Skipping var Usergroup with unknown data type IamUserGroupRelationship
									if isMoRef(openapi.IamUserGroupRelationship{}) {
										cmd.Flags().String("Usergroup", "", "Usergroup")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var EndPointRoles with unknown data type []IamEndPointRoleRelationship

									//Skipping var Permission with unknown data type IamPermissionRelationship

									//Skipping var Resource with unknown data type MoBaseMoRelationship

									//Skipping var Roles with unknown data type []IamRoleRelationship

									cmd := &cobra.Command{
										Use: "resourceroles",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.CreateIamResourceRoles(authCtx)

											body := openapi.NewIamResourceRoles()

											//Set class id and object type by default
											body.ClassId = "iam.ResourceRoles"
											body.ObjectType = "iam.ResourceRoles"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Permission") && isMoRef(openapi.IamPermissionRelationship{}) {
												if f, err := cmd.Flags().GetString("Permission"); err == nil {
													paramVal := openapi.IamPermissionRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Permission = &paramVal
														//                                if v, ok := v.(openapi.IamPermissionRelationship); ok {
														//                                    body.Permission = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Resource") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Resource"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Resource = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Resource = &v
														//                                }
													}
												}
											}

											req = req.IamResourceRoles(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'iam.ResourceRoles' resource.",
										Long: `Create a 'iam.ResourceRoles' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Permission with unknown data type IamPermissionRelationship
									if isMoRef(openapi.IamPermissionRelationship{}) {
										cmd.Flags().String("Permission", "", "Permission")
									}

									//Skipping var Resource with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Resource", "", "Resource")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var IdleTimeOut with unknown data type int64

									//Skipping var MaximumLimit with unknown data type int64

									//Skipping var PerUserLimit with unknown data type int64

									//Skipping var SessionTimeOut with unknown data type int64

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var Permission with unknown data type IamPermissionRelationship

									cmd := &cobra.Command{
										Use: "sessionlimits",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.CreateIamSessionLimits(authCtx)

											body := openapi.NewIamSessionLimits()

											//Set class id and object type by default
											body.ClassId = "iam.SessionLimits"
											body.ObjectType = "iam.SessionLimits"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Account") && isMoRef(openapi.IamAccountRelationship{}) {
												if f, err := cmd.Flags().GetString("Account"); err == nil {
													paramVal := openapi.IamAccountRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Account = &paramVal
														//                                if v, ok := v.(openapi.IamAccountRelationship); ok {
														//                                    body.Account = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Permission") && isMoRef(openapi.IamPermissionRelationship{}) {
												if f, err := cmd.Flags().GetString("Permission"); err == nil {
													paramVal := openapi.IamPermissionRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Permission = &paramVal
														//                                if v, ok := v.(openapi.IamPermissionRelationship); ok {
														//                                    body.Permission = &v
														//                                }
													}
												}
											}

											req = req.IamSessionLimits(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'iam.SessionLimits' resource.",
										Long: `Create a 'iam.SessionLimits' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var Permission with unknown data type IamPermissionRelationship
									if isMoRef(openapi.IamPermissionRelationship{}) {
										cmd.Flags().String("Permission", "", "Permission")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Certificates with unknown data type []X509Certificate

									var Chain string

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "trustpoint",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.CreateIamTrustPoint(authCtx)

											body := openapi.NewIamTrustPoint()

											//Set class id and object type by default
											body.ClassId = "iam.TrustPoint"
											body.ObjectType = "iam.TrustPoint"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Chain") {
												body.Chain = &Chain
											}

											if isFlagPassed(cmd.Flags(), "Account") && isMoRef(openapi.IamAccountRelationship{}) {
												if f, err := cmd.Flags().GetString("Account"); err == nil {
													paramVal := openapi.IamAccountRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Account = &paramVal
														//                                if v, ok := v.(openapi.IamAccountRelationship); ok {
														//                                    body.Account = &v
														//                                }
													}
												}
											}

											req = req.IamTrustPoint(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'iam.TrustPoint' resource.",
										Long: `Create a 'iam.TrustPoint' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Chain, "Chain", "", "Chain")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Name string

									var Status string

									//Skipping var AppRegistrations with unknown data type []IamAppRegistrationRelationship

									//Skipping var DomainGroups with unknown data type []IamDomainGroupRelationship

									//Skipping var EndPointRoles with unknown data type []IamEndPointRoleRelationship

									//Skipping var Idpreferences with unknown data type []IamIdpReferenceRelationship

									//Skipping var Idps with unknown data type []IamIdpRelationship

									//Skipping var Permissions with unknown data type []IamPermissionRelationship

									//Skipping var PrivilegeSets with unknown data type []IamPrivilegeSetRelationship

									//Skipping var Privileges with unknown data type []IamPrivilegeRelationship

									//Skipping var ResourceLimits with unknown data type IamResourceLimitsRelationship

									//Skipping var Roles with unknown data type []IamRoleRelationship

									//Skipping var SecurityHolder with unknown data type IamSecurityHolderRelationship

									//Skipping var SessionLimits with unknown data type IamSessionLimitsRelationship

									cmd := &cobra.Command{
										Use: "updateiamaccount",

										Short: "Update a 'iam.Account' resource.",
										Long: `Update a 'iam.Account' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.UpdateIamAccount(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Status, "Status", "", "Status")

									//Skipping var ResourceLimits with unknown data type IamResourceLimitsRelationship
									if isMoRef(openapi.IamResourceLimitsRelationship{}) {
										cmd.Flags().String("ResourceLimits", "", "ResourceLimits")
									}

									//Skipping var SecurityHolder with unknown data type IamSecurityHolderRelationship
									if isMoRef(openapi.IamSecurityHolderRelationship{}) {
										cmd.Flags().String("SecurityHolder", "", "SecurityHolder")
									}

									//Skipping var SessionLimits with unknown data type IamSessionLimitsRelationship
									if isMoRef(openapi.IamSessionLimitsRelationship{}) {
										cmd.Flags().String("SessionLimits", "", "SessionLimits")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var HashAlgorithm string

									//Skipping var KeySpec with unknown data type PkixKeyGenerationSpec

									var PrivateKey string

									var Purpose string

									var SigningAlgorithm string

									//Skipping var Permission with unknown data type IamPermissionRelationship

									//Skipping var User with unknown data type IamUserRelationship

									cmd := &cobra.Command{
										Use: "updateiamapikey",

										Short: "Update a 'iam.ApiKey' resource.",
										Long: `Update a 'iam.ApiKey' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.UpdateIamApiKey(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&HashAlgorithm, "HashAlgorithm", "", "HashAlgorithm")

									//Skipping var KeySpec with unknown data type PkixKeyGenerationSpec
									if isMoRef(openapi.PkixKeyGenerationSpec{}) {
										cmd.Flags().String("KeySpec", "", "KeySpec")
									}

									cmd.Flags().StringVar(&PrivateKey, "PrivateKey", "", "PrivateKey")

									cmd.Flags().StringVar(&Purpose, "Purpose", "", "Purpose")

									cmd.Flags().StringVar(&SigningAlgorithm, "SigningAlgorithm", "", "SigningAlgorithm")

									//Skipping var Permission with unknown data type IamPermissionRelationship
									if isMoRef(openapi.IamPermissionRelationship{}) {
										cmd.Flags().String("Permission", "", "Permission")
									}

									//Skipping var User with unknown data type IamUserRelationship
									if isMoRef(openapi.IamUserRelationship{}) {
										cmd.Flags().String("User", "", "User")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var ClientId string

									var ClientName string

									var ClientSecret string

									var ClientType string

									var Description string

									var GrantTypes []string

									var RedirectUris []string

									var RenewClientSecret bool

									var ResponseTypes []string

									//Skipping var RevocationTimestamp with unknown data type time.Time

									var Revoke bool

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var OauthTokens with unknown data type []IamOAuthTokenRelationship

									//Skipping var Permission with unknown data type IamPermissionRelationship

									//Skipping var Roles with unknown data type []IamRoleRelationship

									//Skipping var User with unknown data type IamUserRelationship

									cmd := &cobra.Command{
										Use: "updateiamappregistration",

										Short: "Update a 'iam.AppRegistration' resource.",
										Long: `Update a 'iam.AppRegistration' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.UpdateIamAppRegistration(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&ClientId, "ClientId", "", "ClientId")

									cmd.Flags().StringVar(&ClientName, "ClientName", "", "ClientName")

									cmd.Flags().StringVar(&ClientSecret, "ClientSecret", "", "ClientSecret")

									cmd.Flags().StringVar(&ClientType, "ClientType", "", "ClientType")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringSliceVar(&GrantTypes, "GrantTypes", []string{}, "GrantTypes")

									cmd.Flags().StringSliceVar(&RedirectUris, "RedirectUris", []string{}, "RedirectUris")

									cmd.Flags().BoolVar(&RenewClientSecret, "RenewClientSecret", false, "RenewClientSecret")

									cmd.Flags().StringSliceVar(&ResponseTypes, "ResponseTypes", []string{}, "ResponseTypes")

									cmd.Flags().BoolVar(&Revoke, "Revoke", false, "Revoke")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var Permission with unknown data type IamPermissionRelationship
									if isMoRef(openapi.IamPermissionRelationship{}) {
										cmd.Flags().String("Permission", "", "Permission")
									}

									//Skipping var User with unknown data type IamUserRelationship
									if isMoRef(openapi.IamUserRelationship{}) {
										cmd.Flags().String("User", "", "User")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Certificate with unknown data type X509Certificate

									var Status string

									//Skipping var CertificateRequest with unknown data type IamCertificateRequestRelationship

									cmd := &cobra.Command{
										Use: "updateiamcertificate",

										Short: "Update a 'iam.Certificate' resource.",
										Long: `Update a 'iam.Certificate' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.UpdateIamCertificate(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Certificate with unknown data type X509Certificate
									if isMoRef(openapi.X509Certificate{}) {
										cmd.Flags().String("Certificate", "", "Certificate")
									}

									cmd.Flags().StringVar(&Status, "Status", "", "Status")

									//Skipping var CertificateRequest with unknown data type IamCertificateRequestRelationship
									if isMoRef(openapi.IamCertificateRequestRelationship{}) {
										cmd.Flags().String("CertificateRequest", "", "CertificateRequest")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var EmailAddress string

									var Name string

									var Request string

									var SelfSigned bool

									//Skipping var Subject with unknown data type PkixDistinguishedName

									//Skipping var SubjectAlternateName with unknown data type PkixSubjectAlternateName

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var Certificate with unknown data type IamCertificateRelationship

									//Skipping var PrivateKeySpec with unknown data type IamPrivateKeySpecRelationship

									cmd := &cobra.Command{
										Use: "updateiamcertificaterequest",

										Short: "Update a 'iam.CertificateRequest' resource.",
										Long: `Update a 'iam.CertificateRequest' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.UpdateIamCertificateRequest(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&EmailAddress, "EmailAddress", "", "EmailAddress")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Request, "Request", "", "Request")

									cmd.Flags().BoolVar(&SelfSigned, "SelfSigned", false, "SelfSigned")

									//Skipping var Subject with unknown data type PkixDistinguishedName
									if isMoRef(openapi.PkixDistinguishedName{}) {
										cmd.Flags().String("Subject", "", "Subject")
									}

									//Skipping var SubjectAlternateName with unknown data type PkixSubjectAlternateName
									if isMoRef(openapi.PkixSubjectAlternateName{}) {
										cmd.Flags().String("SubjectAlternateName", "", "SubjectAlternateName")
									}

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var Certificate with unknown data type IamCertificateRelationship
									if isMoRef(openapi.IamCertificateRelationship{}) {
										cmd.Flags().String("Certificate", "", "Certificate")
									}

									//Skipping var PrivateKeySpec with unknown data type IamPrivateKeySpecRelationship
									if isMoRef(openapi.IamPrivateKeySpecRelationship{}) {
										cmd.Flags().String("PrivateKeySpec", "", "PrivateKeySpec")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Name string

									//Skipping var EndPointUserRole with unknown data type []IamEndPointUserRoleRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "updateiamendpointuser",

										Short: "Update a 'iam.EndPointUser' resource.",
										Long: `Update a 'iam.EndPointUser' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.UpdateIamEndPointUser(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var PasswordProperties with unknown data type IamEndPointPasswordProperties

									//Skipping var EndPointUserRoles with unknown data type []IamEndPointUserRoleRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "updateiamendpointuserpolicy",

										Short: "Update a 'iam.EndPointUserPolicy' resource.",
										Long: `Update a 'iam.EndPointUserPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.UpdateIamEndPointUserPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var PasswordProperties with unknown data type IamEndPointPasswordProperties
									if isMoRef(openapi.IamEndPointPasswordProperties{}) {
										cmd.Flags().String("PasswordProperties", "", "PasswordProperties")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var ChangePassword bool

									var Enabled bool

									var IsPasswordSet bool

									var Password string

									//Skipping var EndPointRole with unknown data type []IamEndPointRoleRelationship

									//Skipping var EndPointUser with unknown data type IamEndPointUserRelationship

									//Skipping var EndPointUserPolicy with unknown data type IamEndPointUserPolicyRelationship

									cmd := &cobra.Command{
										Use: "updateiamendpointuserrole",

										Short: "Update a 'iam.EndPointUserRole' resource.",
										Long: `Update a 'iam.EndPointUserRole' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.UpdateIamEndPointUserRole(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&ChangePassword, "ChangePassword", false, "ChangePassword")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									//Skipping var EndPointUser with unknown data type IamEndPointUserRelationship
									if isMoRef(openapi.IamEndPointUserRelationship{}) {
										cmd.Flags().String("EndPointUser", "", "EndPointUser")
									}

									//Skipping var EndPointUserPolicy with unknown data type IamEndPointUserPolicyRelationship
									if isMoRef(openapi.IamEndPointUserPolicyRelationship{}) {
										cmd.Flags().String("EndPointUserPolicy", "", "EndPointUserPolicy")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DomainName string

									var IdpEntityId string

									var Metadata string

									var Name string

									var Type string

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var LdapPolicy with unknown data type IamLdapPolicyRelationship

									//Skipping var System with unknown data type IamSystemRelationship

									//Skipping var UserPreferences with unknown data type []IamUserPreferenceRelationship

									//Skipping var Usergroups with unknown data type []IamUserGroupRelationship

									//Skipping var Users with unknown data type []IamUserRelationship

									cmd := &cobra.Command{
										Use: "updateiamidp",

										Short: "Update a 'iam.Idp' resource.",
										Long: `Update a 'iam.Idp' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.UpdateIamIdp(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DomainName, "DomainName", "", "DomainName")

									cmd.Flags().StringVar(&IdpEntityId, "IdpEntityId", "", "IdpEntityId")

									cmd.Flags().StringVar(&Metadata, "Metadata", "", "Metadata")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var LdapPolicy with unknown data type IamLdapPolicyRelationship
									if isMoRef(openapi.IamLdapPolicyRelationship{}) {
										cmd.Flags().String("LdapPolicy", "", "LdapPolicy")
									}

									//Skipping var System with unknown data type IamSystemRelationship
									if isMoRef(openapi.IamSystemRelationship{}) {
										cmd.Flags().String("System", "", "System")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DomainName string

									var IdpEntityId string

									var MultiFactorAuthentication bool

									var Name string

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var Idp with unknown data type IamIdpRelationship

									//Skipping var UserPreferences with unknown data type []IamUserPreferenceRelationship

									//Skipping var Usergroups with unknown data type []IamUserGroupRelationship

									//Skipping var Users with unknown data type []IamUserRelationship

									cmd := &cobra.Command{
										Use: "updateiamidpreference",

										Short: "Update a 'iam.IdpReference' resource.",
										Long: `Update a 'iam.IdpReference' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.UpdateIamIdpReference(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DomainName, "DomainName", "", "DomainName")

									cmd.Flags().StringVar(&IdpEntityId, "IdpEntityId", "", "IdpEntityId")

									cmd.Flags().BoolVar(&MultiFactorAuthentication, "MultiFactorAuthentication", false, "MultiFactorAuthentication")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var Idp with unknown data type IamIdpRelationship
									if isMoRef(openapi.IamIdpRelationship{}) {
										cmd.Flags().String("Idp", "", "Idp")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Domain string

									var Name string

									//Skipping var EndPointRole with unknown data type []IamEndPointRoleRelationship

									//Skipping var LdapPolicy with unknown data type IamLdapPolicyRelationship

									cmd := &cobra.Command{
										Use: "updateiamldapgroup",

										Short: "Update a 'iam.LdapGroup' resource.",
										Long: `Update a 'iam.LdapGroup' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.UpdateIamLdapGroup(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Domain, "Domain", "", "Domain")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var LdapPolicy with unknown data type IamLdapPolicyRelationship
									if isMoRef(openapi.IamLdapPolicyRelationship{}) {
										cmd.Flags().String("LdapPolicy", "", "LdapPolicy")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var BaseProperties with unknown data type IamLdapBaseProperties

									//Skipping var DnsParameters with unknown data type IamLdapDnsParameters

									var EnableDns bool

									var Enabled bool

									var UserSearchPrecedence string

									//Skipping var Var0Idp with unknown data type IamIdpRelationship

									//Skipping var ApplianceAccount with unknown data type IamAccountRelationship

									//Skipping var Groups with unknown data type []IamLdapGroupRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									//Skipping var Providers with unknown data type []IamLdapProviderRelationship

									cmd := &cobra.Command{
										Use: "updateiamldappolicy",

										Short: "Update a 'iam.LdapPolicy' resource.",
										Long: `Update a 'iam.LdapPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.UpdateIamLdapPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var BaseProperties with unknown data type IamLdapBaseProperties
									if isMoRef(openapi.IamLdapBaseProperties{}) {
										cmd.Flags().String("BaseProperties", "", "BaseProperties")
									}

									//Skipping var DnsParameters with unknown data type IamLdapDnsParameters
									if isMoRef(openapi.IamLdapDnsParameters{}) {
										cmd.Flags().String("DnsParameters", "", "DnsParameters")
									}

									cmd.Flags().BoolVar(&EnableDns, "EnableDns", false, "EnableDns")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									cmd.Flags().StringVar(&UserSearchPrecedence, "UserSearchPrecedence", "", "UserSearchPrecedence")

									//Skipping var Var0Idp with unknown data type IamIdpRelationship
									if isMoRef(openapi.IamIdpRelationship{}) {
										cmd.Flags().String("Var0Idp", "", "Var0Idp")
									}

									//Skipping var ApplianceAccount with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("ApplianceAccount", "", "ApplianceAccount")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Port with unknown data type int64

									var Server string

									//Skipping var LdapPolicy with unknown data type IamLdapPolicyRelationship

									cmd := &cobra.Command{
										Use: "updateiamldapprovider",

										Short: "Update a 'iam.LdapProvider' resource.",
										Long: `Update a 'iam.LdapProvider' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.UpdateIamLdapProvider(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Server, "Server", "", "Server")

									//Skipping var LdapPolicy with unknown data type IamLdapPolicyRelationship
									if isMoRef(openapi.IamLdapPolicyRelationship{}) {
										cmd.Flags().String("LdapPolicy", "", "LdapPolicy")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var CurrentPassword string

									var NewPassword string

									var Password string

									//Skipping var User with unknown data type IamUserRelationship

									cmd := &cobra.Command{
										Use: "updateiamlocaluserpassword",

										Short: "Update a 'iam.LocalUserPassword' resource.",
										Long: `Update a 'iam.LocalUserPassword' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.UpdateIamLocalUserPassword(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&CurrentPassword, "CurrentPassword", "", "CurrentPassword")

									cmd.Flags().StringVar(&NewPassword, "NewPassword", "", "NewPassword")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									//Skipping var User with unknown data type IamUserRelationship
									if isMoRef(openapi.IamUserRelationship{}) {
										cmd.Flags().String("User", "", "User")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var EndPointRoles with unknown data type []IamEndPointRoleRelationship

									//Skipping var ResourceRoles with unknown data type []IamResourceRolesRelationship

									//Skipping var Roles with unknown data type []IamRoleRelationship

									//Skipping var SessionLimits with unknown data type IamSessionLimitsRelationship

									//Skipping var UserGroups with unknown data type []IamUserGroupRelationship

									//Skipping var Users with unknown data type []IamUserRelationship

									cmd := &cobra.Command{
										Use: "updateiampermission",

										Short: "Update a 'iam.Permission' resource.",
										Long: `Update a 'iam.Permission' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.UpdateIamPermission(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var SessionLimits with unknown data type IamSessionLimitsRelationship
									if isMoRef(openapi.IamSessionLimitsRelationship{}) {
										cmd.Flags().String("SessionLimits", "", "SessionLimits")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Algorithm with unknown data type PkixKeyGenerationSpec

									//Skipping var CertificateRequest with unknown data type IamCertificateRequestRelationship

									cmd := &cobra.Command{
										Use: "updateiamprivatekeyspec",

										Short: "Update a 'iam.PrivateKeySpec' resource.",
										Long: `Update a 'iam.PrivateKeySpec' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.UpdateIamPrivateKeySpec(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Algorithm with unknown data type PkixKeyGenerationSpec
									if isMoRef(openapi.PkixKeyGenerationSpec{}) {
										cmd.Flags().String("Algorithm", "", "Algorithm")
									}

									//Skipping var CertificateRequest with unknown data type IamCertificateRequestRelationship
									if isMoRef(openapi.IamCertificateRequestRelationship{}) {
										cmd.Flags().String("CertificateRequest", "", "CertificateRequest")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Name string

									var Value []string

									//Skipping var Usergroup with unknown data type IamUserGroupRelationship

									cmd := &cobra.Command{
										Use: "updateiamqualifier",

										Short: "Update a 'iam.Qualifier' resource.",
										Long: `Update a 'iam.Qualifier' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.UpdateIamQualifier(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringSliceVar(&Value, "Value", []string{}, "Value")

									//Skipping var Usergroup with unknown data type IamUserGroupRelationship
									if isMoRef(openapi.IamUserGroupRelationship{}) {
										cmd.Flags().String("Usergroup", "", "Usergroup")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var EndPointRoles with unknown data type []IamEndPointRoleRelationship

									//Skipping var Permission with unknown data type IamPermissionRelationship

									//Skipping var Resource with unknown data type MoBaseMoRelationship

									//Skipping var Roles with unknown data type []IamRoleRelationship

									cmd := &cobra.Command{
										Use: "updateiamresourceroles",

										Short: "Update a 'iam.ResourceRoles' resource.",
										Long: `Update a 'iam.ResourceRoles' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.UpdateIamResourceRoles(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Permission with unknown data type IamPermissionRelationship
									if isMoRef(openapi.IamPermissionRelationship{}) {
										cmd.Flags().String("Permission", "", "Permission")
									}

									//Skipping var Resource with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Resource", "", "Resource")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var IdleTimeOut with unknown data type int64

									//Skipping var MaximumLimit with unknown data type int64

									//Skipping var PerUserLimit with unknown data type int64

									//Skipping var SessionTimeOut with unknown data type int64

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var Permission with unknown data type IamPermissionRelationship

									cmd := &cobra.Command{
										Use: "updateiamsessionlimits",

										Short: "Update a 'iam.SessionLimits' resource.",
										Long: `Update a 'iam.SessionLimits' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.UpdateIamSessionLimits(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var Permission with unknown data type IamPermissionRelationship
									if isMoRef(openapi.IamPermissionRelationship{}) {
										cmd.Flags().String("Permission", "", "Permission")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var ClientIpAddress string

									var Email string

									var FirstName string

									//Skipping var LastLoginTime with unknown data type time.Time

									var LastName string

									var Name string

									var UserIdOrEmail string

									var UserType string

									//Skipping var ApiKeys with unknown data type []IamApiKeyRelationship

									//Skipping var AppRegistrations with unknown data type []IamAppRegistrationRelationship

									//Skipping var Idp with unknown data type IamIdpRelationship

									//Skipping var Idpreference with unknown data type IamIdpReferenceRelationship

									//Skipping var LocalUserPassword with unknown data type IamLocalUserPasswordRelationship

									//Skipping var OauthTokens with unknown data type []IamOAuthTokenRelationship

									//Skipping var Permissions with unknown data type []IamPermissionRelationship

									//Skipping var Sessions with unknown data type []IamSessionRelationship

									cmd := &cobra.Command{
										Use: "updateiamuser",

										Short: "Update a 'iam.User' resource.",
										Long: `Update a 'iam.User' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.UpdateIamUser(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&ClientIpAddress, "ClientIpAddress", "", "ClientIpAddress")

									cmd.Flags().StringVar(&Email, "Email", "", "Email")

									cmd.Flags().StringVar(&FirstName, "FirstName", "", "FirstName")

									cmd.Flags().StringVar(&LastName, "LastName", "", "LastName")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&UserIdOrEmail, "UserIdOrEmail", "", "UserIdOrEmail")

									cmd.Flags().StringVar(&UserType, "UserType", "", "UserType")

									//Skipping var Idp with unknown data type IamIdpRelationship
									if isMoRef(openapi.IamIdpRelationship{}) {
										cmd.Flags().String("Idp", "", "Idp")
									}

									//Skipping var Idpreference with unknown data type IamIdpReferenceRelationship
									if isMoRef(openapi.IamIdpReferenceRelationship{}) {
										cmd.Flags().String("Idpreference", "", "Idpreference")
									}

									//Skipping var LocalUserPassword with unknown data type IamLocalUserPasswordRelationship
									if isMoRef(openapi.IamLocalUserPasswordRelationship{}) {
										cmd.Flags().String("LocalUserPassword", "", "LocalUserPassword")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Name string

									//Skipping var Idp with unknown data type IamIdpRelationship

									//Skipping var Idpreference with unknown data type IamIdpReferenceRelationship

									//Skipping var Permissions with unknown data type []IamPermissionRelationship

									//Skipping var Qualifier with unknown data type IamQualifierRelationship

									//Skipping var Users with unknown data type []IamUserRelationship

									cmd := &cobra.Command{
										Use: "updateiamusergroup",

										Short: "Update a 'iam.UserGroup' resource.",
										Long: `Update a 'iam.UserGroup' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.UpdateIamUserGroup(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Idp with unknown data type IamIdpRelationship
									if isMoRef(openapi.IamIdpRelationship{}) {
										cmd.Flags().String("Idp", "", "Idp")
									}

									//Skipping var Idpreference with unknown data type IamIdpReferenceRelationship
									if isMoRef(openapi.IamIdpReferenceRelationship{}) {
										cmd.Flags().String("Idpreference", "", "Idpreference")
									}

									//Skipping var Qualifier with unknown data type IamQualifierRelationship
									if isMoRef(openapi.IamQualifierRelationship{}) {
										cmd.Flags().String("Qualifier", "", "Qualifier")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Preference with unknown data type map[string]interface{}

									//Skipping var Idp with unknown data type IamIdpRelationship

									//Skipping var IdpReference with unknown data type IamIdpReferenceRelationship

									cmd := &cobra.Command{
										Use: "updateiamuserpreference",

										Short: "Update a 'iam.UserPreference' resource.",
										Long: `Update a 'iam.UserPreference' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.UpdateIamUserPreference(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Idp with unknown data type IamIdpRelationship
									if isMoRef(openapi.IamIdpRelationship{}) {
										cmd.Flags().String("Idp", "", "Idp")
									}

									//Skipping var IdpReference with unknown data type IamIdpReferenceRelationship
									if isMoRef(openapi.IamIdpReferenceRelationship{}) {
										cmd.Flags().String("IdpReference", "", "IdpReference")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var ClientIpAddress string

									var Email string

									var FirstName string

									//Skipping var LastLoginTime with unknown data type time.Time

									var LastName string

									var Name string

									var UserIdOrEmail string

									var UserType string

									//Skipping var ApiKeys with unknown data type []IamApiKeyRelationship

									//Skipping var AppRegistrations with unknown data type []IamAppRegistrationRelationship

									//Skipping var Idp with unknown data type IamIdpRelationship

									//Skipping var Idpreference with unknown data type IamIdpReferenceRelationship

									//Skipping var LocalUserPassword with unknown data type IamLocalUserPasswordRelationship

									//Skipping var OauthTokens with unknown data type []IamOAuthTokenRelationship

									//Skipping var Permissions with unknown data type []IamPermissionRelationship

									//Skipping var Sessions with unknown data type []IamSessionRelationship

									cmd := &cobra.Command{
										Use: "user",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.CreateIamUser(authCtx)

											body := openapi.NewIamUser()

											//Set class id and object type by default
											body.ClassId = "iam.User"
											body.ObjectType = "iam.User"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ClientIpAddress") {
												body.ClientIpAddress = &ClientIpAddress
											}

											if isFlagPassed(cmd.Flags(), "Email") {
												body.Email = &Email
											}

											if isFlagPassed(cmd.Flags(), "FirstName") {
												body.FirstName = &FirstName
											}

											if isFlagPassed(cmd.Flags(), "LastName") {
												body.LastName = &LastName
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "UserIdOrEmail") {
												body.UserIdOrEmail = &UserIdOrEmail
											}

											if isFlagPassed(cmd.Flags(), "UserType") {
												body.UserType = &UserType
											}

											if isFlagPassed(cmd.Flags(), "Idp") && isMoRef(openapi.IamIdpRelationship{}) {
												if f, err := cmd.Flags().GetString("Idp"); err == nil {
													paramVal := openapi.IamIdpRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Idp = &paramVal
														//                                if v, ok := v.(openapi.IamIdpRelationship); ok {
														//                                    body.Idp = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Idpreference") && isMoRef(openapi.IamIdpReferenceRelationship{}) {
												if f, err := cmd.Flags().GetString("Idpreference"); err == nil {
													paramVal := openapi.IamIdpReferenceRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Idpreference = &paramVal
														//                                if v, ok := v.(openapi.IamIdpReferenceRelationship); ok {
														//                                    body.Idpreference = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "LocalUserPassword") && isMoRef(openapi.IamLocalUserPasswordRelationship{}) {
												if f, err := cmd.Flags().GetString("LocalUserPassword"); err == nil {
													paramVal := openapi.IamLocalUserPasswordRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.LocalUserPassword = &paramVal
														//                                if v, ok := v.(openapi.IamLocalUserPasswordRelationship); ok {
														//                                    body.LocalUserPassword = &v
														//                                }
													}
												}
											}

											req = req.IamUser(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'iam.User' resource.",
										Long: `Create a 'iam.User' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&ClientIpAddress, "ClientIpAddress", "", "ClientIpAddress")

									cmd.Flags().StringVar(&Email, "Email", "", "Email")

									cmd.Flags().StringVar(&FirstName, "FirstName", "", "FirstName")

									cmd.Flags().StringVar(&LastName, "LastName", "", "LastName")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&UserIdOrEmail, "UserIdOrEmail", "", "UserIdOrEmail")

									cmd.Flags().StringVar(&UserType, "UserType", "", "UserType")

									//Skipping var Idp with unknown data type IamIdpRelationship
									if isMoRef(openapi.IamIdpRelationship{}) {
										cmd.Flags().String("Idp", "", "Idp")
									}

									//Skipping var Idpreference with unknown data type IamIdpReferenceRelationship
									if isMoRef(openapi.IamIdpReferenceRelationship{}) {
										cmd.Flags().String("Idpreference", "", "Idpreference")
									}

									//Skipping var LocalUserPassword with unknown data type IamLocalUserPasswordRelationship
									if isMoRef(openapi.IamLocalUserPasswordRelationship{}) {
										cmd.Flags().String("LocalUserPassword", "", "LocalUserPassword")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Name string

									//Skipping var Idp with unknown data type IamIdpRelationship

									//Skipping var Idpreference with unknown data type IamIdpReferenceRelationship

									//Skipping var Permissions with unknown data type []IamPermissionRelationship

									//Skipping var Qualifier with unknown data type IamQualifierRelationship

									//Skipping var Users with unknown data type []IamUserRelationship

									cmd := &cobra.Command{
										Use: "usergroup",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.CreateIamUserGroup(authCtx)

											body := openapi.NewIamUserGroup()

											//Set class id and object type by default
											body.ClassId = "iam.UserGroup"
											body.ObjectType = "iam.UserGroup"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Idp") && isMoRef(openapi.IamIdpRelationship{}) {
												if f, err := cmd.Flags().GetString("Idp"); err == nil {
													paramVal := openapi.IamIdpRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Idp = &paramVal
														//                                if v, ok := v.(openapi.IamIdpRelationship); ok {
														//                                    body.Idp = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Idpreference") && isMoRef(openapi.IamIdpReferenceRelationship{}) {
												if f, err := cmd.Flags().GetString("Idpreference"); err == nil {
													paramVal := openapi.IamIdpReferenceRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Idpreference = &paramVal
														//                                if v, ok := v.(openapi.IamIdpReferenceRelationship); ok {
														//                                    body.Idpreference = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Qualifier") && isMoRef(openapi.IamQualifierRelationship{}) {
												if f, err := cmd.Flags().GetString("Qualifier"); err == nil {
													paramVal := openapi.IamQualifierRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Qualifier = &paramVal
														//                                if v, ok := v.(openapi.IamQualifierRelationship); ok {
														//                                    body.Qualifier = &v
														//                                }
													}
												}
											}

											req = req.IamUserGroup(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'iam.UserGroup' resource.",
										Long: `Create a 'iam.UserGroup' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Idp with unknown data type IamIdpRelationship
									if isMoRef(openapi.IamIdpRelationship{}) {
										cmd.Flags().String("Idp", "", "Idp")
									}

									//Skipping var Idpreference with unknown data type IamIdpReferenceRelationship
									if isMoRef(openapi.IamIdpReferenceRelationship{}) {
										cmd.Flags().String("Idpreference", "", "Idpreference")
									}

									//Skipping var Qualifier with unknown data type IamQualifierRelationship
									if isMoRef(openapi.IamQualifierRelationship{}) {
										cmd.Flags().String("Qualifier", "", "Qualifier")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "infra",

								Short: "Create Infra resource(s)",
								Long: `Create Infra resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Features with unknown data type []InfraFeatureDefinition

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "accountexperience",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.InfraApi.CreateInfraAccountExperience(authCtx)

											body := openapi.NewInfraAccountExperience()

											//Set class id and object type by default
											body.ClassId = "infra.AccountExperience"
											body.ObjectType = "infra.AccountExperience"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Account") && isMoRef(openapi.IamAccountRelationship{}) {
												if f, err := cmd.Flags().GetString("Account"); err == nil {
													paramVal := openapi.IamAccountRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Account = &paramVal
														//                                if v, ok := v.(openapi.IamAccountRelationship); ok {
														//                                    body.Account = &v
														//                                }
													}
												}
											}

											req = req.InfraAccountExperience(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'infra.AccountExperience' resource.",
										Long: `Create a 'infra.AccountExperience' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Features with unknown data type []InfraFeatureDefinition

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "updateinfraaccountexperience",

										Short: "Update a 'infra.AccountExperience' resource.",
										Long: `Update a 'infra.AccountExperience' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.InfraApi.UpdateInfraAccountExperience(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "inventory",

								Short: "Create Inventory resource(s)",
								Long: `Create Inventory resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Mos with unknown data type []InventoryInventoryMo

									//Skipping var Device with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "request",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.InventoryApi.CreateInventoryRequest(authCtx)

											body := openapi.NewInventoryRequest()

											//Set class id and object type by default
											body.ClassId = "inventory.Request"
											body.ObjectType = "inventory.Request"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Device") && isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
												if f, err := cmd.Flags().GetString("Device"); err == nil {
													paramVal := openapi.AssetDeviceRegistrationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Device = &paramVal
														//                                if v, ok := v.(openapi.AssetDeviceRegistrationRelationship); ok {
														//                                    body.Device = &v
														//                                }
													}
												}
											}

											req = req.InventoryRequest(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'inventory.Request' resource.",
										Long: `Create a 'inventory.Request' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Device with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("Device", "", "Device")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Key string

									var Type string

									var Value string

									//Skipping var InventoryGenericInventoryHolder with unknown data type InventoryGenericInventoryHolderRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updateinventorygenericinventory",

										Short: "Update a 'inventory.GenericInventory' resource.",
										Long: `Update a 'inventory.GenericInventory' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.InventoryApi.UpdateInventoryGenericInventory(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Key, "Key", "", "Key")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									cmd.Flags().StringVar(&Value, "Value", "", "Value")

									//Skipping var InventoryGenericInventoryHolder with unknown data type InventoryGenericInventoryHolderRelationship
									if isMoRef(openapi.InventoryGenericInventoryHolderRelationship{}) {
										cmd.Flags().String("InventoryGenericInventoryHolder", "", "InventoryGenericInventoryHolder")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Endpoint string

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship

									//Skipping var GenericInventory with unknown data type []InventoryGenericInventoryRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updateinventorygenericinventoryholder",

										Short: "Update a 'inventory.GenericInventoryHolder' resource.",
										Long: `Update a 'inventory.GenericInventoryHolder' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.InventoryApi.UpdateInventoryGenericInventoryHolder(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Endpoint, "Endpoint", "", "Endpoint")

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship
									if isMoRef(openapi.ComputeBladeRelationship{}) {
										cmd.Flags().String("ComputeBlade", "", "ComputeBlade")
									}

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("ComputeRackUnit", "", "ComputeRackUnit")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "ipmioverlan",

								Short: "Create Ipmioverlan resource(s)",
								Long: `Create Ipmioverlan resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Enabled bool

									var EncryptionKey string

									var IsEncryptionKeySet bool

									var Privilege string

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "policy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IpmioverlanApi.CreateIpmioverlanPolicy(authCtx)

											body := openapi.NewIpmioverlanPolicy()

											//Set class id and object type by default
											body.ClassId = "ipmioverlan.Policy"
											body.ObjectType = "ipmioverlan.Policy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Enabled") {
												body.Enabled = &Enabled
											}

											if isFlagPassed(cmd.Flags(), "EncryptionKey") {
												body.EncryptionKey = &EncryptionKey
											}

											if isFlagPassed(cmd.Flags(), "IsEncryptionKeySet") {
												body.IsEncryptionKeySet = &IsEncryptionKeySet
											}

											if isFlagPassed(cmd.Flags(), "Privilege") {
												body.Privilege = &Privilege
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.IpmioverlanPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'ipmioverlan.Policy' resource.",
										Long: `Create a 'ipmioverlan.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									cmd.Flags().StringVar(&EncryptionKey, "EncryptionKey", "", "EncryptionKey")

									cmd.Flags().BoolVar(&IsEncryptionKeySet, "IsEncryptionKeySet", false, "IsEncryptionKeySet")

									cmd.Flags().StringVar(&Privilege, "Privilege", "", "Privilege")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Enabled bool

									var EncryptionKey string

									var IsEncryptionKeySet bool

									var Privilege string

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "updateipmioverlanpolicy",

										Short: "Update a 'ipmioverlan.Policy' resource.",
										Long: `Update a 'ipmioverlan.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IpmioverlanApi.UpdateIpmioverlanPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									cmd.Flags().StringVar(&EncryptionKey, "EncryptionKey", "", "EncryptionKey")

									cmd.Flags().BoolVar(&IsEncryptionKeySet, "IsEncryptionKeySet", false, "IsEncryptionKeySet")

									cmd.Flags().StringVar(&Privilege, "Privilege", "", "Privilege")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "kvm",

								Short: "Create Kvm resource(s)",
								Long: `Create Kvm resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var EnableLocalServerVideo bool

									var EnableVideoEncryption bool

									var Enabled bool

									//Skipping var MaximumSessions with unknown data type int64

									//Skipping var RemotePort with unknown data type int64

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "policy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.KvmApi.CreateKvmPolicy(authCtx)

											body := openapi.NewKvmPolicy()

											//Set class id and object type by default
											body.ClassId = "kvm.Policy"
											body.ObjectType = "kvm.Policy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "EnableLocalServerVideo") {
												body.EnableLocalServerVideo = &EnableLocalServerVideo
											}

											if isFlagPassed(cmd.Flags(), "EnableVideoEncryption") {
												body.EnableVideoEncryption = &EnableVideoEncryption
											}

											if isFlagPassed(cmd.Flags(), "Enabled") {
												body.Enabled = &Enabled
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.KvmPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'kvm.Policy' resource.",
										Long: `Create a 'kvm.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&EnableLocalServerVideo, "EnableLocalServerVideo", false, "EnableLocalServerVideo")

									cmd.Flags().BoolVar(&EnableVideoEncryption, "EnableVideoEncryption", false, "EnableVideoEncryption")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var EnableLocalServerVideo bool

									var EnableVideoEncryption bool

									var Enabled bool

									//Skipping var MaximumSessions with unknown data type int64

									//Skipping var RemotePort with unknown data type int64

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "updatekvmpolicy",

										Short: "Update a 'kvm.Policy' resource.",
										Long: `Update a 'kvm.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.KvmApi.UpdateKvmPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&EnableLocalServerVideo, "EnableLocalServerVideo", false, "EnableLocalServerVideo")

									cmd.Flags().BoolVar(&EnableVideoEncryption, "EnableVideoEncryption", false, "EnableVideoEncryption")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "license",

								Short: "Create License resource(s)",
								Long: `Create License resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var ActiveAdmin bool

									//Skipping var DaysLeft with unknown data type int64

									//Skipping var EndTime with unknown data type time.Time

									var EnforceMode string

									var ErrorDesc string

									//Skipping var EvaluationPeriod with unknown data type int64

									//Skipping var ExtraEvaluation with unknown data type int64

									//Skipping var LicenseCount with unknown data type int64

									var LicenseState string

									var LicenseType string

									//Skipping var StartTime with unknown data type time.Time

									var TrialAdmin bool

									//Skipping var AccountLicenseData with unknown data type LicenseAccountLicenseDataRelationship

									cmd := &cobra.Command{
										Use: "licenseinfo",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.LicenseApi.CreateLicenseLicenseInfo(authCtx)

											body := openapi.NewLicenseLicenseInfo()

											//Set class id and object type by default
											body.ClassId = "license.LicenseInfo"
											body.ObjectType = "license.LicenseInfo"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ActiveAdmin") {
												body.ActiveAdmin = &ActiveAdmin
											}

											if isFlagPassed(cmd.Flags(), "EnforceMode") {
												body.EnforceMode = &EnforceMode
											}

											if isFlagPassed(cmd.Flags(), "ErrorDesc") {
												body.ErrorDesc = &ErrorDesc
											}

											if isFlagPassed(cmd.Flags(), "LicenseState") {
												body.LicenseState = &LicenseState
											}

											if isFlagPassed(cmd.Flags(), "LicenseType") {
												body.LicenseType = &LicenseType
											}

											if isFlagPassed(cmd.Flags(), "TrialAdmin") {
												body.TrialAdmin = &TrialAdmin
											}

											if isFlagPassed(cmd.Flags(), "AccountLicenseData") && isMoRef(openapi.LicenseAccountLicenseDataRelationship{}) {
												if f, err := cmd.Flags().GetString("AccountLicenseData"); err == nil {
													paramVal := openapi.LicenseAccountLicenseDataRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.AccountLicenseData = &paramVal
														//                                if v, ok := v.(openapi.LicenseAccountLicenseDataRelationship); ok {
														//                                    body.AccountLicenseData = &v
														//                                }
													}
												}
											}

											req = req.LicenseLicenseInfo(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'license.LicenseInfo' resource.",
										Long: `Create a 'license.LicenseInfo' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&ActiveAdmin, "ActiveAdmin", false, "ActiveAdmin")

									cmd.Flags().StringVar(&EnforceMode, "EnforceMode", "", "EnforceMode")

									cmd.Flags().StringVar(&ErrorDesc, "ErrorDesc", "", "ErrorDesc")

									cmd.Flags().StringVar(&LicenseState, "LicenseState", "", "LicenseState")

									cmd.Flags().StringVar(&LicenseType, "LicenseType", "", "LicenseType")

									cmd.Flags().BoolVar(&TrialAdmin, "TrialAdmin", false, "TrialAdmin")

									//Skipping var AccountLicenseData with unknown data type LicenseAccountLicenseDataRelationship
									if isMoRef(openapi.LicenseAccountLicenseDataRelationship{}) {
										cmd.Flags().String("AccountLicenseData", "", "AccountLicenseData")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var AccountId string

									var AgentData string

									var AuthExpireTime string

									var AuthInitialTime string

									var AuthNextTime string

									var Category string

									var DefaultLicenseType string

									var ErrorDesc string

									var Group string

									var HighestCompliantLicenseTier string

									//Skipping var LastSync with unknown data type time.Time

									//Skipping var LastUpdatedTime with unknown data type time.Time

									var LicenseState string

									var LicenseTechSupportInfo string

									var RegisterExpireTime string

									var RegisterInitialTime string

									var RegisterNextTime string

									var RegistrationStatus string

									var RenewFailureString string

									var SmartAccount string

									var SyncStatus string

									var VirtualAccount string

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var CustomerOp with unknown data type LicenseCustomerOpRelationship

									//Skipping var Licenseinfos with unknown data type []LicenseLicenseInfoRelationship

									//Skipping var SmartlicenseToken with unknown data type LicenseSmartlicenseTokenRelationship

									cmd := &cobra.Command{
										Use: "updatelicenseaccountlicensedata",

										Short: "Update a 'license.AccountLicenseData' resource.",
										Long: `Update a 'license.AccountLicenseData' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.LicenseApi.UpdateLicenseAccountLicenseData(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&AccountId, "AccountId", "", "AccountId")

									cmd.Flags().StringVar(&AgentData, "AgentData", "", "AgentData")

									cmd.Flags().StringVar(&AuthExpireTime, "AuthExpireTime", "", "AuthExpireTime")

									cmd.Flags().StringVar(&AuthInitialTime, "AuthInitialTime", "", "AuthInitialTime")

									cmd.Flags().StringVar(&AuthNextTime, "AuthNextTime", "", "AuthNextTime")

									cmd.Flags().StringVar(&Category, "Category", "", "Category")

									cmd.Flags().StringVar(&DefaultLicenseType, "DefaultLicenseType", "", "DefaultLicenseType")

									cmd.Flags().StringVar(&ErrorDesc, "ErrorDesc", "", "ErrorDesc")

									cmd.Flags().StringVar(&Group, "Group", "", "Group")

									cmd.Flags().StringVar(&HighestCompliantLicenseTier, "HighestCompliantLicenseTier", "", "HighestCompliantLicenseTier")

									cmd.Flags().StringVar(&LicenseState, "LicenseState", "", "LicenseState")

									cmd.Flags().StringVar(&LicenseTechSupportInfo, "LicenseTechSupportInfo", "", "LicenseTechSupportInfo")

									cmd.Flags().StringVar(&RegisterExpireTime, "RegisterExpireTime", "", "RegisterExpireTime")

									cmd.Flags().StringVar(&RegisterInitialTime, "RegisterInitialTime", "", "RegisterInitialTime")

									cmd.Flags().StringVar(&RegisterNextTime, "RegisterNextTime", "", "RegisterNextTime")

									cmd.Flags().StringVar(&RegistrationStatus, "RegistrationStatus", "", "RegistrationStatus")

									cmd.Flags().StringVar(&RenewFailureString, "RenewFailureString", "", "RenewFailureString")

									cmd.Flags().StringVar(&SmartAccount, "SmartAccount", "", "SmartAccount")

									cmd.Flags().StringVar(&SyncStatus, "SyncStatus", "", "SyncStatus")

									cmd.Flags().StringVar(&VirtualAccount, "VirtualAccount", "", "VirtualAccount")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var CustomerOp with unknown data type LicenseCustomerOpRelationship
									if isMoRef(openapi.LicenseCustomerOpRelationship{}) {
										cmd.Flags().String("CustomerOp", "", "CustomerOp")
									}

									//Skipping var SmartlicenseToken with unknown data type LicenseSmartlicenseTokenRelationship
									if isMoRef(openapi.LicenseSmartlicenseTokenRelationship{}) {
										cmd.Flags().String("SmartlicenseToken", "", "SmartlicenseToken")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var ActiveAdmin bool

									var DeregisterDevice bool

									var EnableTrial bool

									//Skipping var EvaluationPeriod with unknown data type int64

									//Skipping var ExtraEvaluation with unknown data type int64

									var RenewAuthorization bool

									var RenewIdCertificate bool

									var ShowAgentTechSupport bool

									//Skipping var AccountLicenseData with unknown data type LicenseAccountLicenseDataRelationship

									cmd := &cobra.Command{
										Use: "updatelicensecustomerop",

										Short: "Update a 'license.CustomerOp' resource.",
										Long: `Update a 'license.CustomerOp' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.LicenseApi.UpdateLicenseCustomerOp(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&ActiveAdmin, "ActiveAdmin", false, "ActiveAdmin")

									cmd.Flags().BoolVar(&DeregisterDevice, "DeregisterDevice", false, "DeregisterDevice")

									cmd.Flags().BoolVar(&EnableTrial, "EnableTrial", false, "EnableTrial")

									cmd.Flags().BoolVar(&RenewAuthorization, "RenewAuthorization", false, "RenewAuthorization")

									cmd.Flags().BoolVar(&RenewIdCertificate, "RenewIdCertificate", false, "RenewIdCertificate")

									cmd.Flags().BoolVar(&ShowAgentTechSupport, "ShowAgentTechSupport", false, "ShowAgentTechSupport")

									//Skipping var AccountLicenseData with unknown data type LicenseAccountLicenseDataRelationship
									if isMoRef(openapi.LicenseAccountLicenseDataRelationship{}) {
										cmd.Flags().String("AccountLicenseData", "", "AccountLicenseData")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var ActiveAdmin bool

									//Skipping var DaysLeft with unknown data type int64

									//Skipping var EndTime with unknown data type time.Time

									var EnforceMode string

									var ErrorDesc string

									//Skipping var EvaluationPeriod with unknown data type int64

									//Skipping var ExtraEvaluation with unknown data type int64

									//Skipping var LicenseCount with unknown data type int64

									var LicenseState string

									var LicenseType string

									//Skipping var StartTime with unknown data type time.Time

									var TrialAdmin bool

									//Skipping var AccountLicenseData with unknown data type LicenseAccountLicenseDataRelationship

									cmd := &cobra.Command{
										Use: "updatelicenselicenseinfo",

										Short: "Update a 'license.LicenseInfo' resource.",
										Long: `Update a 'license.LicenseInfo' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.LicenseApi.UpdateLicenseLicenseInfo(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&ActiveAdmin, "ActiveAdmin", false, "ActiveAdmin")

									cmd.Flags().StringVar(&EnforceMode, "EnforceMode", "", "EnforceMode")

									cmd.Flags().StringVar(&ErrorDesc, "ErrorDesc", "", "ErrorDesc")

									cmd.Flags().StringVar(&LicenseState, "LicenseState", "", "LicenseState")

									cmd.Flags().StringVar(&LicenseType, "LicenseType", "", "LicenseType")

									cmd.Flags().BoolVar(&TrialAdmin, "TrialAdmin", false, "TrialAdmin")

									//Skipping var AccountLicenseData with unknown data type LicenseAccountLicenseDataRelationship
									if isMoRef(openapi.LicenseAccountLicenseDataRelationship{}) {
										cmd.Flags().String("AccountLicenseData", "", "AccountLicenseData")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Token string

									//Skipping var AccountLicenseData with unknown data type LicenseAccountLicenseDataRelationship

									cmd := &cobra.Command{
										Use: "updatelicensesmartlicensetoken",

										Short: "Update a 'license.SmartlicenseToken' resource.",
										Long: `Update a 'license.SmartlicenseToken' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.LicenseApi.UpdateLicenseSmartlicenseToken(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Token, "Token", "", "Token")

									//Skipping var AccountLicenseData with unknown data type LicenseAccountLicenseDataRelationship
									if isMoRef(openapi.LicenseAccountLicenseDataRelationship{}) {
										cmd.Flags().String("AccountLicenseData", "", "AccountLicenseData")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "ls",

								Short: "Create Ls resource(s)",
								Long: `Create Ls resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var AssignState string

									var AssocState string

									var AssociatedServer string

									var ConfigState string

									var Name string

									var OperState string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatelsserviceprofile",

										Short: "Update a 'ls.ServiceProfile' resource.",
										Long: `Update a 'ls.ServiceProfile' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.LsApi.UpdateLsServiceProfile(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&AssignState, "AssignState", "", "AssignState")

									cmd.Flags().StringVar(&AssocState, "AssocState", "", "AssocState")

									cmd.Flags().StringVar(&AssociatedServer, "AssociatedServer", "", "AssociatedServer")

									cmd.Flags().StringVar(&ConfigState, "ConfigState", "", "ConfigState")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "management",

								Short: "Create Management resource(s)",
								Long: `Create Management resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									//Skipping var AdapterUnit with unknown data type AdapterUnitRelationship

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship

									//Skipping var ManagementInterfaces with unknown data type []ManagementInterfaceRelationship

									//Skipping var NetworkElement with unknown data type NetworkElementRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var RunningFirmware with unknown data type []FirmwareRunningFirmwareRelationship

									//Skipping var StorageSasExpander with unknown data type StorageSasExpanderRelationship

									//Skipping var TopSystem with unknown data type TopSystemRelationship

									cmd := &cobra.Command{
										Use: "updatemanagementcontroller",

										Short: "Update a 'management.Controller' resource.",
										Long: `Update a 'management.Controller' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ManagementApi.UpdateManagementController(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									//Skipping var AdapterUnit with unknown data type AdapterUnitRelationship
									if isMoRef(openapi.AdapterUnitRelationship{}) {
										cmd.Flags().String("AdapterUnit", "", "AdapterUnit")
									}

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship
									if isMoRef(openapi.ComputeBladeRelationship{}) {
										cmd.Flags().String("ComputeBlade", "", "ComputeBlade")
									}

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("ComputeRackUnit", "", "ComputeRackUnit")
									}

									//Skipping var NetworkElement with unknown data type NetworkElementRelationship
									if isMoRef(openapi.NetworkElementRelationship{}) {
										cmd.Flags().String("NetworkElement", "", "NetworkElement")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageSasExpander with unknown data type StorageSasExpanderRelationship
									if isMoRef(openapi.StorageSasExpanderRelationship{}) {
										cmd.Flags().String("StorageSasExpander", "", "StorageSasExpander")
									}

									//Skipping var TopSystem with unknown data type TopSystemRelationship
									if isMoRef(openapi.TopSystemRelationship{}) {
										cmd.Flags().String("TopSystem", "", "TopSystem")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var EntityId string

									var Leadership string

									//Skipping var NetworkElement with unknown data type NetworkElementRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatemanagemententity",

										Short: "Update a 'management.Entity' resource.",
										Long: `Update a 'management.Entity' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ManagementApi.UpdateManagementEntity(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&EntityId, "EntityId", "", "EntityId")

									cmd.Flags().StringVar(&Leadership, "Leadership", "", "Leadership")

									//Skipping var NetworkElement with unknown data type NetworkElementRelationship
									if isMoRef(openapi.NetworkElementRelationship{}) {
										cmd.Flags().String("NetworkElement", "", "NetworkElement")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Gateway string

									var HostName string

									var IpAddress string

									var Ipv4Address string

									var Ipv4Gateway string

									var Ipv4Mask string

									var Ipv6Address string

									var Ipv6Gateway string

									//Skipping var Ipv6Prefix with unknown data type int64

									var MacAddress string

									var Mask string

									var SwitchId string

									var UemConnStatus string

									var VirtualHostName string

									//Skipping var ManagementController with unknown data type ManagementControllerRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatemanagementinterface",

										Short: "Update a 'management.Interface' resource.",
										Long: `Update a 'management.Interface' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ManagementApi.UpdateManagementInterface(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Gateway, "Gateway", "", "Gateway")

									cmd.Flags().StringVar(&HostName, "HostName", "", "HostName")

									cmd.Flags().StringVar(&IpAddress, "IpAddress", "", "IpAddress")

									cmd.Flags().StringVar(&Ipv4Address, "Ipv4Address", "", "Ipv4Address")

									cmd.Flags().StringVar(&Ipv4Gateway, "Ipv4Gateway", "", "Ipv4Gateway")

									cmd.Flags().StringVar(&Ipv4Mask, "Ipv4Mask", "", "Ipv4Mask")

									cmd.Flags().StringVar(&Ipv6Address, "Ipv6Address", "", "Ipv6Address")

									cmd.Flags().StringVar(&Ipv6Gateway, "Ipv6Gateway", "", "Ipv6Gateway")

									cmd.Flags().StringVar(&MacAddress, "MacAddress", "", "MacAddress")

									cmd.Flags().StringVar(&Mask, "Mask", "", "Mask")

									cmd.Flags().StringVar(&SwitchId, "SwitchId", "", "SwitchId")

									cmd.Flags().StringVar(&UemConnStatus, "UemConnStatus", "", "UemConnStatus")

									cmd.Flags().StringVar(&VirtualHostName, "VirtualHostName", "", "VirtualHostName")

									//Skipping var ManagementController with unknown data type ManagementControllerRelationship
									if isMoRef(openapi.ManagementControllerRelationship{}) {
										cmd.Flags().String("ManagementController", "", "ManagementController")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "memory",

								Short: "Create Memory resource(s)",
								Long: `Create Memory resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var Goals with unknown data type []MemoryPersistentMemoryGoal

									//Skipping var LocalSecurity with unknown data type MemoryPersistentMemoryLocalSecurity

									//Skipping var LogicalNamespaces with unknown data type []MemoryPersistentMemoryLogicalNamespace

									var ManagementMode string

									var RetainNamespaces bool

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "persistentmemorypolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.MemoryApi.CreateMemoryPersistentMemoryPolicy(authCtx)

											body := openapi.NewMemoryPersistentMemoryPolicy()

											//Set class id and object type by default
											body.ClassId = "memory.PersistentMemoryPolicy"
											body.ObjectType = "memory.PersistentMemoryPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "LocalSecurity") && isMoRef(openapi.MemoryPersistentMemoryLocalSecurity{}) {
												if f, err := cmd.Flags().GetString("LocalSecurity"); err == nil {
													paramVal := openapi.MemoryPersistentMemoryLocalSecurity{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.LocalSecurity = &paramVal
														//                                if v, ok := v.(openapi.MemoryPersistentMemoryLocalSecurity); ok {
														//                                    body.LocalSecurity = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ManagementMode") {
												body.ManagementMode = &ManagementMode
											}

											if isFlagPassed(cmd.Flags(), "RetainNamespaces") {
												body.RetainNamespaces = &RetainNamespaces
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.MemoryPersistentMemoryPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'memory.PersistentMemoryPolicy' resource.",
										Long: `Create a 'memory.PersistentMemoryPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var LocalSecurity with unknown data type MemoryPersistentMemoryLocalSecurity
									if isMoRef(openapi.MemoryPersistentMemoryLocalSecurity{}) {
										cmd.Flags().String("LocalSecurity", "", "LocalSecurity")
									}

									cmd.Flags().StringVar(&ManagementMode, "ManagementMode", "", "ManagementMode")

									cmd.Flags().BoolVar(&RetainNamespaces, "RetainNamespaces", false, "RetainNamespaces")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									//Skipping var ArrayId with unknown data type int64

									//Skipping var CpuId with unknown data type int64

									var CurrentCapacity string

									var ErrorCorrection string

									var MaxCapacity string

									var MaxDevices string

									var OperPowerState string

									var Presence string

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship

									//Skipping var PersistentMemoryUnits with unknown data type []MemoryPersistentMemoryUnitRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var Units with unknown data type []MemoryUnitRelationship

									cmd := &cobra.Command{
										Use: "updatememoryarray",

										Short: "Update a 'memory.Array' resource.",
										Long: `Update a 'memory.Array' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.UpdateMemoryArray(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&CurrentCapacity, "CurrentCapacity", "", "CurrentCapacity")

									cmd.Flags().StringVar(&ErrorCorrection, "ErrorCorrection", "", "ErrorCorrection")

									cmd.Flags().StringVar(&MaxCapacity, "MaxCapacity", "", "MaxCapacity")

									cmd.Flags().StringVar(&MaxDevices, "MaxDevices", "", "MaxDevices")

									cmd.Flags().StringVar(&OperPowerState, "OperPowerState", "", "OperPowerState")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship
									if isMoRef(openapi.ComputeBoardRelationship{}) {
										cmd.Flags().String("ComputeBoard", "", "ComputeBoard")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var ConfigErrorDesc string

									var ConfigResult string

									//Skipping var ConfigSequenceNo with unknown data type int64

									var ConfigState string

									//Skipping var MemoryPersistentMemoryConfiguration with unknown data type MemoryPersistentMemoryConfigurationRelationship

									//Skipping var PersistentMemoryNamespaceConfigResults with unknown data type []MemoryPersistentMemoryNamespaceConfigResultRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatememorypersistentmemoryconfigresult",

										Short: "Update a 'memory.PersistentMemoryConfigResult' resource.",
										Long: `Update a 'memory.PersistentMemoryConfigResult' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.UpdateMemoryPersistentMemoryConfigResult(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&ConfigErrorDesc, "ConfigErrorDesc", "", "ConfigErrorDesc")

									cmd.Flags().StringVar(&ConfigResult, "ConfigResult", "", "ConfigResult")

									cmd.Flags().StringVar(&ConfigState, "ConfigState", "", "ConfigState")

									//Skipping var MemoryPersistentMemoryConfiguration with unknown data type MemoryPersistentMemoryConfigurationRelationship
									if isMoRef(openapi.MemoryPersistentMemoryConfigurationRelationship{}) {
										cmd.Flags().String("MemoryPersistentMemoryConfiguration", "", "MemoryPersistentMemoryConfiguration")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var MemoryCapacity string

									var NumOfModules string

									var NumOfRegions string

									var PersistentMemoryCapacity string

									var ReservedCapacity string

									var SecurityState string

									var TotalCapacity string

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship

									//Skipping var PersistentMemoryConfigResult with unknown data type MemoryPersistentMemoryConfigResultRelationship

									//Skipping var PersistentMemoryRegions with unknown data type []MemoryPersistentMemoryRegionRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatememorypersistentmemoryconfiguration",

										Short: "Update a 'memory.PersistentMemoryConfiguration' resource.",
										Long: `Update a 'memory.PersistentMemoryConfiguration' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.UpdateMemoryPersistentMemoryConfiguration(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&MemoryCapacity, "MemoryCapacity", "", "MemoryCapacity")

									cmd.Flags().StringVar(&NumOfModules, "NumOfModules", "", "NumOfModules")

									cmd.Flags().StringVar(&NumOfRegions, "NumOfRegions", "", "NumOfRegions")

									cmd.Flags().StringVar(&PersistentMemoryCapacity, "PersistentMemoryCapacity", "", "PersistentMemoryCapacity")

									cmd.Flags().StringVar(&ReservedCapacity, "ReservedCapacity", "", "ReservedCapacity")

									cmd.Flags().StringVar(&SecurityState, "SecurityState", "", "SecurityState")

									cmd.Flags().StringVar(&TotalCapacity, "TotalCapacity", "", "TotalCapacity")

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship
									if isMoRef(openapi.ComputeBoardRelationship{}) {
										cmd.Flags().String("ComputeBoard", "", "ComputeBoard")
									}

									//Skipping var PersistentMemoryConfigResult with unknown data type MemoryPersistentMemoryConfigResultRelationship
									if isMoRef(openapi.MemoryPersistentMemoryConfigResultRelationship{}) {
										cmd.Flags().String("PersistentMemoryConfigResult", "", "PersistentMemoryConfigResult")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Capacity string

									var HealthState string

									var LabelVersion string

									var Mode string

									var Name string

									var Uuid string

									//Skipping var MemoryPersistentMemoryRegion with unknown data type MemoryPersistentMemoryRegionRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatememorypersistentmemorynamespace",

										Short: "Update a 'memory.PersistentMemoryNamespace' resource.",
										Long: `Update a 'memory.PersistentMemoryNamespace' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.UpdateMemoryPersistentMemoryNamespace(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Capacity, "Capacity", "", "Capacity")

									cmd.Flags().StringVar(&HealthState, "HealthState", "", "HealthState")

									cmd.Flags().StringVar(&LabelVersion, "LabelVersion", "", "LabelVersion")

									cmd.Flags().StringVar(&Mode, "Mode", "", "Mode")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Uuid, "Uuid", "", "Uuid")

									//Skipping var MemoryPersistentMemoryRegion with unknown data type MemoryPersistentMemoryRegionRelationship
									if isMoRef(openapi.MemoryPersistentMemoryRegionRelationship{}) {
										cmd.Flags().String("MemoryPersistentMemoryRegion", "", "MemoryPersistentMemoryRegion")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var ConfigStatus string

									var Name string

									var SocketId string

									var SocketMemoryId string

									//Skipping var MemoryPersistentMemoryConfigResult with unknown data type MemoryPersistentMemoryConfigResultRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatememorypersistentmemorynamespaceconfigresult",

										Short: "Update a 'memory.PersistentMemoryNamespaceConfigResult' resource.",
										Long: `Update a 'memory.PersistentMemoryNamespaceConfigResult' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.UpdateMemoryPersistentMemoryNamespaceConfigResult(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&ConfigStatus, "ConfigStatus", "", "ConfigStatus")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&SocketId, "SocketId", "", "SocketId")

									cmd.Flags().StringVar(&SocketMemoryId, "SocketMemoryId", "", "SocketMemoryId")

									//Skipping var MemoryPersistentMemoryConfigResult with unknown data type MemoryPersistentMemoryConfigResultRelationship
									if isMoRef(openapi.MemoryPersistentMemoryConfigResultRelationship{}) {
										cmd.Flags().String("MemoryPersistentMemoryConfigResult", "", "MemoryPersistentMemoryConfigResult")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var Goals with unknown data type []MemoryPersistentMemoryGoal

									//Skipping var LocalSecurity with unknown data type MemoryPersistentMemoryLocalSecurity

									//Skipping var LogicalNamespaces with unknown data type []MemoryPersistentMemoryLogicalNamespace

									var ManagementMode string

									var RetainNamespaces bool

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "updatememorypersistentmemorypolicy",

										Short: "Update a 'memory.PersistentMemoryPolicy' resource.",
										Long: `Update a 'memory.PersistentMemoryPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.UpdateMemoryPersistentMemoryPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var LocalSecurity with unknown data type MemoryPersistentMemoryLocalSecurity
									if isMoRef(openapi.MemoryPersistentMemoryLocalSecurity{}) {
										cmd.Flags().String("LocalSecurity", "", "LocalSecurity")
									}

									cmd.Flags().StringVar(&ManagementMode, "ManagementMode", "", "ManagementMode")

									cmd.Flags().BoolVar(&RetainNamespaces, "RetainNamespaces", false, "RetainNamespaces")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var FreeCapacity string

									var HealthState string

									var InterleavedSetId string

									var LocaterIds string

									var PersistentMemoryType string

									var RegionId string

									var SocketId string

									var SocketMemoryId string

									var TotalCapacity string

									//Skipping var MemoryPersistentMemoryConfiguration with unknown data type MemoryPersistentMemoryConfigurationRelationship

									//Skipping var PersistentMemoryNamespaces with unknown data type []MemoryPersistentMemoryNamespaceRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatememorypersistentmemoryregion",

										Short: "Update a 'memory.PersistentMemoryRegion' resource.",
										Long: `Update a 'memory.PersistentMemoryRegion' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.UpdateMemoryPersistentMemoryRegion(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&FreeCapacity, "FreeCapacity", "", "FreeCapacity")

									cmd.Flags().StringVar(&HealthState, "HealthState", "", "HealthState")

									cmd.Flags().StringVar(&InterleavedSetId, "InterleavedSetId", "", "InterleavedSetId")

									cmd.Flags().StringVar(&LocaterIds, "LocaterIds", "", "LocaterIds")

									cmd.Flags().StringVar(&PersistentMemoryType, "PersistentMemoryType", "", "PersistentMemoryType")

									cmd.Flags().StringVar(&RegionId, "RegionId", "", "RegionId")

									cmd.Flags().StringVar(&SocketId, "SocketId", "", "SocketId")

									cmd.Flags().StringVar(&SocketMemoryId, "SocketMemoryId", "", "SocketMemoryId")

									cmd.Flags().StringVar(&TotalCapacity, "TotalCapacity", "", "TotalCapacity")

									//Skipping var MemoryPersistentMemoryConfiguration with unknown data type MemoryPersistentMemoryConfigurationRelationship
									if isMoRef(openapi.MemoryPersistentMemoryConfigurationRelationship{}) {
										cmd.Flags().String("MemoryPersistentMemoryConfiguration", "", "MemoryPersistentMemoryConfiguration")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var AdminState string

									//Skipping var ArrayId with unknown data type int64

									//Skipping var Bank with unknown data type int64

									var Capacity string

									var Clock string

									var FormFactor string

									var Latency string

									var Location string

									var OperPowerState string

									var OperState string

									var Operability string

									var Presence string

									//Skipping var Set with unknown data type int64

									var Speed string

									var Thermal string

									var Type string

									var Visibility string

									var Width string

									var AppDirectCapacity string

									var CountStatus string

									var FirmwareVersion string

									var FrozenStatus string

									var HealthState string

									var LockStatus string

									var MemoryCapacity string

									//Skipping var MemoryId with unknown data type int64

									var PersistentMemoryCapacity string

									var ReservedCapacity string

									var SecurityStatus string

									var SocketId string

									var SocketMemoryId string

									var TotalCapacity string

									var Uid string

									//Skipping var MemoryArray with unknown data type MemoryArrayRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatememorypersistentmemoryunit",

										Short: "Update a 'memory.PersistentMemoryUnit' resource.",
										Long: `Update a 'memory.PersistentMemoryUnit' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.UpdateMemoryPersistentMemoryUnit(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&AdminState, "AdminState", "", "AdminState")

									cmd.Flags().StringVar(&Capacity, "Capacity", "", "Capacity")

									cmd.Flags().StringVar(&Clock, "Clock", "", "Clock")

									cmd.Flags().StringVar(&FormFactor, "FormFactor", "", "FormFactor")

									cmd.Flags().StringVar(&Latency, "Latency", "", "Latency")

									cmd.Flags().StringVar(&Location, "Location", "", "Location")

									cmd.Flags().StringVar(&OperPowerState, "OperPowerState", "", "OperPowerState")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&Operability, "Operability", "", "Operability")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&Speed, "Speed", "", "Speed")

									cmd.Flags().StringVar(&Thermal, "Thermal", "", "Thermal")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									cmd.Flags().StringVar(&Visibility, "Visibility", "", "Visibility")

									cmd.Flags().StringVar(&Width, "Width", "", "Width")

									cmd.Flags().StringVar(&AppDirectCapacity, "AppDirectCapacity", "", "AppDirectCapacity")

									cmd.Flags().StringVar(&CountStatus, "CountStatus", "", "CountStatus")

									cmd.Flags().StringVar(&FirmwareVersion, "FirmwareVersion", "", "FirmwareVersion")

									cmd.Flags().StringVar(&FrozenStatus, "FrozenStatus", "", "FrozenStatus")

									cmd.Flags().StringVar(&HealthState, "HealthState", "", "HealthState")

									cmd.Flags().StringVar(&LockStatus, "LockStatus", "", "LockStatus")

									cmd.Flags().StringVar(&MemoryCapacity, "MemoryCapacity", "", "MemoryCapacity")

									cmd.Flags().StringVar(&PersistentMemoryCapacity, "PersistentMemoryCapacity", "", "PersistentMemoryCapacity")

									cmd.Flags().StringVar(&ReservedCapacity, "ReservedCapacity", "", "ReservedCapacity")

									cmd.Flags().StringVar(&SecurityStatus, "SecurityStatus", "", "SecurityStatus")

									cmd.Flags().StringVar(&SocketId, "SocketId", "", "SocketId")

									cmd.Flags().StringVar(&SocketMemoryId, "SocketMemoryId", "", "SocketMemoryId")

									cmd.Flags().StringVar(&TotalCapacity, "TotalCapacity", "", "TotalCapacity")

									cmd.Flags().StringVar(&Uid, "Uid", "", "Uid")

									//Skipping var MemoryArray with unknown data type MemoryArrayRelationship
									if isMoRef(openapi.MemoryArrayRelationship{}) {
										cmd.Flags().String("MemoryArray", "", "MemoryArray")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var AdminState string

									//Skipping var ArrayId with unknown data type int64

									//Skipping var Bank with unknown data type int64

									var Capacity string

									var Clock string

									var FormFactor string

									var Latency string

									var Location string

									var OperPowerState string

									var OperState string

									var Operability string

									var Presence string

									//Skipping var Set with unknown data type int64

									var Speed string

									var Thermal string

									var Type string

									var Visibility string

									var Width string

									//Skipping var MemoryId with unknown data type int64

									//Skipping var MemoryArray with unknown data type MemoryArrayRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatememoryunit",

										Short: "Update a 'memory.Unit' resource.",
										Long: `Update a 'memory.Unit' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.UpdateMemoryUnit(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&AdminState, "AdminState", "", "AdminState")

									cmd.Flags().StringVar(&Capacity, "Capacity", "", "Capacity")

									cmd.Flags().StringVar(&Clock, "Clock", "", "Clock")

									cmd.Flags().StringVar(&FormFactor, "FormFactor", "", "FormFactor")

									cmd.Flags().StringVar(&Latency, "Latency", "", "Latency")

									cmd.Flags().StringVar(&Location, "Location", "", "Location")

									cmd.Flags().StringVar(&OperPowerState, "OperPowerState", "", "OperPowerState")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&Operability, "Operability", "", "Operability")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&Speed, "Speed", "", "Speed")

									cmd.Flags().StringVar(&Thermal, "Thermal", "", "Thermal")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									cmd.Flags().StringVar(&Visibility, "Visibility", "", "Visibility")

									cmd.Flags().StringVar(&Width, "Width", "", "Width")

									//Skipping var MemoryArray with unknown data type MemoryArrayRelationship
									if isMoRef(openapi.MemoryArrayRelationship{}) {
										cmd.Flags().String("MemoryArray", "", "MemoryArray")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "network",

								Short: "Create Network resource(s)",
								Long: `Create Network resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var AdminInbandInterfaceState string

									//Skipping var FaultSummary with unknown data type int64

									var InbandIpAddress string

									var InbandIpGateway string

									var InbandIpMask string

									//Skipping var InbandVlan with unknown data type int64

									var OutOfBandIpAddress string

									var OutOfBandIpGateway string

									var OutOfBandIpMask string

									var OutOfBandIpv4Address string

									var OutOfBandIpv4Gateway string

									var OutOfBandIpv4Mask string

									var OutOfBandIpv6Address string

									var OutOfBandIpv6Gateway string

									var OutOfBandIpv6Prefix string

									var OutOfBandMac string

									var SwitchId string

									//Skipping var Cards with unknown data type []EquipmentSwitchCardRelationship

									//Skipping var Fanmodules with unknown data type []EquipmentFanModuleRelationship

									//Skipping var ManagementContoller with unknown data type ManagementControllerRelationship

									//Skipping var ManagementEntity with unknown data type ManagementEntityRelationship

									//Skipping var Psus with unknown data type []EquipmentPsuRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var TopSystem with unknown data type TopSystemRelationship

									//Skipping var UcsmRunningFirmware with unknown data type FirmwareRunningFirmwareRelationship

									cmd := &cobra.Command{
										Use: "updatenetworkelement",

										Short: "Update a 'network.Element' resource.",
										Long: `Update a 'network.Element' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NetworkApi.UpdateNetworkElement(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&AdminInbandInterfaceState, "AdminInbandInterfaceState", "", "AdminInbandInterfaceState")

									cmd.Flags().StringVar(&InbandIpAddress, "InbandIpAddress", "", "InbandIpAddress")

									cmd.Flags().StringVar(&InbandIpGateway, "InbandIpGateway", "", "InbandIpGateway")

									cmd.Flags().StringVar(&InbandIpMask, "InbandIpMask", "", "InbandIpMask")

									cmd.Flags().StringVar(&OutOfBandIpAddress, "OutOfBandIpAddress", "", "OutOfBandIpAddress")

									cmd.Flags().StringVar(&OutOfBandIpGateway, "OutOfBandIpGateway", "", "OutOfBandIpGateway")

									cmd.Flags().StringVar(&OutOfBandIpMask, "OutOfBandIpMask", "", "OutOfBandIpMask")

									cmd.Flags().StringVar(&OutOfBandIpv4Address, "OutOfBandIpv4Address", "", "OutOfBandIpv4Address")

									cmd.Flags().StringVar(&OutOfBandIpv4Gateway, "OutOfBandIpv4Gateway", "", "OutOfBandIpv4Gateway")

									cmd.Flags().StringVar(&OutOfBandIpv4Mask, "OutOfBandIpv4Mask", "", "OutOfBandIpv4Mask")

									cmd.Flags().StringVar(&OutOfBandIpv6Address, "OutOfBandIpv6Address", "", "OutOfBandIpv6Address")

									cmd.Flags().StringVar(&OutOfBandIpv6Gateway, "OutOfBandIpv6Gateway", "", "OutOfBandIpv6Gateway")

									cmd.Flags().StringVar(&OutOfBandIpv6Prefix, "OutOfBandIpv6Prefix", "", "OutOfBandIpv6Prefix")

									cmd.Flags().StringVar(&OutOfBandMac, "OutOfBandMac", "", "OutOfBandMac")

									cmd.Flags().StringVar(&SwitchId, "SwitchId", "", "SwitchId")

									//Skipping var ManagementContoller with unknown data type ManagementControllerRelationship
									if isMoRef(openapi.ManagementControllerRelationship{}) {
										cmd.Flags().String("ManagementContoller", "", "ManagementContoller")
									}

									//Skipping var ManagementEntity with unknown data type ManagementEntityRelationship
									if isMoRef(openapi.ManagementEntityRelationship{}) {
										cmd.Flags().String("ManagementEntity", "", "ManagementEntity")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var TopSystem with unknown data type TopSystemRelationship
									if isMoRef(openapi.TopSystemRelationship{}) {
										cmd.Flags().String("TopSystem", "", "TopSystem")
									}

									//Skipping var UcsmRunningFirmware with unknown data type FirmwareRunningFirmwareRelationship
									if isMoRef(openapi.FirmwareRunningFirmwareRelationship{}) {
										cmd.Flags().String("UcsmRunningFirmware", "", "UcsmRunningFirmware")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "networkconfig",

								Short: "Create Networkconfig resource(s)",
								Long: `Create Networkconfig resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var AlternateIpv4dnsServer string

									var AlternateIpv6dnsServer string

									var DynamicDnsDomain string

									var EnableDynamicDns bool

									var EnableIpv4dnsFromDhcp bool

									var EnableIpv6 bool

									var EnableIpv6dnsFromDhcp bool

									var PreferredIpv4dnsServer string

									var PreferredIpv6dnsServer string

									//Skipping var ApplianceAccount with unknown data type IamAccountRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "policy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.NetworkconfigApi.CreateNetworkconfigPolicy(authCtx)

											body := openapi.NewNetworkconfigPolicy()

											//Set class id and object type by default
											body.ClassId = "networkconfig.Policy"
											body.ObjectType = "networkconfig.Policy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "AlternateIpv4dnsServer") {
												body.AlternateIpv4dnsServer = &AlternateIpv4dnsServer
											}

											if isFlagPassed(cmd.Flags(), "AlternateIpv6dnsServer") {
												body.AlternateIpv6dnsServer = &AlternateIpv6dnsServer
											}

											if isFlagPassed(cmd.Flags(), "DynamicDnsDomain") {
												body.DynamicDnsDomain = &DynamicDnsDomain
											}

											if isFlagPassed(cmd.Flags(), "EnableDynamicDns") {
												body.EnableDynamicDns = &EnableDynamicDns
											}

											if isFlagPassed(cmd.Flags(), "EnableIpv4dnsFromDhcp") {
												body.EnableIpv4dnsFromDhcp = &EnableIpv4dnsFromDhcp
											}

											if isFlagPassed(cmd.Flags(), "EnableIpv6") {
												body.EnableIpv6 = &EnableIpv6
											}

											if isFlagPassed(cmd.Flags(), "EnableIpv6dnsFromDhcp") {
												body.EnableIpv6dnsFromDhcp = &EnableIpv6dnsFromDhcp
											}

											if isFlagPassed(cmd.Flags(), "PreferredIpv4dnsServer") {
												body.PreferredIpv4dnsServer = &PreferredIpv4dnsServer
											}

											if isFlagPassed(cmd.Flags(), "PreferredIpv6dnsServer") {
												body.PreferredIpv6dnsServer = &PreferredIpv6dnsServer
											}

											if isFlagPassed(cmd.Flags(), "ApplianceAccount") && isMoRef(openapi.IamAccountRelationship{}) {
												if f, err := cmd.Flags().GetString("ApplianceAccount"); err == nil {
													paramVal := openapi.IamAccountRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ApplianceAccount = &paramVal
														//                                if v, ok := v.(openapi.IamAccountRelationship); ok {
														//                                    body.ApplianceAccount = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.NetworkconfigPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'networkconfig.Policy' resource.",
										Long: `Create a 'networkconfig.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&AlternateIpv4dnsServer, "AlternateIpv4dnsServer", "", "AlternateIpv4dnsServer")

									cmd.Flags().StringVar(&AlternateIpv6dnsServer, "AlternateIpv6dnsServer", "", "AlternateIpv6dnsServer")

									cmd.Flags().StringVar(&DynamicDnsDomain, "DynamicDnsDomain", "", "DynamicDnsDomain")

									cmd.Flags().BoolVar(&EnableDynamicDns, "EnableDynamicDns", false, "EnableDynamicDns")

									cmd.Flags().BoolVar(&EnableIpv4dnsFromDhcp, "EnableIpv4dnsFromDhcp", false, "EnableIpv4dnsFromDhcp")

									cmd.Flags().BoolVar(&EnableIpv6, "EnableIpv6", false, "EnableIpv6")

									cmd.Flags().BoolVar(&EnableIpv6dnsFromDhcp, "EnableIpv6dnsFromDhcp", false, "EnableIpv6dnsFromDhcp")

									cmd.Flags().StringVar(&PreferredIpv4dnsServer, "PreferredIpv4dnsServer", "", "PreferredIpv4dnsServer")

									cmd.Flags().StringVar(&PreferredIpv6dnsServer, "PreferredIpv6dnsServer", "", "PreferredIpv6dnsServer")

									//Skipping var ApplianceAccount with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("ApplianceAccount", "", "ApplianceAccount")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var AlternateIpv4dnsServer string

									var AlternateIpv6dnsServer string

									var DynamicDnsDomain string

									var EnableDynamicDns bool

									var EnableIpv4dnsFromDhcp bool

									var EnableIpv6 bool

									var EnableIpv6dnsFromDhcp bool

									var PreferredIpv4dnsServer string

									var PreferredIpv6dnsServer string

									//Skipping var ApplianceAccount with unknown data type IamAccountRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "updatenetworkconfigpolicy",

										Short: "Update a 'networkconfig.Policy' resource.",
										Long: `Update a 'networkconfig.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NetworkconfigApi.UpdateNetworkconfigPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&AlternateIpv4dnsServer, "AlternateIpv4dnsServer", "", "AlternateIpv4dnsServer")

									cmd.Flags().StringVar(&AlternateIpv6dnsServer, "AlternateIpv6dnsServer", "", "AlternateIpv6dnsServer")

									cmd.Flags().StringVar(&DynamicDnsDomain, "DynamicDnsDomain", "", "DynamicDnsDomain")

									cmd.Flags().BoolVar(&EnableDynamicDns, "EnableDynamicDns", false, "EnableDynamicDns")

									cmd.Flags().BoolVar(&EnableIpv4dnsFromDhcp, "EnableIpv4dnsFromDhcp", false, "EnableIpv4dnsFromDhcp")

									cmd.Flags().BoolVar(&EnableIpv6, "EnableIpv6", false, "EnableIpv6")

									cmd.Flags().BoolVar(&EnableIpv6dnsFromDhcp, "EnableIpv6dnsFromDhcp", false, "EnableIpv6dnsFromDhcp")

									cmd.Flags().StringVar(&PreferredIpv4dnsServer, "PreferredIpv4dnsServer", "", "PreferredIpv4dnsServer")

									cmd.Flags().StringVar(&PreferredIpv6dnsServer, "PreferredIpv6dnsServer", "", "PreferredIpv6dnsServer")

									//Skipping var ApplianceAccount with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("ApplianceAccount", "", "ApplianceAccount")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "ntp",

								Short: "Create Ntp resource(s)",
								Long: `Create Ntp resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Enabled bool

									var NtpServers []string

									//Skipping var ApplianceAccount with unknown data type IamAccountRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "policy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.NtpApi.CreateNtpPolicy(authCtx)

											body := openapi.NewNtpPolicy()

											//Set class id and object type by default
											body.ClassId = "ntp.Policy"
											body.ObjectType = "ntp.Policy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Enabled") {
												body.Enabled = &Enabled
											}

											if isFlagPassed(cmd.Flags(), "NtpServers") {
												body.NtpServers = &NtpServers
											}

											if isFlagPassed(cmd.Flags(), "ApplianceAccount") && isMoRef(openapi.IamAccountRelationship{}) {
												if f, err := cmd.Flags().GetString("ApplianceAccount"); err == nil {
													paramVal := openapi.IamAccountRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ApplianceAccount = &paramVal
														//                                if v, ok := v.(openapi.IamAccountRelationship); ok {
														//                                    body.ApplianceAccount = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.NtpPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'ntp.Policy' resource.",
										Long: `Create a 'ntp.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									cmd.Flags().StringSliceVar(&NtpServers, "NtpServers", []string{}, "NtpServers")

									//Skipping var ApplianceAccount with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("ApplianceAccount", "", "ApplianceAccount")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Enabled bool

									var NtpServers []string

									//Skipping var ApplianceAccount with unknown data type IamAccountRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "updatentppolicy",

										Short: "Update a 'ntp.Policy' resource.",
										Long: `Update a 'ntp.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NtpApi.UpdateNtpPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									cmd.Flags().StringSliceVar(&NtpServers, "NtpServers", []string{}, "NtpServers")

									//Skipping var ApplianceAccount with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("ApplianceAccount", "", "ApplianceAccount")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "organization",

								Short: "Create Organization resource(s)",
								Long: `Create Organization resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var ResourceGroups with unknown data type []ResourceGroupRelationship

									cmd := &cobra.Command{
										Use: "organization",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.OrganizationApi.CreateOrganizationOrganization(authCtx)

											body := openapi.NewOrganizationOrganization()

											//Set class id and object type by default
											body.ClassId = "organization.Organization"
											body.ObjectType = "organization.Organization"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Account") && isMoRef(openapi.IamAccountRelationship{}) {
												if f, err := cmd.Flags().GetString("Account"); err == nil {
													paramVal := openapi.IamAccountRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Account = &paramVal
														//                                if v, ok := v.(openapi.IamAccountRelationship); ok {
														//                                    body.Account = &v
														//                                }
													}
												}
											}

											req = req.OrganizationOrganization(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'organization.Organization' resource.",
										Long: `Create a 'organization.Organization' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var ResourceGroups with unknown data type []ResourceGroupRelationship

									cmd := &cobra.Command{
										Use: "updateorganizationorganization",

										Short: "Update a 'organization.Organization' resource.",
										Long: `Update a 'organization.Organization' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.OrganizationApi.UpdateOrganizationOrganization(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "os",

								Short: "Create Os resource(s)",
								Long: `Create Os resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var FileContent string

									var Name string

									//Skipping var Placeholders with unknown data type []OsPlaceHolder

									var Supported bool

									//Skipping var Catalog with unknown data type OsCatalogRelationship

									//Skipping var Distributions with unknown data type []HclOperatingSystemRelationship

									cmd := &cobra.Command{
										Use: "configurationfile",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.OsApi.CreateOsConfigurationFile(authCtx)

											body := openapi.NewOsConfigurationFile()

											//Set class id and object type by default
											body.ClassId = "os.ConfigurationFile"
											body.ObjectType = "os.ConfigurationFile"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "FileContent") {
												body.FileContent = &FileContent
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Supported") {
												body.Supported = &Supported
											}

											if isFlagPassed(cmd.Flags(), "Catalog") && isMoRef(openapi.OsCatalogRelationship{}) {
												if f, err := cmd.Flags().GetString("Catalog"); err == nil {
													paramVal := openapi.OsCatalogRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Catalog = &paramVal
														//                                if v, ok := v.(openapi.OsCatalogRelationship); ok {
														//                                    body.Catalog = &v
														//                                }
													}
												}
											}

											req = req.OsConfigurationFile(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'os.ConfigurationFile' resource.",
										Long: `Create a 'os.ConfigurationFile' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&FileContent, "FileContent", "", "FileContent")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&Supported, "Supported", false, "Supported")

									//Skipping var Catalog with unknown data type OsCatalogRelationship
									if isMoRef(openapi.OsCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var AdditionalParameters with unknown data type []OsPlaceHolder

									//Skipping var Answers with unknown data type OsAnswers

									var Description string

									var InstallMethod string

									//Skipping var OperatingSystemParameters with unknown data type OsOperatingSystemParameters

									var Name string

									//Skipping var ConfigurationFile with unknown data type OsConfigurationFileRelationship

									//Skipping var Image with unknown data type SoftwarerepositoryOperatingSystemFileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var OsduImage with unknown data type FirmwareServerConfigurationUtilityDistributableRelationship

									//Skipping var Server with unknown data type ComputePhysicalRelationship

									//Skipping var WorkflowInfo with unknown data type WorkflowWorkflowInfoRelationship

									cmd := &cobra.Command{
										Use: "install",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.OsApi.CreateOsInstall(authCtx)

											body := openapi.NewOsInstall()

											//Set class id and object type by default
											body.ClassId = "os.Install"
											body.ObjectType = "os.Install"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Answers") && isMoRef(openapi.OsAnswers{}) {
												if f, err := cmd.Flags().GetString("Answers"); err == nil {
													paramVal := openapi.OsAnswers{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Answers = &paramVal
														//                                if v, ok := v.(openapi.OsAnswers); ok {
														//                                    body.Answers = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "InstallMethod") {
												body.InstallMethod = &InstallMethod
											}

											if isFlagPassed(cmd.Flags(), "OperatingSystemParameters") && isMoRef(openapi.OsOperatingSystemParameters{}) {
												if f, err := cmd.Flags().GetString("OperatingSystemParameters"); err == nil {
													paramVal := openapi.OsOperatingSystemParameters{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.OperatingSystemParameters = &paramVal
														//                                if v, ok := v.(openapi.OsOperatingSystemParameters); ok {
														//                                    body.OperatingSystemParameters = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "ConfigurationFile") && isMoRef(openapi.OsConfigurationFileRelationship{}) {
												if f, err := cmd.Flags().GetString("ConfigurationFile"); err == nil {
													paramVal := openapi.OsConfigurationFileRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ConfigurationFile = &paramVal
														//                                if v, ok := v.(openapi.OsConfigurationFileRelationship); ok {
														//                                    body.ConfigurationFile = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Image") && isMoRef(openapi.SoftwarerepositoryOperatingSystemFileRelationship{}) {
												if f, err := cmd.Flags().GetString("Image"); err == nil {
													paramVal := openapi.SoftwarerepositoryOperatingSystemFileRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Image = &paramVal
														//                                if v, ok := v.(openapi.SoftwarerepositoryOperatingSystemFileRelationship); ok {
														//                                    body.Image = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "OsduImage") && isMoRef(openapi.FirmwareServerConfigurationUtilityDistributableRelationship{}) {
												if f, err := cmd.Flags().GetString("OsduImage"); err == nil {
													paramVal := openapi.FirmwareServerConfigurationUtilityDistributableRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.OsduImage = &paramVal
														//                                if v, ok := v.(openapi.FirmwareServerConfigurationUtilityDistributableRelationship); ok {
														//                                    body.OsduImage = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Server") && isMoRef(openapi.ComputePhysicalRelationship{}) {
												if f, err := cmd.Flags().GetString("Server"); err == nil {
													paramVal := openapi.ComputePhysicalRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Server = &paramVal
														//                                if v, ok := v.(openapi.ComputePhysicalRelationship); ok {
														//                                    body.Server = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "WorkflowInfo") && isMoRef(openapi.WorkflowWorkflowInfoRelationship{}) {
												if f, err := cmd.Flags().GetString("WorkflowInfo"); err == nil {
													paramVal := openapi.WorkflowWorkflowInfoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.WorkflowInfo = &paramVal
														//                                if v, ok := v.(openapi.WorkflowWorkflowInfoRelationship); ok {
														//                                    body.WorkflowInfo = &v
														//                                }
													}
												}
											}

											req = req.OsInstall(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'os.Install' resource.",
										Long: `Create a 'os.Install' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Answers with unknown data type OsAnswers
									if isMoRef(openapi.OsAnswers{}) {
										cmd.Flags().String("Answers", "", "Answers")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&InstallMethod, "InstallMethod", "", "InstallMethod")

									//Skipping var OperatingSystemParameters with unknown data type OsOperatingSystemParameters
									if isMoRef(openapi.OsOperatingSystemParameters{}) {
										cmd.Flags().String("OperatingSystemParameters", "", "OperatingSystemParameters")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var ConfigurationFile with unknown data type OsConfigurationFileRelationship
									if isMoRef(openapi.OsConfigurationFileRelationship{}) {
										cmd.Flags().String("ConfigurationFile", "", "ConfigurationFile")
									}

									//Skipping var Image with unknown data type SoftwarerepositoryOperatingSystemFileRelationship
									if isMoRef(openapi.SoftwarerepositoryOperatingSystemFileRelationship{}) {
										cmd.Flags().String("Image", "", "Image")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									//Skipping var OsduImage with unknown data type FirmwareServerConfigurationUtilityDistributableRelationship
									if isMoRef(openapi.FirmwareServerConfigurationUtilityDistributableRelationship{}) {
										cmd.Flags().String("OsduImage", "", "OsduImage")
									}

									//Skipping var Server with unknown data type ComputePhysicalRelationship
									if isMoRef(openapi.ComputePhysicalRelationship{}) {
										cmd.Flags().String("Server", "", "Server")
									}

									//Skipping var WorkflowInfo with unknown data type WorkflowWorkflowInfoRelationship
									if isMoRef(openapi.WorkflowWorkflowInfoRelationship{}) {
										cmd.Flags().String("WorkflowInfo", "", "WorkflowInfo")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var OsVersion string

									cmd := &cobra.Command{
										Use: "ossupport",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.OsApi.CreateOsOsSupport(authCtx)

											body := openapi.NewOsOsSupport()

											//Set class id and object type by default
											body.ClassId = "os.OsSupport"
											body.ObjectType = "os.OsSupport"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "OsVersion") {
												body.OsVersion = &OsVersion
											}

											req = req.OsOsSupport(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'os.OsSupport' resource.",
										Long: `Create a 'os.OsSupport' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&OsVersion, "OsVersion", "", "OsVersion")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Name string

									var Placeholders []string

									var TemplateContent string

									cmd := &cobra.Command{
										Use: "templatefile",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.OsApi.CreateOsTemplateFile(authCtx)

											body := openapi.NewOsTemplateFile()

											//Set class id and object type by default
											body.ClassId = "os.TemplateFile"
											body.ObjectType = "os.TemplateFile"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Placeholders") {
												body.Placeholders = &Placeholders
											}

											if isFlagPassed(cmd.Flags(), "TemplateContent") {
												body.TemplateContent = &TemplateContent
											}

											req = req.OsTemplateFile(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'os.TemplateFile' resource.",
										Long: `Create a 'os.TemplateFile' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringSliceVar(&Placeholders, "Placeholders", []string{}, "Placeholders")

									cmd.Flags().StringVar(&TemplateContent, "TemplateContent", "", "TemplateContent")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "pci",

								Short: "Create Pci resource(s)",
								Long: `Create Pci resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var FirmwareVersion string

									var Pid string

									var SlotId string

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatepcidevice",

										Short: "Update a 'pci.Device' resource.",
										Long: `Update a 'pci.Device' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.PciApi.UpdatePciDevice(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&FirmwareVersion, "FirmwareVersion", "", "FirmwareVersion")

									cmd.Flags().StringVar(&Pid, "Pid", "", "Pid")

									cmd.Flags().StringVar(&SlotId, "SlotId", "", "SlotId")

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship
									if isMoRef(openapi.ComputeBladeRelationship{}) {
										cmd.Flags().String("ComputeBlade", "", "ComputeBlade")
									}

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("ComputeRackUnit", "", "ComputeRackUnit")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var Adapter string

									var LinkSpeed string

									var LinkStatus string

									var LinkWidth string

									var PciSlot string

									var SlotStatus string

									//Skipping var PciSwitch with unknown data type PciSwitchRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatepcilink",

										Short: "Update a 'pci.Link' resource.",
										Long: `Update a 'pci.Link' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.PciApi.UpdatePciLink(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&Adapter, "Adapter", "", "Adapter")

									cmd.Flags().StringVar(&LinkSpeed, "LinkSpeed", "", "LinkSpeed")

									cmd.Flags().StringVar(&LinkStatus, "LinkStatus", "", "LinkStatus")

									cmd.Flags().StringVar(&LinkWidth, "LinkWidth", "", "LinkWidth")

									cmd.Flags().StringVar(&PciSlot, "PciSlot", "", "PciSlot")

									cmd.Flags().StringVar(&SlotStatus, "SlotStatus", "", "SlotStatus")

									//Skipping var PciSwitch with unknown data type PciSwitchRelationship
									if isMoRef(openapi.PciSwitchRelationship{}) {
										cmd.Flags().String("PciSwitch", "", "PciSwitch")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var DeviceId string

									var Health string

									var NumOfAdaptors string

									var PciAddress string

									var PciSlot string

									var ProductName string

									var ProductRevision string

									var SubDeviceId string

									var SubVendorId string

									var Temperature string

									var Type string

									var VendorId string

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship

									//Skipping var Links with unknown data type []PciLinkRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatepciswitch",

										Short: "Update a 'pci.Switch' resource.",
										Long: `Update a 'pci.Switch' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.PciApi.UpdatePciSwitch(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&DeviceId, "DeviceId", "", "DeviceId")

									cmd.Flags().StringVar(&Health, "Health", "", "Health")

									cmd.Flags().StringVar(&NumOfAdaptors, "NumOfAdaptors", "", "NumOfAdaptors")

									cmd.Flags().StringVar(&PciAddress, "PciAddress", "", "PciAddress")

									cmd.Flags().StringVar(&PciSlot, "PciSlot", "", "PciSlot")

									cmd.Flags().StringVar(&ProductName, "ProductName", "", "ProductName")

									cmd.Flags().StringVar(&ProductRevision, "ProductRevision", "", "ProductRevision")

									cmd.Flags().StringVar(&SubDeviceId, "SubDeviceId", "", "SubDeviceId")

									cmd.Flags().StringVar(&SubVendorId, "SubVendorId", "", "SubVendorId")

									cmd.Flags().StringVar(&Temperature, "Temperature", "", "Temperature")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									cmd.Flags().StringVar(&VendorId, "VendorId", "", "VendorId")

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship
									if isMoRef(openapi.ComputeBoardRelationship{}) {
										cmd.Flags().String("ComputeBoard", "", "ComputeBoard")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "port",

								Short: "Create Port resource(s)",
								Long: `Create Port resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Transport string

									//Skipping var EquipmentSharedIoModule with unknown data type EquipmentSharedIoModuleRelationship

									//Skipping var EquipmentSwitchCard with unknown data type EquipmentSwitchCardRelationship

									//Skipping var EthernetPorts with unknown data type []EtherPhysicalPortRelationship

									//Skipping var FcPorts with unknown data type []FcPhysicalPortRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var SubGroups with unknown data type []PortSubGroupRelationship

									cmd := &cobra.Command{
										Use: "updateportgroup",

										Short: "Update a 'port.Group' resource.",
										Long: `Update a 'port.Group' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.PortApi.UpdatePortGroup(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Transport, "Transport", "", "Transport")

									//Skipping var EquipmentSharedIoModule with unknown data type EquipmentSharedIoModuleRelationship
									if isMoRef(openapi.EquipmentSharedIoModuleRelationship{}) {
										cmd.Flags().String("EquipmentSharedIoModule", "", "EquipmentSharedIoModule")
									}

									//Skipping var EquipmentSwitchCard with unknown data type EquipmentSwitchCardRelationship
									if isMoRef(openapi.EquipmentSwitchCardRelationship{}) {
										cmd.Flags().String("EquipmentSwitchCard", "", "EquipmentSwitchCard")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Transport string

									//Skipping var EthernetPorts with unknown data type []EtherPhysicalPortRelationship

									//Skipping var PortGroup with unknown data type PortGroupRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updateportsubgroup",

										Short: "Update a 'port.SubGroup' resource.",
										Long: `Update a 'port.SubGroup' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.PortApi.UpdatePortSubGroup(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Transport, "Transport", "", "Transport")

									//Skipping var PortGroup with unknown data type PortGroupRelationship
									if isMoRef(openapi.PortGroupRelationship{}) {
										cmd.Flags().String("PortGroup", "", "PortGroup")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "processor",

								Short: "Create Processor resource(s)",
								Long: `Create Processor resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var Architecture string

									//Skipping var NumCores with unknown data type int64

									var NumCoresEnabled string

									var NumThreads string

									var OperPowerState string

									var OperState string

									var Operability string

									var Presence string

									//Skipping var ProcessorId with unknown data type int64

									var SocketDesignation string

									//Skipping var Speed with unknown data type float32

									var Stepping string

									var Thermal string

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updateprocessorunit",

										Short: "Update a 'processor.Unit' resource.",
										Long: `Update a 'processor.Unit' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ProcessorApi.UpdateProcessorUnit(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&Architecture, "Architecture", "", "Architecture")

									cmd.Flags().StringVar(&NumCoresEnabled, "NumCoresEnabled", "", "NumCoresEnabled")

									cmd.Flags().StringVar(&NumThreads, "NumThreads", "", "NumThreads")

									cmd.Flags().StringVar(&OperPowerState, "OperPowerState", "", "OperPowerState")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&Operability, "Operability", "", "Operability")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&SocketDesignation, "SocketDesignation", "", "SocketDesignation")

									cmd.Flags().StringVar(&Stepping, "Stepping", "", "Stepping")

									cmd.Flags().StringVar(&Thermal, "Thermal", "", "Thermal")

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship
									if isMoRef(openapi.ComputeBoardRelationship{}) {
										cmd.Flags().String("ComputeBoard", "", "ComputeBoard")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "recovery",

								Short: "Create Recovery resource(s)",
								Long: `Create Recovery resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var FileNamePrefix string

									var IsPasswordSet bool

									var LocationType string

									var Password string

									var Path string

									var Protocol string

									//Skipping var RetentionCount with unknown data type int64

									var UserName string

									//Skipping var BackupProfiles with unknown data type []RecoveryBackupProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "backupconfigpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.RecoveryApi.CreateRecoveryBackupConfigPolicy(authCtx)

											body := openapi.NewRecoveryBackupConfigPolicy()

											//Set class id and object type by default
											body.ClassId = "recovery.BackupConfigPolicy"
											body.ObjectType = "recovery.BackupConfigPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "FileNamePrefix") {
												body.FileNamePrefix = &FileNamePrefix
											}

											if isFlagPassed(cmd.Flags(), "IsPasswordSet") {
												body.IsPasswordSet = &IsPasswordSet
											}

											if isFlagPassed(cmd.Flags(), "LocationType") {
												body.LocationType = &LocationType
											}

											if isFlagPassed(cmd.Flags(), "Password") {
												body.Password = &Password
											}

											if isFlagPassed(cmd.Flags(), "Path") {
												body.Path = &Path
											}

											if isFlagPassed(cmd.Flags(), "Protocol") {
												body.Protocol = &Protocol
											}

											if isFlagPassed(cmd.Flags(), "UserName") {
												body.UserName = &UserName
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.RecoveryBackupConfigPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'recovery.BackupConfigPolicy' resource.",
										Long: `Create a 'recovery.BackupConfigPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&FileNamePrefix, "FileNamePrefix", "", "FileNamePrefix")

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().StringVar(&LocationType, "LocationType", "", "LocationType")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									cmd.Flags().StringVar(&Path, "Path", "", "Path")

									cmd.Flags().StringVar(&Protocol, "Protocol", "", "Protocol")

									cmd.Flags().StringVar(&UserName, "UserName", "", "UserName")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Type string

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship

									var Action string

									//Skipping var ConfigContext with unknown data type PolicyConfigContext

									var Enabled bool

									//Skipping var BackupConfig with unknown data type RecoveryBackupConfigPolicyRelationship

									//Skipping var ConfigResult with unknown data type RecoveryConfigResultRelationship

									//Skipping var DeviceId with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var ScheduleConfig with unknown data type RecoveryScheduleConfigPolicyRelationship

									cmd := &cobra.Command{
										Use: "backupprofile",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.RecoveryApi.CreateRecoveryBackupProfile(authCtx)

											body := openapi.NewRecoveryBackupProfile()

											//Set class id and object type by default
											body.ClassId = "recovery.BackupProfile"
											body.ObjectType = "recovery.BackupProfile"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Type") {
												body.Type = &Type
											}

											if isFlagPassed(cmd.Flags(), "SrcTemplate") && isMoRef(openapi.PolicyAbstractProfileRelationship{}) {
												if f, err := cmd.Flags().GetString("SrcTemplate"); err == nil {
													paramVal := openapi.PolicyAbstractProfileRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.SrcTemplate = &paramVal
														//                                if v, ok := v.(openapi.PolicyAbstractProfileRelationship); ok {
														//                                    body.SrcTemplate = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Action") {
												body.Action = &Action
											}

											if isFlagPassed(cmd.Flags(), "ConfigContext") && isMoRef(openapi.PolicyConfigContext{}) {
												if f, err := cmd.Flags().GetString("ConfigContext"); err == nil {
													paramVal := openapi.PolicyConfigContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ConfigContext = &paramVal
														//                                if v, ok := v.(openapi.PolicyConfigContext); ok {
														//                                    body.ConfigContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Enabled") {
												body.Enabled = &Enabled
											}

											if isFlagPassed(cmd.Flags(), "BackupConfig") && isMoRef(openapi.RecoveryBackupConfigPolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("BackupConfig"); err == nil {
													paramVal := openapi.RecoveryBackupConfigPolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.BackupConfig = &paramVal
														//                                if v, ok := v.(openapi.RecoveryBackupConfigPolicyRelationship); ok {
														//                                    body.BackupConfig = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ConfigResult") && isMoRef(openapi.RecoveryConfigResultRelationship{}) {
												if f, err := cmd.Flags().GetString("ConfigResult"); err == nil {
													paramVal := openapi.RecoveryConfigResultRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ConfigResult = &paramVal
														//                                if v, ok := v.(openapi.RecoveryConfigResultRelationship); ok {
														//                                    body.ConfigResult = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "DeviceId") && isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
												if f, err := cmd.Flags().GetString("DeviceId"); err == nil {
													paramVal := openapi.AssetDeviceRegistrationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.DeviceId = &paramVal
														//                                if v, ok := v.(openapi.AssetDeviceRegistrationRelationship); ok {
														//                                    body.DeviceId = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ScheduleConfig") && isMoRef(openapi.RecoveryScheduleConfigPolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("ScheduleConfig"); err == nil {
													paramVal := openapi.RecoveryScheduleConfigPolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ScheduleConfig = &paramVal
														//                                if v, ok := v.(openapi.RecoveryScheduleConfigPolicyRelationship); ok {
														//                                    body.ScheduleConfig = &v
														//                                }
													}
												}
											}

											req = req.RecoveryBackupProfile(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'recovery.BackupProfile' resource.",
										Long: `Create a 'recovery.BackupProfile' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship
									if isMoRef(openapi.PolicyAbstractProfileRelationship{}) {
										cmd.Flags().String("SrcTemplate", "", "SrcTemplate")
									}

									cmd.Flags().StringVar(&Action, "Action", "", "Action")

									//Skipping var ConfigContext with unknown data type PolicyConfigContext
									if isMoRef(openapi.PolicyConfigContext{}) {
										cmd.Flags().String("ConfigContext", "", "ConfigContext")
									}

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									//Skipping var BackupConfig with unknown data type RecoveryBackupConfigPolicyRelationship
									if isMoRef(openapi.RecoveryBackupConfigPolicyRelationship{}) {
										cmd.Flags().String("BackupConfig", "", "BackupConfig")
									}

									//Skipping var ConfigResult with unknown data type RecoveryConfigResultRelationship
									if isMoRef(openapi.RecoveryConfigResultRelationship{}) {
										cmd.Flags().String("ConfigResult", "", "ConfigResult")
									}

									//Skipping var DeviceId with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("DeviceId", "", "DeviceId")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									//Skipping var ScheduleConfig with unknown data type RecoveryScheduleConfigPolicyRelationship
									if isMoRef(openapi.RecoveryScheduleConfigPolicyRelationship{}) {
										cmd.Flags().String("ScheduleConfig", "", "ScheduleConfig")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var FileNamePrefix string

									var IsPasswordSet bool

									var LocationType string

									var Password string

									var Path string

									var Protocol string

									//Skipping var RetentionCount with unknown data type int64

									var UserName string

									//Skipping var ConfigResult with unknown data type RecoveryConfigResultRelationship

									//Skipping var DeviceId with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "ondemandbackup",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.RecoveryApi.CreateRecoveryOnDemandBackup(authCtx)

											body := openapi.NewRecoveryOnDemandBackup()

											//Set class id and object type by default
											body.ClassId = "recovery.OnDemandBackup"
											body.ObjectType = "recovery.OnDemandBackup"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "FileNamePrefix") {
												body.FileNamePrefix = &FileNamePrefix
											}

											if isFlagPassed(cmd.Flags(), "IsPasswordSet") {
												body.IsPasswordSet = &IsPasswordSet
											}

											if isFlagPassed(cmd.Flags(), "LocationType") {
												body.LocationType = &LocationType
											}

											if isFlagPassed(cmd.Flags(), "Password") {
												body.Password = &Password
											}

											if isFlagPassed(cmd.Flags(), "Path") {
												body.Path = &Path
											}

											if isFlagPassed(cmd.Flags(), "Protocol") {
												body.Protocol = &Protocol
											}

											if isFlagPassed(cmd.Flags(), "UserName") {
												body.UserName = &UserName
											}

											if isFlagPassed(cmd.Flags(), "ConfigResult") && isMoRef(openapi.RecoveryConfigResultRelationship{}) {
												if f, err := cmd.Flags().GetString("ConfigResult"); err == nil {
													paramVal := openapi.RecoveryConfigResultRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ConfigResult = &paramVal
														//                                if v, ok := v.(openapi.RecoveryConfigResultRelationship); ok {
														//                                    body.ConfigResult = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "DeviceId") && isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
												if f, err := cmd.Flags().GetString("DeviceId"); err == nil {
													paramVal := openapi.AssetDeviceRegistrationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.DeviceId = &paramVal
														//                                if v, ok := v.(openapi.AssetDeviceRegistrationRelationship); ok {
														//                                    body.DeviceId = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.RecoveryOnDemandBackup(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'recovery.OnDemandBackup' resource.",
										Long: `Create a 'recovery.OnDemandBackup' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&FileNamePrefix, "FileNamePrefix", "", "FileNamePrefix")

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().StringVar(&LocationType, "LocationType", "", "LocationType")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									cmd.Flags().StringVar(&Path, "Path", "", "Path")

									cmd.Flags().StringVar(&Protocol, "Protocol", "", "Protocol")

									cmd.Flags().StringVar(&UserName, "UserName", "", "UserName")

									//Skipping var ConfigResult with unknown data type RecoveryConfigResultRelationship
									if isMoRef(openapi.RecoveryConfigResultRelationship{}) {
										cmd.Flags().String("ConfigResult", "", "ConfigResult")
									}

									//Skipping var DeviceId with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("DeviceId", "", "DeviceId")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var ConfigParams with unknown data type RecoveryConfigParams

									//Skipping var BackupInfo with unknown data type RecoveryAbstractBackupInfoRelationship

									//Skipping var Device with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Workflow with unknown data type WorkflowWorkflowInfoRelationship

									cmd := &cobra.Command{
										Use: "restore",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.RecoveryApi.CreateRecoveryRestore(authCtx)

											body := openapi.NewRecoveryRestore()

											//Set class id and object type by default
											body.ClassId = "recovery.Restore"
											body.ObjectType = "recovery.Restore"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ConfigParams") && isMoRef(openapi.RecoveryConfigParams{}) {
												if f, err := cmd.Flags().GetString("ConfigParams"); err == nil {
													paramVal := openapi.RecoveryConfigParams{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ConfigParams = &paramVal
														//                                if v, ok := v.(openapi.RecoveryConfigParams); ok {
														//                                    body.ConfigParams = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "BackupInfo") && isMoRef(openapi.RecoveryAbstractBackupInfoRelationship{}) {
												if f, err := cmd.Flags().GetString("BackupInfo"); err == nil {
													paramVal := openapi.RecoveryAbstractBackupInfoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.BackupInfo = &paramVal
														//                                if v, ok := v.(openapi.RecoveryAbstractBackupInfoRelationship); ok {
														//                                    body.BackupInfo = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Device") && isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
												if f, err := cmd.Flags().GetString("Device"); err == nil {
													paramVal := openapi.AssetDeviceRegistrationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Device = &paramVal
														//                                if v, ok := v.(openapi.AssetDeviceRegistrationRelationship); ok {
														//                                    body.Device = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Workflow") && isMoRef(openapi.WorkflowWorkflowInfoRelationship{}) {
												if f, err := cmd.Flags().GetString("Workflow"); err == nil {
													paramVal := openapi.WorkflowWorkflowInfoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Workflow = &paramVal
														//                                if v, ok := v.(openapi.WorkflowWorkflowInfoRelationship); ok {
														//                                    body.Workflow = &v
														//                                }
													}
												}
											}

											req = req.RecoveryRestore(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'recovery.Restore' resource.",
										Long: `Create a 'recovery.Restore' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var ConfigParams with unknown data type RecoveryConfigParams
									if isMoRef(openapi.RecoveryConfigParams{}) {
										cmd.Flags().String("ConfigParams", "", "ConfigParams")
									}

									//Skipping var BackupInfo with unknown data type RecoveryAbstractBackupInfoRelationship
									if isMoRef(openapi.RecoveryAbstractBackupInfoRelationship{}) {
										cmd.Flags().String("BackupInfo", "", "BackupInfo")
									}

									//Skipping var Device with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("Device", "", "Device")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									//Skipping var Workflow with unknown data type WorkflowWorkflowInfoRelationship
									if isMoRef(openapi.WorkflowWorkflowInfoRelationship{}) {
										cmd.Flags().String("Workflow", "", "Workflow")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var Schedule with unknown data type RecoveryBackupSchedule

									//Skipping var BackupProfiles with unknown data type []RecoveryBackupProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "scheduleconfigpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.RecoveryApi.CreateRecoveryScheduleConfigPolicy(authCtx)

											body := openapi.NewRecoveryScheduleConfigPolicy()

											//Set class id and object type by default
											body.ClassId = "recovery.ScheduleConfigPolicy"
											body.ObjectType = "recovery.ScheduleConfigPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Schedule") && isMoRef(openapi.RecoveryBackupSchedule{}) {
												if f, err := cmd.Flags().GetString("Schedule"); err == nil {
													paramVal := openapi.RecoveryBackupSchedule{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Schedule = &paramVal
														//                                if v, ok := v.(openapi.RecoveryBackupSchedule); ok {
														//                                    body.Schedule = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.RecoveryScheduleConfigPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'recovery.ScheduleConfigPolicy' resource.",
										Long: `Create a 'recovery.ScheduleConfigPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Schedule with unknown data type RecoveryBackupSchedule
									if isMoRef(openapi.RecoveryBackupSchedule{}) {
										cmd.Flags().String("Schedule", "", "Schedule")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var FileNamePrefix string

									var IsPasswordSet bool

									var LocationType string

									var Password string

									var Path string

									var Protocol string

									//Skipping var RetentionCount with unknown data type int64

									var UserName string

									//Skipping var BackupProfiles with unknown data type []RecoveryBackupProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "updaterecoverybackupconfigpolicy",

										Short: "Update a 'recovery.BackupConfigPolicy' resource.",
										Long: `Update a 'recovery.BackupConfigPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.RecoveryApi.UpdateRecoveryBackupConfigPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&FileNamePrefix, "FileNamePrefix", "", "FileNamePrefix")

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().StringVar(&LocationType, "LocationType", "", "LocationType")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									cmd.Flags().StringVar(&Path, "Path", "", "Path")

									cmd.Flags().StringVar(&Protocol, "Protocol", "", "Protocol")

									cmd.Flags().StringVar(&UserName, "UserName", "", "UserName")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Type string

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship

									var Action string

									//Skipping var ConfigContext with unknown data type PolicyConfigContext

									var Enabled bool

									//Skipping var BackupConfig with unknown data type RecoveryBackupConfigPolicyRelationship

									//Skipping var ConfigResult with unknown data type RecoveryConfigResultRelationship

									//Skipping var DeviceId with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var ScheduleConfig with unknown data type RecoveryScheduleConfigPolicyRelationship

									cmd := &cobra.Command{
										Use: "updaterecoverybackupprofile",

										Short: "Update a 'recovery.BackupProfile' resource.",
										Long: `Update a 'recovery.BackupProfile' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.RecoveryApi.UpdateRecoveryBackupProfile(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship
									if isMoRef(openapi.PolicyAbstractProfileRelationship{}) {
										cmd.Flags().String("SrcTemplate", "", "SrcTemplate")
									}

									cmd.Flags().StringVar(&Action, "Action", "", "Action")

									//Skipping var ConfigContext with unknown data type PolicyConfigContext
									if isMoRef(openapi.PolicyConfigContext{}) {
										cmd.Flags().String("ConfigContext", "", "ConfigContext")
									}

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									//Skipping var BackupConfig with unknown data type RecoveryBackupConfigPolicyRelationship
									if isMoRef(openapi.RecoveryBackupConfigPolicyRelationship{}) {
										cmd.Flags().String("BackupConfig", "", "BackupConfig")
									}

									//Skipping var ConfigResult with unknown data type RecoveryConfigResultRelationship
									if isMoRef(openapi.RecoveryConfigResultRelationship{}) {
										cmd.Flags().String("ConfigResult", "", "ConfigResult")
									}

									//Skipping var DeviceId with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("DeviceId", "", "DeviceId")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									//Skipping var ScheduleConfig with unknown data type RecoveryScheduleConfigPolicyRelationship
									if isMoRef(openapi.RecoveryScheduleConfigPolicyRelationship{}) {
										cmd.Flags().String("ScheduleConfig", "", "ScheduleConfig")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var FileNamePrefix string

									var IsPasswordSet bool

									var LocationType string

									var Password string

									var Path string

									var Protocol string

									//Skipping var RetentionCount with unknown data type int64

									var UserName string

									//Skipping var ConfigResult with unknown data type RecoveryConfigResultRelationship

									//Skipping var DeviceId with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "updaterecoveryondemandbackup",

										Short: "Update a 'recovery.OnDemandBackup' resource.",
										Long: `Update a 'recovery.OnDemandBackup' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.RecoveryApi.UpdateRecoveryOnDemandBackup(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&FileNamePrefix, "FileNamePrefix", "", "FileNamePrefix")

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().StringVar(&LocationType, "LocationType", "", "LocationType")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									cmd.Flags().StringVar(&Path, "Path", "", "Path")

									cmd.Flags().StringVar(&Protocol, "Protocol", "", "Protocol")

									cmd.Flags().StringVar(&UserName, "UserName", "", "UserName")

									//Skipping var ConfigResult with unknown data type RecoveryConfigResultRelationship
									if isMoRef(openapi.RecoveryConfigResultRelationship{}) {
										cmd.Flags().String("ConfigResult", "", "ConfigResult")
									}

									//Skipping var DeviceId with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("DeviceId", "", "DeviceId")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var Schedule with unknown data type RecoveryBackupSchedule

									//Skipping var BackupProfiles with unknown data type []RecoveryBackupProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "updaterecoveryscheduleconfigpolicy",

										Short: "Update a 'recovery.ScheduleConfigPolicy' resource.",
										Long: `Update a 'recovery.ScheduleConfigPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.RecoveryApi.UpdateRecoveryScheduleConfigPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Schedule with unknown data type RecoveryBackupSchedule
									if isMoRef(openapi.RecoveryBackupSchedule{}) {
										cmd.Flags().String("Schedule", "", "Schedule")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "resource",

								Short: "Create Resource resource(s)",
								Long: `Create Resource resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Name string

									//Skipping var PerTypeCombinedSelector with unknown data type []ResourcePerTypeCombinedSelector

									var Qualifier string

									//Skipping var Selectors with unknown data type []ResourceSelector

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var Organizations with unknown data type []OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "group",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ResourceApi.CreateResourceGroup(authCtx)

											body := openapi.NewResourceGroup()

											//Set class id and object type by default
											body.ClassId = "resource.Group"
											body.ObjectType = "resource.Group"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Qualifier") {
												body.Qualifier = &Qualifier
											}

											if isFlagPassed(cmd.Flags(), "Account") && isMoRef(openapi.IamAccountRelationship{}) {
												if f, err := cmd.Flags().GetString("Account"); err == nil {
													paramVal := openapi.IamAccountRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Account = &paramVal
														//                                if v, ok := v.(openapi.IamAccountRelationship); ok {
														//                                    body.Account = &v
														//                                }
													}
												}
											}

											req = req.ResourceGroup(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'resource.Group' resource.",
										Long: `Create a 'resource.Group' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Qualifier, "Qualifier", "", "Qualifier")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Name string

									//Skipping var PerTypeCombinedSelector with unknown data type []ResourcePerTypeCombinedSelector

									var Qualifier string

									//Skipping var Selectors with unknown data type []ResourceSelector

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var Organizations with unknown data type []OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "updateresourcegroup",

										Short: "Update a 'resource.Group' resource.",
										Long: `Update a 'resource.Group' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ResourceApi.UpdateResourceGroup(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Qualifier, "Qualifier", "", "Qualifier")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "sdcard",

								Short: "Create Sdcard resource(s)",
								Long: `Create Sdcard resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var Partitions with unknown data type []SdcardPartition

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "policy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SdcardApi.CreateSdcardPolicy(authCtx)

											body := openapi.NewSdcardPolicy()

											//Set class id and object type by default
											body.ClassId = "sdcard.Policy"
											body.ObjectType = "sdcard.Policy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.SdcardPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'sdcard.Policy' resource.",
										Long: `Create a 'sdcard.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var Partitions with unknown data type []SdcardPartition

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "updatesdcardpolicy",

										Short: "Update a 'sdcard.Policy' resource.",
										Long: `Update a 'sdcard.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SdcardApi.UpdateSdcardPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "sdwan",

								Short: "Create Sdwan resource(s)",
								Long: `Create Sdwan resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Type string

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship

									var Action string

									//Skipping var ConfigContext with unknown data type PolicyConfigContext

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var RouterNodes with unknown data type []SdwanRouterNodeRelationship

									//Skipping var RouterPolicy with unknown data type SdwanRouterPolicyRelationship

									//Skipping var VmanageAccount with unknown data type SdwanVmanageAccountPolicyRelationship

									cmd := &cobra.Command{
										Use: "profile",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SdwanApi.CreateSdwanProfile(authCtx)

											body := openapi.NewSdwanProfile()

											//Set class id and object type by default
											body.ClassId = "sdwan.Profile"
											body.ObjectType = "sdwan.Profile"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Type") {
												body.Type = &Type
											}

											if isFlagPassed(cmd.Flags(), "SrcTemplate") && isMoRef(openapi.PolicyAbstractProfileRelationship{}) {
												if f, err := cmd.Flags().GetString("SrcTemplate"); err == nil {
													paramVal := openapi.PolicyAbstractProfileRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.SrcTemplate = &paramVal
														//                                if v, ok := v.(openapi.PolicyAbstractProfileRelationship); ok {
														//                                    body.SrcTemplate = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Action") {
												body.Action = &Action
											}

											if isFlagPassed(cmd.Flags(), "ConfigContext") && isMoRef(openapi.PolicyConfigContext{}) {
												if f, err := cmd.Flags().GetString("ConfigContext"); err == nil {
													paramVal := openapi.PolicyConfigContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ConfigContext = &paramVal
														//                                if v, ok := v.(openapi.PolicyConfigContext); ok {
														//                                    body.ConfigContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "RouterPolicy") && isMoRef(openapi.SdwanRouterPolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("RouterPolicy"); err == nil {
													paramVal := openapi.SdwanRouterPolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.RouterPolicy = &paramVal
														//                                if v, ok := v.(openapi.SdwanRouterPolicyRelationship); ok {
														//                                    body.RouterPolicy = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "VmanageAccount") && isMoRef(openapi.SdwanVmanageAccountPolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("VmanageAccount"); err == nil {
													paramVal := openapi.SdwanVmanageAccountPolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VmanageAccount = &paramVal
														//                                if v, ok := v.(openapi.SdwanVmanageAccountPolicyRelationship); ok {
														//                                    body.VmanageAccount = &v
														//                                }
													}
												}
											}

											req = req.SdwanProfile(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'sdwan.Profile' resource.",
										Long: `Create a 'sdwan.Profile' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship
									if isMoRef(openapi.PolicyAbstractProfileRelationship{}) {
										cmd.Flags().String("SrcTemplate", "", "SrcTemplate")
									}

									cmd.Flags().StringVar(&Action, "Action", "", "Action")

									//Skipping var ConfigContext with unknown data type PolicyConfigContext
									if isMoRef(openapi.PolicyConfigContext{}) {
										cmd.Flags().String("ConfigContext", "", "ConfigContext")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									//Skipping var RouterPolicy with unknown data type SdwanRouterPolicyRelationship
									if isMoRef(openapi.SdwanRouterPolicyRelationship{}) {
										cmd.Flags().String("RouterPolicy", "", "RouterPolicy")
									}

									//Skipping var VmanageAccount with unknown data type SdwanVmanageAccountPolicyRelationship
									if isMoRef(openapi.SdwanVmanageAccountPolicyRelationship{}) {
										cmd.Flags().String("VmanageAccount", "", "VmanageAccount")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceTemplate string

									var Name string

									//Skipping var NetworkConfiguration with unknown data type []SdwanNetworkConfigurationType

									//Skipping var TemplateInputs with unknown data type []SdwanTemplateInputsType

									var Uuid string

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profile with unknown data type SdwanProfileRelationship

									//Skipping var ServerNode with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "routernode",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SdwanApi.CreateSdwanRouterNode(authCtx)

											body := openapi.NewSdwanRouterNode()

											//Set class id and object type by default
											body.ClassId = "sdwan.RouterNode"
											body.ObjectType = "sdwan.RouterNode"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "DeviceTemplate") {
												body.DeviceTemplate = &DeviceTemplate
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Uuid") {
												body.Uuid = &Uuid
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Profile") && isMoRef(openapi.SdwanProfileRelationship{}) {
												if f, err := cmd.Flags().GetString("Profile"); err == nil {
													paramVal := openapi.SdwanProfileRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Profile = &paramVal
														//                                if v, ok := v.(openapi.SdwanProfileRelationship); ok {
														//                                    body.Profile = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ServerNode") && isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
												if f, err := cmd.Flags().GetString("ServerNode"); err == nil {
													paramVal := openapi.AssetDeviceRegistrationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ServerNode = &paramVal
														//                                if v, ok := v.(openapi.AssetDeviceRegistrationRelationship); ok {
														//                                    body.ServerNode = &v
														//                                }
													}
												}
											}

											req = req.SdwanRouterNode(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'sdwan.RouterNode' resource.",
										Long: `Create a 'sdwan.RouterNode' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceTemplate, "DeviceTemplate", "", "DeviceTemplate")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Uuid, "Uuid", "", "Uuid")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									//Skipping var Profile with unknown data type SdwanProfileRelationship
									if isMoRef(openapi.SdwanProfileRelationship{}) {
										cmd.Flags().String("Profile", "", "Profile")
									}

									//Skipping var ServerNode with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("ServerNode", "", "ServerNode")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var DeploymentSize string

									//Skipping var WanCount with unknown data type int64

									var WanTerminationType string

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []SdwanProfileRelationship

									//Skipping var SolutionImage with unknown data type SoftwareSolutionDistributableRelationship

									cmd := &cobra.Command{
										Use: "routerpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SdwanApi.CreateSdwanRouterPolicy(authCtx)

											body := openapi.NewSdwanRouterPolicy()

											//Set class id and object type by default
											body.ClassId = "sdwan.RouterPolicy"
											body.ObjectType = "sdwan.RouterPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "DeploymentSize") {
												body.DeploymentSize = &DeploymentSize
											}

											if isFlagPassed(cmd.Flags(), "WanTerminationType") {
												body.WanTerminationType = &WanTerminationType
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "SolutionImage") && isMoRef(openapi.SoftwareSolutionDistributableRelationship{}) {
												if f, err := cmd.Flags().GetString("SolutionImage"); err == nil {
													paramVal := openapi.SoftwareSolutionDistributableRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.SolutionImage = &paramVal
														//                                if v, ok := v.(openapi.SoftwareSolutionDistributableRelationship); ok {
														//                                    body.SolutionImage = &v
														//                                }
													}
												}
											}

											req = req.SdwanRouterPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'sdwan.RouterPolicy' resource.",
										Long: `Create a 'sdwan.RouterPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&DeploymentSize, "DeploymentSize", "", "DeploymentSize")

									cmd.Flags().StringVar(&WanTerminationType, "WanTerminationType", "", "WanTerminationType")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									//Skipping var SolutionImage with unknown data type SoftwareSolutionDistributableRelationship
									if isMoRef(openapi.SoftwareSolutionDistributableRelationship{}) {
										cmd.Flags().String("SolutionImage", "", "SolutionImage")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Type string

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship

									var Action string

									//Skipping var ConfigContext with unknown data type PolicyConfigContext

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var RouterNodes with unknown data type []SdwanRouterNodeRelationship

									//Skipping var RouterPolicy with unknown data type SdwanRouterPolicyRelationship

									//Skipping var VmanageAccount with unknown data type SdwanVmanageAccountPolicyRelationship

									cmd := &cobra.Command{
										Use: "updatesdwanprofile",

										Short: "Update a 'sdwan.Profile' resource.",
										Long: `Update a 'sdwan.Profile' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SdwanApi.UpdateSdwanProfile(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship
									if isMoRef(openapi.PolicyAbstractProfileRelationship{}) {
										cmd.Flags().String("SrcTemplate", "", "SrcTemplate")
									}

									cmd.Flags().StringVar(&Action, "Action", "", "Action")

									//Skipping var ConfigContext with unknown data type PolicyConfigContext
									if isMoRef(openapi.PolicyConfigContext{}) {
										cmd.Flags().String("ConfigContext", "", "ConfigContext")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									//Skipping var RouterPolicy with unknown data type SdwanRouterPolicyRelationship
									if isMoRef(openapi.SdwanRouterPolicyRelationship{}) {
										cmd.Flags().String("RouterPolicy", "", "RouterPolicy")
									}

									//Skipping var VmanageAccount with unknown data type SdwanVmanageAccountPolicyRelationship
									if isMoRef(openapi.SdwanVmanageAccountPolicyRelationship{}) {
										cmd.Flags().String("VmanageAccount", "", "VmanageAccount")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceTemplate string

									var Name string

									//Skipping var NetworkConfiguration with unknown data type []SdwanNetworkConfigurationType

									//Skipping var TemplateInputs with unknown data type []SdwanTemplateInputsType

									var Uuid string

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profile with unknown data type SdwanProfileRelationship

									//Skipping var ServerNode with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatesdwanrouternode",

										Short: "Update a 'sdwan.RouterNode' resource.",
										Long: `Update a 'sdwan.RouterNode' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SdwanApi.UpdateSdwanRouterNode(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceTemplate, "DeviceTemplate", "", "DeviceTemplate")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Uuid, "Uuid", "", "Uuid")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									//Skipping var Profile with unknown data type SdwanProfileRelationship
									if isMoRef(openapi.SdwanProfileRelationship{}) {
										cmd.Flags().String("Profile", "", "Profile")
									}

									//Skipping var ServerNode with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("ServerNode", "", "ServerNode")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var DeploymentSize string

									//Skipping var WanCount with unknown data type int64

									var WanTerminationType string

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []SdwanProfileRelationship

									//Skipping var SolutionImage with unknown data type SoftwareSolutionDistributableRelationship

									cmd := &cobra.Command{
										Use: "updatesdwanrouterpolicy",

										Short: "Update a 'sdwan.RouterPolicy' resource.",
										Long: `Update a 'sdwan.RouterPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SdwanApi.UpdateSdwanRouterPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&DeploymentSize, "DeploymentSize", "", "DeploymentSize")

									cmd.Flags().StringVar(&WanTerminationType, "WanTerminationType", "", "WanTerminationType")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									//Skipping var SolutionImage with unknown data type SoftwareSolutionDistributableRelationship
									if isMoRef(openapi.SoftwareSolutionDistributableRelationship{}) {
										cmd.Flags().String("SolutionImage", "", "SolutionImage")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var EndpointAddress string

									var IsPasswordSet bool

									var Password string

									//Skipping var Port with unknown data type int64

									var Username string

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []SdwanProfileRelationship

									cmd := &cobra.Command{
										Use: "updatesdwanvmanageaccountpolicy",

										Short: "Update a 'sdwan.VmanageAccountPolicy' resource.",
										Long: `Update a 'sdwan.VmanageAccountPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SdwanApi.UpdateSdwanVmanageAccountPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&EndpointAddress, "EndpointAddress", "", "EndpointAddress")

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									cmd.Flags().StringVar(&Username, "Username", "", "Username")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var EndpointAddress string

									var IsPasswordSet bool

									var Password string

									//Skipping var Port with unknown data type int64

									var Username string

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []SdwanProfileRelationship

									cmd := &cobra.Command{
										Use: "vmanageaccountpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SdwanApi.CreateSdwanVmanageAccountPolicy(authCtx)

											body := openapi.NewSdwanVmanageAccountPolicy()

											//Set class id and object type by default
											body.ClassId = "sdwan.VmanageAccountPolicy"
											body.ObjectType = "sdwan.VmanageAccountPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "EndpointAddress") {
												body.EndpointAddress = &EndpointAddress
											}

											if isFlagPassed(cmd.Flags(), "IsPasswordSet") {
												body.IsPasswordSet = &IsPasswordSet
											}

											if isFlagPassed(cmd.Flags(), "Password") {
												body.Password = &Password
											}

											if isFlagPassed(cmd.Flags(), "Username") {
												body.Username = &Username
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.SdwanVmanageAccountPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'sdwan.VmanageAccountPolicy' resource.",
										Long: `Create a 'sdwan.VmanageAccountPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&EndpointAddress, "EndpointAddress", "", "EndpointAddress")

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									cmd.Flags().StringVar(&Username, "Username", "", "Username")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "search",

								Short: "Create Search resource(s)",
								Long: `Create Search resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var CompleteMo bool

									var Rawquery string

									//Skipping var Skip with unknown data type int64

									var SuggestTerm string

									//Skipping var Top with unknown data type int64

									var Type string

									cmd := &cobra.Command{
										Use: "suggestitem",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SearchApi.CreateSearchSuggestItem(authCtx)

											body := openapi.NewSearchSuggestItem()

											//Set class id and object type by default
											body.ClassId = "search.SuggestItem"
											body.ObjectType = "search.SuggestItem"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "CompleteMo") {
												body.CompleteMo = &CompleteMo
											}

											if isFlagPassed(cmd.Flags(), "Rawquery") {
												body.Rawquery = &Rawquery
											}

											if isFlagPassed(cmd.Flags(), "SuggestTerm") {
												body.SuggestTerm = &SuggestTerm
											}

											if isFlagPassed(cmd.Flags(), "Type") {
												body.Type = &Type
											}

											req = req.SearchSuggestItem(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'search.SuggestItem' resource.",
										Long: `Create a 'search.SuggestItem' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&CompleteMo, "CompleteMo", false, "CompleteMo")

									cmd.Flags().StringVar(&Rawquery, "Rawquery", "", "Rawquery")

									cmd.Flags().StringVar(&SuggestTerm, "SuggestTerm", "", "SuggestTerm")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "security",

								Short: "Create Security resource(s)",
								Long: `Create Security resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var OperState string

									var Operability string

									var PartNumber string

									var PciSlot string

									var Power string

									var Presence string

									var Thermal string

									//Skipping var UnitId with unknown data type int64

									var Vid string

									var Voltage string

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatesecurityunit",

										Short: "Update a 'security.Unit' resource.",
										Long: `Update a 'security.Unit' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SecurityApi.UpdateSecurityUnit(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&Operability, "Operability", "", "Operability")

									cmd.Flags().StringVar(&PartNumber, "PartNumber", "", "PartNumber")

									cmd.Flags().StringVar(&PciSlot, "PciSlot", "", "PciSlot")

									cmd.Flags().StringVar(&Power, "Power", "", "Power")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&Thermal, "Thermal", "", "Thermal")

									cmd.Flags().StringVar(&Vid, "Vid", "", "Vid")

									cmd.Flags().StringVar(&Voltage, "Voltage", "", "Voltage")

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship
									if isMoRef(openapi.ComputeBoardRelationship{}) {
										cmd.Flags().String("ComputeBoard", "", "ComputeBoard")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "server",

								Short: "Create Server resource(s)",
								Long: `Create Server resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var PolicyPrefix string

									var PolicyTypes []string

									var ProfileName string

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Server with unknown data type ComputeRackUnitRelationship

									//Skipping var ServerProfile with unknown data type ServerProfileRelationship

									cmd := &cobra.Command{
										Use: "configimport",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ServerApi.CreateServerConfigImport(authCtx)

											body := openapi.NewServerConfigImport()

											//Set class id and object type by default
											body.ClassId = "server.ConfigImport"
											body.ObjectType = "server.ConfigImport"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "PolicyPrefix") {
												body.PolicyPrefix = &PolicyPrefix
											}

											if isFlagPassed(cmd.Flags(), "PolicyTypes") {
												body.PolicyTypes = &PolicyTypes
											}

											if isFlagPassed(cmd.Flags(), "ProfileName") {
												body.ProfileName = &ProfileName
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Server") && isMoRef(openapi.ComputeRackUnitRelationship{}) {
												if f, err := cmd.Flags().GetString("Server"); err == nil {
													paramVal := openapi.ComputeRackUnitRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Server = &paramVal
														//                                if v, ok := v.(openapi.ComputeRackUnitRelationship); ok {
														//                                    body.Server = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ServerProfile") && isMoRef(openapi.ServerProfileRelationship{}) {
												if f, err := cmd.Flags().GetString("ServerProfile"); err == nil {
													paramVal := openapi.ServerProfileRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ServerProfile = &paramVal
														//                                if v, ok := v.(openapi.ServerProfileRelationship); ok {
														//                                    body.ServerProfile = &v
														//                                }
													}
												}
											}

											req = req.ServerConfigImport(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'server.ConfigImport' resource.",
										Long: `Create a 'server.ConfigImport' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&PolicyPrefix, "PolicyPrefix", "", "PolicyPrefix")

									cmd.Flags().StringSliceVar(&PolicyTypes, "PolicyTypes", []string{}, "PolicyTypes")

									cmd.Flags().StringVar(&ProfileName, "ProfileName", "", "ProfileName")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									//Skipping var Server with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("Server", "", "Server")
									}

									//Skipping var ServerProfile with unknown data type ServerProfileRelationship
									if isMoRef(openapi.ServerProfileRelationship{}) {
										cmd.Flags().String("ServerProfile", "", "ServerProfile")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Type string

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship

									var Action string

									//Skipping var ConfigContext with unknown data type PolicyConfigContext

									//Skipping var ConfigChanges with unknown data type PolicyConfigChange

									var IsPmcDeployedSecurePassphraseSet bool

									var PmcDeployedSecurePassphrase string

									//Skipping var AssignedServer with unknown data type ComputeRackUnitRelationship

									//Skipping var AssociatedServer with unknown data type ComputeRackUnitRelationship

									//Skipping var ConfigChangeDetails with unknown data type []ServerConfigChangeDetailRelationship

									//Skipping var ConfigResult with unknown data type ServerConfigResultRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var RunningWorkflows with unknown data type []WorkflowWorkflowInfoRelationship

									cmd := &cobra.Command{
										Use: "profile",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ServerApi.CreateServerProfile(authCtx)

											body := openapi.NewServerProfile()

											//Set class id and object type by default
											body.ClassId = "server.Profile"
											body.ObjectType = "server.Profile"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Type") {
												body.Type = &Type
											}

											if isFlagPassed(cmd.Flags(), "SrcTemplate") && isMoRef(openapi.PolicyAbstractProfileRelationship{}) {
												if f, err := cmd.Flags().GetString("SrcTemplate"); err == nil {
													paramVal := openapi.PolicyAbstractProfileRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.SrcTemplate = &paramVal
														//                                if v, ok := v.(openapi.PolicyAbstractProfileRelationship); ok {
														//                                    body.SrcTemplate = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Action") {
												body.Action = &Action
											}

											if isFlagPassed(cmd.Flags(), "ConfigContext") && isMoRef(openapi.PolicyConfigContext{}) {
												if f, err := cmd.Flags().GetString("ConfigContext"); err == nil {
													paramVal := openapi.PolicyConfigContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ConfigContext = &paramVal
														//                                if v, ok := v.(openapi.PolicyConfigContext); ok {
														//                                    body.ConfigContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ConfigChanges") && isMoRef(openapi.PolicyConfigChange{}) {
												if f, err := cmd.Flags().GetString("ConfigChanges"); err == nil {
													paramVal := openapi.PolicyConfigChange{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ConfigChanges = &paramVal
														//                                if v, ok := v.(openapi.PolicyConfigChange); ok {
														//                                    body.ConfigChanges = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "IsPmcDeployedSecurePassphraseSet") {
												body.IsPmcDeployedSecurePassphraseSet = &IsPmcDeployedSecurePassphraseSet
											}

											if isFlagPassed(cmd.Flags(), "PmcDeployedSecurePassphrase") {
												body.PmcDeployedSecurePassphrase = &PmcDeployedSecurePassphrase
											}

											if isFlagPassed(cmd.Flags(), "AssignedServer") && isMoRef(openapi.ComputeRackUnitRelationship{}) {
												if f, err := cmd.Flags().GetString("AssignedServer"); err == nil {
													paramVal := openapi.ComputeRackUnitRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.AssignedServer = &paramVal
														//                                if v, ok := v.(openapi.ComputeRackUnitRelationship); ok {
														//                                    body.AssignedServer = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "AssociatedServer") && isMoRef(openapi.ComputeRackUnitRelationship{}) {
												if f, err := cmd.Flags().GetString("AssociatedServer"); err == nil {
													paramVal := openapi.ComputeRackUnitRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.AssociatedServer = &paramVal
														//                                if v, ok := v.(openapi.ComputeRackUnitRelationship); ok {
														//                                    body.AssociatedServer = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ConfigResult") && isMoRef(openapi.ServerConfigResultRelationship{}) {
												if f, err := cmd.Flags().GetString("ConfigResult"); err == nil {
													paramVal := openapi.ServerConfigResultRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ConfigResult = &paramVal
														//                                if v, ok := v.(openapi.ServerConfigResultRelationship); ok {
														//                                    body.ConfigResult = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.ServerProfile(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'server.Profile' resource.",
										Long: `Create a 'server.Profile' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship
									if isMoRef(openapi.PolicyAbstractProfileRelationship{}) {
										cmd.Flags().String("SrcTemplate", "", "SrcTemplate")
									}

									cmd.Flags().StringVar(&Action, "Action", "", "Action")

									//Skipping var ConfigContext with unknown data type PolicyConfigContext
									if isMoRef(openapi.PolicyConfigContext{}) {
										cmd.Flags().String("ConfigContext", "", "ConfigContext")
									}

									//Skipping var ConfigChanges with unknown data type PolicyConfigChange
									if isMoRef(openapi.PolicyConfigChange{}) {
										cmd.Flags().String("ConfigChanges", "", "ConfigChanges")
									}

									cmd.Flags().BoolVar(&IsPmcDeployedSecurePassphraseSet, "IsPmcDeployedSecurePassphraseSet", false, "IsPmcDeployedSecurePassphraseSet")

									cmd.Flags().StringVar(&PmcDeployedSecurePassphrase, "PmcDeployedSecurePassphrase", "", "PmcDeployedSecurePassphrase")

									//Skipping var AssignedServer with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("AssignedServer", "", "AssignedServer")
									}

									//Skipping var AssociatedServer with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("AssociatedServer", "", "AssociatedServer")
									}

									//Skipping var ConfigResult with unknown data type ServerConfigResultRelationship
									if isMoRef(openapi.ServerConfigResultRelationship{}) {
										cmd.Flags().String("ConfigResult", "", "ConfigResult")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Type string

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship

									var Action string

									//Skipping var ConfigContext with unknown data type PolicyConfigContext

									//Skipping var ConfigChanges with unknown data type PolicyConfigChange

									var IsPmcDeployedSecurePassphraseSet bool

									var PmcDeployedSecurePassphrase string

									//Skipping var AssignedServer with unknown data type ComputeRackUnitRelationship

									//Skipping var AssociatedServer with unknown data type ComputeRackUnitRelationship

									//Skipping var ConfigChangeDetails with unknown data type []ServerConfigChangeDetailRelationship

									//Skipping var ConfigResult with unknown data type ServerConfigResultRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var RunningWorkflows with unknown data type []WorkflowWorkflowInfoRelationship

									cmd := &cobra.Command{
										Use: "updateserverprofile",

										Short: "Update a 'server.Profile' resource.",
										Long: `Update a 'server.Profile' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ServerApi.UpdateServerProfile(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship
									if isMoRef(openapi.PolicyAbstractProfileRelationship{}) {
										cmd.Flags().String("SrcTemplate", "", "SrcTemplate")
									}

									cmd.Flags().StringVar(&Action, "Action", "", "Action")

									//Skipping var ConfigContext with unknown data type PolicyConfigContext
									if isMoRef(openapi.PolicyConfigContext{}) {
										cmd.Flags().String("ConfigContext", "", "ConfigContext")
									}

									//Skipping var ConfigChanges with unknown data type PolicyConfigChange
									if isMoRef(openapi.PolicyConfigChange{}) {
										cmd.Flags().String("ConfigChanges", "", "ConfigChanges")
									}

									cmd.Flags().BoolVar(&IsPmcDeployedSecurePassphraseSet, "IsPmcDeployedSecurePassphraseSet", false, "IsPmcDeployedSecurePassphraseSet")

									cmd.Flags().StringVar(&PmcDeployedSecurePassphrase, "PmcDeployedSecurePassphrase", "", "PmcDeployedSecurePassphrase")

									//Skipping var AssignedServer with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("AssignedServer", "", "AssignedServer")
									}

									//Skipping var AssociatedServer with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("AssociatedServer", "", "AssociatedServer")
									}

									//Skipping var ConfigResult with unknown data type ServerConfigResultRelationship
									if isMoRef(openapi.ServerConfigResultRelationship{}) {
										cmd.Flags().String("ConfigResult", "", "ConfigResult")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "smtp",

								Short: "Create Smtp resource(s)",
								Long: `Create Smtp resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Enabled bool

									var MinSeverity string

									var SenderEmail string

									//Skipping var SmtpPort with unknown data type int64

									var SmtpRecipients []string

									var SmtpServer string

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "policy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SmtpApi.CreateSmtpPolicy(authCtx)

											body := openapi.NewSmtpPolicy()

											//Set class id and object type by default
											body.ClassId = "smtp.Policy"
											body.ObjectType = "smtp.Policy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Enabled") {
												body.Enabled = &Enabled
											}

											if isFlagPassed(cmd.Flags(), "MinSeverity") {
												body.MinSeverity = &MinSeverity
											}

											if isFlagPassed(cmd.Flags(), "SenderEmail") {
												body.SenderEmail = &SenderEmail
											}

											if isFlagPassed(cmd.Flags(), "SmtpRecipients") {
												body.SmtpRecipients = &SmtpRecipients
											}

											if isFlagPassed(cmd.Flags(), "SmtpServer") {
												body.SmtpServer = &SmtpServer
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.SmtpPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'smtp.Policy' resource.",
										Long: `Create a 'smtp.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									cmd.Flags().StringVar(&MinSeverity, "MinSeverity", "", "MinSeverity")

									cmd.Flags().StringVar(&SenderEmail, "SenderEmail", "", "SenderEmail")

									cmd.Flags().StringSliceVar(&SmtpRecipients, "SmtpRecipients", []string{}, "SmtpRecipients")

									cmd.Flags().StringVar(&SmtpServer, "SmtpServer", "", "SmtpServer")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Enabled bool

									var MinSeverity string

									var SenderEmail string

									//Skipping var SmtpPort with unknown data type int64

									var SmtpRecipients []string

									var SmtpServer string

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "updatesmtppolicy",

										Short: "Update a 'smtp.Policy' resource.",
										Long: `Update a 'smtp.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SmtpApi.UpdateSmtpPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									cmd.Flags().StringVar(&MinSeverity, "MinSeverity", "", "MinSeverity")

									cmd.Flags().StringVar(&SenderEmail, "SenderEmail", "", "SenderEmail")

									cmd.Flags().StringSliceVar(&SmtpRecipients, "SmtpRecipients", []string{}, "SmtpRecipients")

									cmd.Flags().StringVar(&SmtpServer, "SmtpServer", "", "SmtpServer")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "snmp",

								Short: "Create Snmp resource(s)",
								Long: `Create Snmp resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var AccessCommunityString string

									var CommunityAccess string

									var Enabled bool

									var EngineId string

									//Skipping var SnmpPort with unknown data type int64

									//Skipping var SnmpTraps with unknown data type []SnmpTrap

									//Skipping var SnmpUsers with unknown data type []SnmpUser

									var SysContact string

									var SysLocation string

									var TrapCommunity string

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "policy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SnmpApi.CreateSnmpPolicy(authCtx)

											body := openapi.NewSnmpPolicy()

											//Set class id and object type by default
											body.ClassId = "snmp.Policy"
											body.ObjectType = "snmp.Policy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "AccessCommunityString") {
												body.AccessCommunityString = &AccessCommunityString
											}

											if isFlagPassed(cmd.Flags(), "CommunityAccess") {
												body.CommunityAccess = &CommunityAccess
											}

											if isFlagPassed(cmd.Flags(), "Enabled") {
												body.Enabled = &Enabled
											}

											if isFlagPassed(cmd.Flags(), "EngineId") {
												body.EngineId = &EngineId
											}

											if isFlagPassed(cmd.Flags(), "SysContact") {
												body.SysContact = &SysContact
											}

											if isFlagPassed(cmd.Flags(), "SysLocation") {
												body.SysLocation = &SysLocation
											}

											if isFlagPassed(cmd.Flags(), "TrapCommunity") {
												body.TrapCommunity = &TrapCommunity
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.SnmpPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'snmp.Policy' resource.",
										Long: `Create a 'snmp.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&AccessCommunityString, "AccessCommunityString", "", "AccessCommunityString")

									cmd.Flags().StringVar(&CommunityAccess, "CommunityAccess", "", "CommunityAccess")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									cmd.Flags().StringVar(&EngineId, "EngineId", "", "EngineId")

									cmd.Flags().StringVar(&SysContact, "SysContact", "", "SysContact")

									cmd.Flags().StringVar(&SysLocation, "SysLocation", "", "SysLocation")

									cmd.Flags().StringVar(&TrapCommunity, "TrapCommunity", "", "TrapCommunity")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var AccessCommunityString string

									var CommunityAccess string

									var Enabled bool

									var EngineId string

									//Skipping var SnmpPort with unknown data type int64

									//Skipping var SnmpTraps with unknown data type []SnmpTrap

									//Skipping var SnmpUsers with unknown data type []SnmpUser

									var SysContact string

									var SysLocation string

									var TrapCommunity string

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "updatesnmppolicy",

										Short: "Update a 'snmp.Policy' resource.",
										Long: `Update a 'snmp.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SnmpApi.UpdateSnmpPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&AccessCommunityString, "AccessCommunityString", "", "AccessCommunityString")

									cmd.Flags().StringVar(&CommunityAccess, "CommunityAccess", "", "CommunityAccess")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									cmd.Flags().StringVar(&EngineId, "EngineId", "", "EngineId")

									cmd.Flags().StringVar(&SysContact, "SysContact", "", "SysContact")

									cmd.Flags().StringVar(&SysLocation, "SysLocation", "", "SysLocation")

									cmd.Flags().StringVar(&TrapCommunity, "TrapCommunity", "", "TrapCommunity")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "software",

								Short: "Create Software resource(s)",
								Long: `Create Software resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									//Skipping var DownloadCount with unknown data type int64

									var ImportAction string

									var ImportState string

									//Skipping var ImportedTime with unknown data type time.Time

									//Skipping var LastAccessTime with unknown data type time.Time

									var Md5sum string

									var Name string

									//Skipping var ReleaseDate with unknown data type time.Time

									var Sha512sum string

									//Skipping var Size with unknown data type int64

									var SoftwareAdvisoryUrl string

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer

									var Version string

									var BundleType string

									var Guid string

									var Mdfid string

									var Model string

									var PlatformType string

									var RecommendedBuild string

									var ReleaseNotesUrl string

									var SoftwareTypeId string

									var SupportedModels []string

									var Vendor string

									var ContentType string

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship

									cmd := &cobra.Command{
										Use: "hclmeta",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SoftwareApi.CreateSoftwareHclMeta(authCtx)

											body := openapi.NewSoftwareHclMeta()

											//Set class id and object type by default
											body.ClassId = "software.HclMeta"
											body.ObjectType = "software.HclMeta"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "ImportAction") {
												body.ImportAction = &ImportAction
											}

											if isFlagPassed(cmd.Flags(), "ImportState") {
												body.ImportState = &ImportState
											}

											if isFlagPassed(cmd.Flags(), "Md5sum") {
												body.Md5sum = &Md5sum
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Sha512sum") {
												body.Sha512sum = &Sha512sum
											}

											if isFlagPassed(cmd.Flags(), "SoftwareAdvisoryUrl") {
												body.SoftwareAdvisoryUrl = &SoftwareAdvisoryUrl
											}

											if isFlagPassed(cmd.Flags(), "Source") && isMoRef(openapi.SoftwarerepositoryFileServer{}) {
												if f, err := cmd.Flags().GetString("Source"); err == nil {
													paramVal := openapi.SoftwarerepositoryFileServer{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Source = &paramVal
														//                                if v, ok := v.(openapi.SoftwarerepositoryFileServer); ok {
														//                                    body.Source = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Version") {
												body.Version = &Version
											}

											if isFlagPassed(cmd.Flags(), "BundleType") {
												body.BundleType = &BundleType
											}

											if isFlagPassed(cmd.Flags(), "Guid") {
												body.Guid = &Guid
											}

											if isFlagPassed(cmd.Flags(), "Mdfid") {
												body.Mdfid = &Mdfid
											}

											if isFlagPassed(cmd.Flags(), "Model") {
												body.Model = &Model
											}

											if isFlagPassed(cmd.Flags(), "PlatformType") {
												body.PlatformType = &PlatformType
											}

											if isFlagPassed(cmd.Flags(), "RecommendedBuild") {
												body.RecommendedBuild = &RecommendedBuild
											}

											if isFlagPassed(cmd.Flags(), "ReleaseNotesUrl") {
												body.ReleaseNotesUrl = &ReleaseNotesUrl
											}

											if isFlagPassed(cmd.Flags(), "SoftwareTypeId") {
												body.SoftwareTypeId = &SoftwareTypeId
											}

											if isFlagPassed(cmd.Flags(), "SupportedModels") {
												body.SupportedModels = &SupportedModels
											}

											if isFlagPassed(cmd.Flags(), "Vendor") {
												body.Vendor = &Vendor
											}

											if isFlagPassed(cmd.Flags(), "ContentType") {
												body.ContentType = &ContentType
											}

											if isFlagPassed(cmd.Flags(), "Catalog") && isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
												if f, err := cmd.Flags().GetString("Catalog"); err == nil {
													paramVal := openapi.SoftwarerepositoryCatalogRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Catalog = &paramVal
														//                                if v, ok := v.(openapi.SoftwarerepositoryCatalogRelationship); ok {
														//                                    body.Catalog = &v
														//                                }
													}
												}
											}

											req = req.SoftwareHclMeta(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'software.HclMeta' resource.",
										Long: `Create a 'software.HclMeta' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&ImportAction, "ImportAction", "", "ImportAction")

									cmd.Flags().StringVar(&ImportState, "ImportState", "", "ImportState")

									cmd.Flags().StringVar(&Md5sum, "Md5sum", "", "Md5sum")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Sha512sum, "Sha512sum", "", "Sha512sum")

									cmd.Flags().StringVar(&SoftwareAdvisoryUrl, "SoftwareAdvisoryUrl", "", "SoftwareAdvisoryUrl")

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer
									if isMoRef(openapi.SoftwarerepositoryFileServer{}) {
										cmd.Flags().String("Source", "", "Source")
									}

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									cmd.Flags().StringVar(&BundleType, "BundleType", "", "BundleType")

									cmd.Flags().StringVar(&Guid, "Guid", "", "Guid")

									cmd.Flags().StringVar(&Mdfid, "Mdfid", "", "Mdfid")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									cmd.Flags().StringVar(&RecommendedBuild, "RecommendedBuild", "", "RecommendedBuild")

									cmd.Flags().StringVar(&ReleaseNotesUrl, "ReleaseNotesUrl", "", "ReleaseNotesUrl")

									cmd.Flags().StringVar(&SoftwareTypeId, "SoftwareTypeId", "", "SoftwareTypeId")

									cmd.Flags().StringSliceVar(&SupportedModels, "SupportedModels", []string{}, "SupportedModels")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&ContentType, "ContentType", "", "ContentType")

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship
									if isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									//Skipping var DownloadCount with unknown data type int64

									var ImportAction string

									var ImportState string

									//Skipping var ImportedTime with unknown data type time.Time

									//Skipping var LastAccessTime with unknown data type time.Time

									var Md5sum string

									var Name string

									//Skipping var ReleaseDate with unknown data type time.Time

									var Sha512sum string

									//Skipping var Size with unknown data type int64

									var SoftwareAdvisoryUrl string

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer

									var Version string

									var BundleType string

									var Guid string

									var Mdfid string

									var Model string

									var PlatformType string

									var RecommendedBuild string

									var ReleaseNotesUrl string

									var SoftwareTypeId string

									var SupportedModels []string

									var Vendor string

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship

									cmd := &cobra.Command{
										Use: "hyperflexdistributable",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SoftwareApi.CreateSoftwareHyperflexDistributable(authCtx)

											body := openapi.NewSoftwareHyperflexDistributable()

											//Set class id and object type by default
											body.ClassId = "software.HyperflexDistributable"
											body.ObjectType = "software.HyperflexDistributable"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "ImportAction") {
												body.ImportAction = &ImportAction
											}

											if isFlagPassed(cmd.Flags(), "ImportState") {
												body.ImportState = &ImportState
											}

											if isFlagPassed(cmd.Flags(), "Md5sum") {
												body.Md5sum = &Md5sum
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Sha512sum") {
												body.Sha512sum = &Sha512sum
											}

											if isFlagPassed(cmd.Flags(), "SoftwareAdvisoryUrl") {
												body.SoftwareAdvisoryUrl = &SoftwareAdvisoryUrl
											}

											if isFlagPassed(cmd.Flags(), "Source") && isMoRef(openapi.SoftwarerepositoryFileServer{}) {
												if f, err := cmd.Flags().GetString("Source"); err == nil {
													paramVal := openapi.SoftwarerepositoryFileServer{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Source = &paramVal
														//                                if v, ok := v.(openapi.SoftwarerepositoryFileServer); ok {
														//                                    body.Source = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Version") {
												body.Version = &Version
											}

											if isFlagPassed(cmd.Flags(), "BundleType") {
												body.BundleType = &BundleType
											}

											if isFlagPassed(cmd.Flags(), "Guid") {
												body.Guid = &Guid
											}

											if isFlagPassed(cmd.Flags(), "Mdfid") {
												body.Mdfid = &Mdfid
											}

											if isFlagPassed(cmd.Flags(), "Model") {
												body.Model = &Model
											}

											if isFlagPassed(cmd.Flags(), "PlatformType") {
												body.PlatformType = &PlatformType
											}

											if isFlagPassed(cmd.Flags(), "RecommendedBuild") {
												body.RecommendedBuild = &RecommendedBuild
											}

											if isFlagPassed(cmd.Flags(), "ReleaseNotesUrl") {
												body.ReleaseNotesUrl = &ReleaseNotesUrl
											}

											if isFlagPassed(cmd.Flags(), "SoftwareTypeId") {
												body.SoftwareTypeId = &SoftwareTypeId
											}

											if isFlagPassed(cmd.Flags(), "SupportedModels") {
												body.SupportedModels = &SupportedModels
											}

											if isFlagPassed(cmd.Flags(), "Vendor") {
												body.Vendor = &Vendor
											}

											if isFlagPassed(cmd.Flags(), "Catalog") && isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
												if f, err := cmd.Flags().GetString("Catalog"); err == nil {
													paramVal := openapi.SoftwarerepositoryCatalogRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Catalog = &paramVal
														//                                if v, ok := v.(openapi.SoftwarerepositoryCatalogRelationship); ok {
														//                                    body.Catalog = &v
														//                                }
													}
												}
											}

											req = req.SoftwareHyperflexDistributable(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'software.HyperflexDistributable' resource.",
										Long: `Create a 'software.HyperflexDistributable' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&ImportAction, "ImportAction", "", "ImportAction")

									cmd.Flags().StringVar(&ImportState, "ImportState", "", "ImportState")

									cmd.Flags().StringVar(&Md5sum, "Md5sum", "", "Md5sum")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Sha512sum, "Sha512sum", "", "Sha512sum")

									cmd.Flags().StringVar(&SoftwareAdvisoryUrl, "SoftwareAdvisoryUrl", "", "SoftwareAdvisoryUrl")

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer
									if isMoRef(openapi.SoftwarerepositoryFileServer{}) {
										cmd.Flags().String("Source", "", "Source")
									}

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									cmd.Flags().StringVar(&BundleType, "BundleType", "", "BundleType")

									cmd.Flags().StringVar(&Guid, "Guid", "", "Guid")

									cmd.Flags().StringVar(&Mdfid, "Mdfid", "", "Mdfid")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									cmd.Flags().StringVar(&RecommendedBuild, "RecommendedBuild", "", "RecommendedBuild")

									cmd.Flags().StringVar(&ReleaseNotesUrl, "ReleaseNotesUrl", "", "ReleaseNotesUrl")

									cmd.Flags().StringVar(&SoftwareTypeId, "SoftwareTypeId", "", "SoftwareTypeId")

									cmd.Flags().StringSliceVar(&SupportedModels, "SupportedModels", []string{}, "SupportedModels")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship
									if isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									//Skipping var DownloadCount with unknown data type int64

									var ImportAction string

									var ImportState string

									//Skipping var ImportedTime with unknown data type time.Time

									//Skipping var LastAccessTime with unknown data type time.Time

									var Md5sum string

									var Name string

									//Skipping var ReleaseDate with unknown data type time.Time

									var Sha512sum string

									//Skipping var Size with unknown data type int64

									var SoftwareAdvisoryUrl string

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer

									var Version string

									var BundleType string

									var Guid string

									var Mdfid string

									var Model string

									var PlatformType string

									var RecommendedBuild string

									var ReleaseNotesUrl string

									var SoftwareTypeId string

									var SupportedModels []string

									var Vendor string

									var FilePath string

									var SolutionName string

									var SubType string

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship

									cmd := &cobra.Command{
										Use: "solutiondistributable",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SoftwareApi.CreateSoftwareSolutionDistributable(authCtx)

											body := openapi.NewSoftwareSolutionDistributable()

											//Set class id and object type by default
											body.ClassId = "software.SolutionDistributable"
											body.ObjectType = "software.SolutionDistributable"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "ImportAction") {
												body.ImportAction = &ImportAction
											}

											if isFlagPassed(cmd.Flags(), "ImportState") {
												body.ImportState = &ImportState
											}

											if isFlagPassed(cmd.Flags(), "Md5sum") {
												body.Md5sum = &Md5sum
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Sha512sum") {
												body.Sha512sum = &Sha512sum
											}

											if isFlagPassed(cmd.Flags(), "SoftwareAdvisoryUrl") {
												body.SoftwareAdvisoryUrl = &SoftwareAdvisoryUrl
											}

											if isFlagPassed(cmd.Flags(), "Source") && isMoRef(openapi.SoftwarerepositoryFileServer{}) {
												if f, err := cmd.Flags().GetString("Source"); err == nil {
													paramVal := openapi.SoftwarerepositoryFileServer{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Source = &paramVal
														//                                if v, ok := v.(openapi.SoftwarerepositoryFileServer); ok {
														//                                    body.Source = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Version") {
												body.Version = &Version
											}

											if isFlagPassed(cmd.Flags(), "BundleType") {
												body.BundleType = &BundleType
											}

											if isFlagPassed(cmd.Flags(), "Guid") {
												body.Guid = &Guid
											}

											if isFlagPassed(cmd.Flags(), "Mdfid") {
												body.Mdfid = &Mdfid
											}

											if isFlagPassed(cmd.Flags(), "Model") {
												body.Model = &Model
											}

											if isFlagPassed(cmd.Flags(), "PlatformType") {
												body.PlatformType = &PlatformType
											}

											if isFlagPassed(cmd.Flags(), "RecommendedBuild") {
												body.RecommendedBuild = &RecommendedBuild
											}

											if isFlagPassed(cmd.Flags(), "ReleaseNotesUrl") {
												body.ReleaseNotesUrl = &ReleaseNotesUrl
											}

											if isFlagPassed(cmd.Flags(), "SoftwareTypeId") {
												body.SoftwareTypeId = &SoftwareTypeId
											}

											if isFlagPassed(cmd.Flags(), "SupportedModels") {
												body.SupportedModels = &SupportedModels
											}

											if isFlagPassed(cmd.Flags(), "Vendor") {
												body.Vendor = &Vendor
											}

											if isFlagPassed(cmd.Flags(), "FilePath") {
												body.FilePath = &FilePath
											}

											if isFlagPassed(cmd.Flags(), "SolutionName") {
												body.SolutionName = &SolutionName
											}

											if isFlagPassed(cmd.Flags(), "SubType") {
												body.SubType = &SubType
											}

											if isFlagPassed(cmd.Flags(), "Catalog") && isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
												if f, err := cmd.Flags().GetString("Catalog"); err == nil {
													paramVal := openapi.SoftwarerepositoryCatalogRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Catalog = &paramVal
														//                                if v, ok := v.(openapi.SoftwarerepositoryCatalogRelationship); ok {
														//                                    body.Catalog = &v
														//                                }
													}
												}
											}

											req = req.SoftwareSolutionDistributable(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'software.SolutionDistributable' resource.",
										Long: `Create a 'software.SolutionDistributable' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&ImportAction, "ImportAction", "", "ImportAction")

									cmd.Flags().StringVar(&ImportState, "ImportState", "", "ImportState")

									cmd.Flags().StringVar(&Md5sum, "Md5sum", "", "Md5sum")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Sha512sum, "Sha512sum", "", "Sha512sum")

									cmd.Flags().StringVar(&SoftwareAdvisoryUrl, "SoftwareAdvisoryUrl", "", "SoftwareAdvisoryUrl")

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer
									if isMoRef(openapi.SoftwarerepositoryFileServer{}) {
										cmd.Flags().String("Source", "", "Source")
									}

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									cmd.Flags().StringVar(&BundleType, "BundleType", "", "BundleType")

									cmd.Flags().StringVar(&Guid, "Guid", "", "Guid")

									cmd.Flags().StringVar(&Mdfid, "Mdfid", "", "Mdfid")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									cmd.Flags().StringVar(&RecommendedBuild, "RecommendedBuild", "", "RecommendedBuild")

									cmd.Flags().StringVar(&ReleaseNotesUrl, "ReleaseNotesUrl", "", "ReleaseNotesUrl")

									cmd.Flags().StringVar(&SoftwareTypeId, "SoftwareTypeId", "", "SoftwareTypeId")

									cmd.Flags().StringSliceVar(&SupportedModels, "SupportedModels", []string{}, "SupportedModels")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&FilePath, "FilePath", "", "FilePath")

									cmd.Flags().StringVar(&SolutionName, "SolutionName", "", "SolutionName")

									cmd.Flags().StringVar(&SubType, "SubType", "", "SubType")

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship
									if isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									//Skipping var DownloadCount with unknown data type int64

									var ImportAction string

									var ImportState string

									//Skipping var ImportedTime with unknown data type time.Time

									//Skipping var LastAccessTime with unknown data type time.Time

									var Md5sum string

									var Name string

									//Skipping var ReleaseDate with unknown data type time.Time

									var Sha512sum string

									//Skipping var Size with unknown data type int64

									var SoftwareAdvisoryUrl string

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer

									var Version string

									var BundleType string

									var Guid string

									var Mdfid string

									var Model string

									var PlatformType string

									var RecommendedBuild string

									var ReleaseNotesUrl string

									var SoftwareTypeId string

									var SupportedModels []string

									var Vendor string

									var ContentType string

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship

									cmd := &cobra.Command{
										Use: "updatesoftwarehclmeta",

										Short: "Update a 'software.HclMeta' resource.",
										Long: `Update a 'software.HclMeta' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SoftwareApi.UpdateSoftwareHclMeta(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&ImportAction, "ImportAction", "", "ImportAction")

									cmd.Flags().StringVar(&ImportState, "ImportState", "", "ImportState")

									cmd.Flags().StringVar(&Md5sum, "Md5sum", "", "Md5sum")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Sha512sum, "Sha512sum", "", "Sha512sum")

									cmd.Flags().StringVar(&SoftwareAdvisoryUrl, "SoftwareAdvisoryUrl", "", "SoftwareAdvisoryUrl")

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer
									if isMoRef(openapi.SoftwarerepositoryFileServer{}) {
										cmd.Flags().String("Source", "", "Source")
									}

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									cmd.Flags().StringVar(&BundleType, "BundleType", "", "BundleType")

									cmd.Flags().StringVar(&Guid, "Guid", "", "Guid")

									cmd.Flags().StringVar(&Mdfid, "Mdfid", "", "Mdfid")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									cmd.Flags().StringVar(&RecommendedBuild, "RecommendedBuild", "", "RecommendedBuild")

									cmd.Flags().StringVar(&ReleaseNotesUrl, "ReleaseNotesUrl", "", "ReleaseNotesUrl")

									cmd.Flags().StringVar(&SoftwareTypeId, "SoftwareTypeId", "", "SoftwareTypeId")

									cmd.Flags().StringSliceVar(&SupportedModels, "SupportedModels", []string{}, "SupportedModels")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&ContentType, "ContentType", "", "ContentType")

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship
									if isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									//Skipping var DownloadCount with unknown data type int64

									var ImportAction string

									var ImportState string

									//Skipping var ImportedTime with unknown data type time.Time

									//Skipping var LastAccessTime with unknown data type time.Time

									var Md5sum string

									var Name string

									//Skipping var ReleaseDate with unknown data type time.Time

									var Sha512sum string

									//Skipping var Size with unknown data type int64

									var SoftwareAdvisoryUrl string

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer

									var Version string

									var BundleType string

									var Guid string

									var Mdfid string

									var Model string

									var PlatformType string

									var RecommendedBuild string

									var ReleaseNotesUrl string

									var SoftwareTypeId string

									var SupportedModels []string

									var Vendor string

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship

									cmd := &cobra.Command{
										Use: "updatesoftwarehyperflexdistributable",

										Short: "Update a 'software.HyperflexDistributable' resource.",
										Long: `Update a 'software.HyperflexDistributable' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SoftwareApi.UpdateSoftwareHyperflexDistributable(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&ImportAction, "ImportAction", "", "ImportAction")

									cmd.Flags().StringVar(&ImportState, "ImportState", "", "ImportState")

									cmd.Flags().StringVar(&Md5sum, "Md5sum", "", "Md5sum")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Sha512sum, "Sha512sum", "", "Sha512sum")

									cmd.Flags().StringVar(&SoftwareAdvisoryUrl, "SoftwareAdvisoryUrl", "", "SoftwareAdvisoryUrl")

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer
									if isMoRef(openapi.SoftwarerepositoryFileServer{}) {
										cmd.Flags().String("Source", "", "Source")
									}

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									cmd.Flags().StringVar(&BundleType, "BundleType", "", "BundleType")

									cmd.Flags().StringVar(&Guid, "Guid", "", "Guid")

									cmd.Flags().StringVar(&Mdfid, "Mdfid", "", "Mdfid")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									cmd.Flags().StringVar(&RecommendedBuild, "RecommendedBuild", "", "RecommendedBuild")

									cmd.Flags().StringVar(&ReleaseNotesUrl, "ReleaseNotesUrl", "", "ReleaseNotesUrl")

									cmd.Flags().StringVar(&SoftwareTypeId, "SoftwareTypeId", "", "SoftwareTypeId")

									cmd.Flags().StringSliceVar(&SupportedModels, "SupportedModels", []string{}, "SupportedModels")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship
									if isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									//Skipping var DownloadCount with unknown data type int64

									var ImportAction string

									var ImportState string

									//Skipping var ImportedTime with unknown data type time.Time

									//Skipping var LastAccessTime with unknown data type time.Time

									var Md5sum string

									var Name string

									//Skipping var ReleaseDate with unknown data type time.Time

									var Sha512sum string

									//Skipping var Size with unknown data type int64

									var SoftwareAdvisoryUrl string

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer

									var Version string

									var BundleType string

									var Guid string

									var Mdfid string

									var Model string

									var PlatformType string

									var RecommendedBuild string

									var ReleaseNotesUrl string

									var SoftwareTypeId string

									var SupportedModels []string

									var Vendor string

									var FilePath string

									var SolutionName string

									var SubType string

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship

									cmd := &cobra.Command{
										Use: "updatesoftwaresolutiondistributable",

										Short: "Update a 'software.SolutionDistributable' resource.",
										Long: `Update a 'software.SolutionDistributable' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SoftwareApi.UpdateSoftwareSolutionDistributable(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&ImportAction, "ImportAction", "", "ImportAction")

									cmd.Flags().StringVar(&ImportState, "ImportState", "", "ImportState")

									cmd.Flags().StringVar(&Md5sum, "Md5sum", "", "Md5sum")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Sha512sum, "Sha512sum", "", "Sha512sum")

									cmd.Flags().StringVar(&SoftwareAdvisoryUrl, "SoftwareAdvisoryUrl", "", "SoftwareAdvisoryUrl")

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer
									if isMoRef(openapi.SoftwarerepositoryFileServer{}) {
										cmd.Flags().String("Source", "", "Source")
									}

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									cmd.Flags().StringVar(&BundleType, "BundleType", "", "BundleType")

									cmd.Flags().StringVar(&Guid, "Guid", "", "Guid")

									cmd.Flags().StringVar(&Mdfid, "Mdfid", "", "Mdfid")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									cmd.Flags().StringVar(&RecommendedBuild, "RecommendedBuild", "", "RecommendedBuild")

									cmd.Flags().StringVar(&ReleaseNotesUrl, "ReleaseNotesUrl", "", "ReleaseNotesUrl")

									cmd.Flags().StringVar(&SoftwareTypeId, "SoftwareTypeId", "", "SoftwareTypeId")

									cmd.Flags().StringSliceVar(&SupportedModels, "SupportedModels", []string{}, "SupportedModels")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&FilePath, "FilePath", "", "FilePath")

									cmd.Flags().StringVar(&SolutionName, "SolutionName", "", "SolutionName")

									cmd.Flags().StringVar(&SubType, "SubType", "", "SubType")

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship
									if isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "softwarerepository",

								Short: "Create Softwarerepository resource(s)",
								Long: `Create Softwarerepository resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var IsPasswordSet bool

									var IsUserIdSet bool

									var Password string

									var RepositoryType string

									var UserId string

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "authorization",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SoftwarerepositoryApi.CreateSoftwarerepositoryAuthorization(authCtx)

											body := openapi.NewSoftwarerepositoryAuthorization()

											//Set class id and object type by default
											body.ClassId = "softwarerepository.Authorization"
											body.ObjectType = "softwarerepository.Authorization"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "IsPasswordSet") {
												body.IsPasswordSet = &IsPasswordSet
											}

											if isFlagPassed(cmd.Flags(), "IsUserIdSet") {
												body.IsUserIdSet = &IsUserIdSet
											}

											if isFlagPassed(cmd.Flags(), "Password") {
												body.Password = &Password
											}

											if isFlagPassed(cmd.Flags(), "RepositoryType") {
												body.RepositoryType = &RepositoryType
											}

											if isFlagPassed(cmd.Flags(), "UserId") {
												body.UserId = &UserId
											}

											if isFlagPassed(cmd.Flags(), "Account") && isMoRef(openapi.IamAccountRelationship{}) {
												if f, err := cmd.Flags().GetString("Account"); err == nil {
													paramVal := openapi.IamAccountRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Account = &paramVal
														//                                if v, ok := v.(openapi.IamAccountRelationship); ok {
														//                                    body.Account = &v
														//                                }
													}
												}
											}

											req = req.SoftwarerepositoryAuthorization(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'softwarerepository.Authorization' resource.",
										Long: `Create a 'softwarerepository.Authorization' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().BoolVar(&IsUserIdSet, "IsUserIdSet", false, "IsUserIdSet")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									cmd.Flags().StringVar(&RepositoryType, "RepositoryType", "", "RepositoryType")

									cmd.Flags().StringVar(&UserId, "UserId", "", "UserId")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									//Skipping var DownloadCount with unknown data type int64

									var ImportAction string

									var ImportState string

									//Skipping var ImportedTime with unknown data type time.Time

									//Skipping var LastAccessTime with unknown data type time.Time

									var Md5sum string

									var Name string

									//Skipping var ReleaseDate with unknown data type time.Time

									var Sha512sum string

									//Skipping var Size with unknown data type int64

									var SoftwareAdvisoryUrl string

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer

									var Version string

									var Vendor string

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship

									cmd := &cobra.Command{
										Use: "operatingsystemfile",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SoftwarerepositoryApi.CreateSoftwarerepositoryOperatingSystemFile(authCtx)

											body := openapi.NewSoftwarerepositoryOperatingSystemFile()

											//Set class id and object type by default
											body.ClassId = "softwarerepository.OperatingSystemFile"
											body.ObjectType = "softwarerepository.OperatingSystemFile"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "ImportAction") {
												body.ImportAction = &ImportAction
											}

											if isFlagPassed(cmd.Flags(), "ImportState") {
												body.ImportState = &ImportState
											}

											if isFlagPassed(cmd.Flags(), "Md5sum") {
												body.Md5sum = &Md5sum
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Sha512sum") {
												body.Sha512sum = &Sha512sum
											}

											if isFlagPassed(cmd.Flags(), "SoftwareAdvisoryUrl") {
												body.SoftwareAdvisoryUrl = &SoftwareAdvisoryUrl
											}

											if isFlagPassed(cmd.Flags(), "Source") && isMoRef(openapi.SoftwarerepositoryFileServer{}) {
												if f, err := cmd.Flags().GetString("Source"); err == nil {
													paramVal := openapi.SoftwarerepositoryFileServer{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Source = &paramVal
														//                                if v, ok := v.(openapi.SoftwarerepositoryFileServer); ok {
														//                                    body.Source = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Version") {
												body.Version = &Version
											}

											if isFlagPassed(cmd.Flags(), "Vendor") {
												body.Vendor = &Vendor
											}

											if isFlagPassed(cmd.Flags(), "Catalog") && isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
												if f, err := cmd.Flags().GetString("Catalog"); err == nil {
													paramVal := openapi.SoftwarerepositoryCatalogRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Catalog = &paramVal
														//                                if v, ok := v.(openapi.SoftwarerepositoryCatalogRelationship); ok {
														//                                    body.Catalog = &v
														//                                }
													}
												}
											}

											req = req.SoftwarerepositoryOperatingSystemFile(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'softwarerepository.OperatingSystemFile' resource.",
										Long: `Create a 'softwarerepository.OperatingSystemFile' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&ImportAction, "ImportAction", "", "ImportAction")

									cmd.Flags().StringVar(&ImportState, "ImportState", "", "ImportState")

									cmd.Flags().StringVar(&Md5sum, "Md5sum", "", "Md5sum")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Sha512sum, "Sha512sum", "", "Sha512sum")

									cmd.Flags().StringVar(&SoftwareAdvisoryUrl, "SoftwareAdvisoryUrl", "", "SoftwareAdvisoryUrl")

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer
									if isMoRef(openapi.SoftwarerepositoryFileServer{}) {
										cmd.Flags().String("Source", "", "Source")
									}

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship
									if isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var IsPasswordSet bool

									var IsUserIdSet bool

									var Password string

									var RepositoryType string

									var UserId string

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "updatesoftwarerepositoryauthorization",

										Short: "Update a 'softwarerepository.Authorization' resource.",
										Long: `Update a 'softwarerepository.Authorization' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SoftwarerepositoryApi.UpdateSoftwarerepositoryAuthorization(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().BoolVar(&IsUserIdSet, "IsUserIdSet", false, "IsUserIdSet")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									cmd.Flags().StringVar(&RepositoryType, "RepositoryType", "", "RepositoryType")

									cmd.Flags().StringVar(&UserId, "UserId", "", "UserId")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									//Skipping var DownloadCount with unknown data type int64

									var ImportAction string

									var ImportState string

									//Skipping var ImportedTime with unknown data type time.Time

									//Skipping var LastAccessTime with unknown data type time.Time

									var Md5sum string

									var Name string

									//Skipping var ReleaseDate with unknown data type time.Time

									var Sha512sum string

									//Skipping var Size with unknown data type int64

									var SoftwareAdvisoryUrl string

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer

									var Version string

									var Vendor string

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship

									cmd := &cobra.Command{
										Use: "updatesoftwarerepositoryoperatingsystemfile",

										Short: "Update a 'softwarerepository.OperatingSystemFile' resource.",
										Long: `Update a 'softwarerepository.OperatingSystemFile' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SoftwarerepositoryApi.UpdateSoftwarerepositoryOperatingSystemFile(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&ImportAction, "ImportAction", "", "ImportAction")

									cmd.Flags().StringVar(&ImportState, "ImportState", "", "ImportState")

									cmd.Flags().StringVar(&Md5sum, "Md5sum", "", "Md5sum")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Sha512sum, "Sha512sum", "", "Sha512sum")

									cmd.Flags().StringVar(&SoftwareAdvisoryUrl, "SoftwareAdvisoryUrl", "", "SoftwareAdvisoryUrl")

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer
									if isMoRef(openapi.SoftwarerepositoryFileServer{}) {
										cmd.Flags().String("Source", "", "Source")
									}

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship
									if isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "sol",

								Short: "Create Sol resource(s)",
								Long: `Create Sol resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var BaudRate with unknown data type int32

									var ComPort string

									var Enabled bool

									//Skipping var SshPort with unknown data type int64

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "policy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SolApi.CreateSolPolicy(authCtx)

											body := openapi.NewSolPolicy()

											//Set class id and object type by default
											body.ClassId = "sol.Policy"
											body.ObjectType = "sol.Policy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "ComPort") {
												body.ComPort = &ComPort
											}

											if isFlagPassed(cmd.Flags(), "Enabled") {
												body.Enabled = &Enabled
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.SolPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'sol.Policy' resource.",
										Long: `Create a 'sol.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&ComPort, "ComPort", "", "ComPort")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var BaudRate with unknown data type int32

									var ComPort string

									var Enabled bool

									//Skipping var SshPort with unknown data type int64

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "updatesolpolicy",

										Short: "Update a 'sol.Policy' resource.",
										Long: `Update a 'sol.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SolApi.UpdateSolPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&ComPort, "ComPort", "", "ComPort")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "ssh",

								Short: "Create Ssh resource(s)",
								Long: `Create Ssh resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Enabled bool

									//Skipping var Port with unknown data type int64

									//Skipping var Timeout with unknown data type int64

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "policy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SshApi.CreateSshPolicy(authCtx)

											body := openapi.NewSshPolicy()

											//Set class id and object type by default
											body.ClassId = "ssh.Policy"
											body.ObjectType = "ssh.Policy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Enabled") {
												body.Enabled = &Enabled
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.SshPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'ssh.Policy' resource.",
										Long: `Create a 'ssh.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Enabled bool

									//Skipping var Port with unknown data type int64

									//Skipping var Timeout with unknown data type int64

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "updatesshpolicy",

										Short: "Update a 'ssh.Policy' resource.",
										Long: `Update a 'ssh.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SshApi.UpdateSshPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "storage",

								Short: "Create Storage resource(s)",
								Long: `Create Storage resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var DedicatedHotSpares with unknown data type []StorageLocalDisk

									var RaidLevel string

									//Skipping var SpanGroups with unknown data type []StorageSpanGroup

									var UseJbods bool

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var StoragePolicies with unknown data type []StorageStoragePolicyRelationship

									cmd := &cobra.Command{
										Use: "diskgrouppolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.CreateStorageDiskGroupPolicy(authCtx)

											body := openapi.NewStorageDiskGroupPolicy()

											//Set class id and object type by default
											body.ClassId = "storage.DiskGroupPolicy"
											body.ObjectType = "storage.DiskGroupPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "RaidLevel") {
												body.RaidLevel = &RaidLevel
											}

											if isFlagPassed(cmd.Flags(), "UseJbods") {
												body.UseJbods = &UseJbods
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.StorageDiskGroupPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'storage.DiskGroupPolicy' resource.",
										Long: `Create a 'storage.DiskGroupPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&RaidLevel, "RaidLevel", "", "RaidLevel")

									cmd.Flags().BoolVar(&UseJbods, "UseJbods", false, "UseJbods")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var GlobalHotSpares with unknown data type []StorageLocalDisk

									var RetainPolicyVirtualDrives bool

									var UnusedDisksState string

									//Skipping var VirtualDrives with unknown data type []StorageVirtualDriveConfig

									//Skipping var DiskGroupPolicies with unknown data type []StorageDiskGroupPolicyRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "storagepolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.CreateStorageStoragePolicy(authCtx)

											body := openapi.NewStorageStoragePolicy()

											//Set class id and object type by default
											body.ClassId = "storage.StoragePolicy"
											body.ObjectType = "storage.StoragePolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "RetainPolicyVirtualDrives") {
												body.RetainPolicyVirtualDrives = &RetainPolicyVirtualDrives
											}

											if isFlagPassed(cmd.Flags(), "UnusedDisksState") {
												body.UnusedDisksState = &UnusedDisksState
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.StorageStoragePolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'storage.StoragePolicy' resource.",
										Long: `Create a 'storage.StoragePolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&RetainPolicyVirtualDrives, "RetainPolicyVirtualDrives", false, "RetainPolicyVirtualDrives")

									cmd.Flags().StringVar(&UnusedDisksState, "UnusedDisksState", "", "UnusedDisksState")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var ControllerFlags string

									var ControllerId string

									var ControllerStatus string

									var HwRevision string

									var OobInterfaceSupported string

									var OperState string

									var Operability string

									var PciAddr string

									var PciSlot string

									var Presence string

									var RaidSupport string

									var RebuildRate string

									var SelfEncryptEnabled string

									var Type string

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship

									//Skipping var PhysicalDiskExtensions with unknown data type []StoragePhysicalDiskExtensionRelationship

									//Skipping var PhysicalDisks with unknown data type []StoragePhysicalDiskRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var RunningFirmware with unknown data type []FirmwareRunningFirmwareRelationship

									//Skipping var VirtualDriveExtensions with unknown data type []StorageVirtualDriveExtensionRelationship

									//Skipping var VirtualDrives with unknown data type []StorageVirtualDriveRelationship

									cmd := &cobra.Command{
										Use: "updatestoragecontroller",

										Short: "Update a 'storage.Controller' resource.",
										Long: `Update a 'storage.Controller' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.UpdateStorageController(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&ControllerFlags, "ControllerFlags", "", "ControllerFlags")

									cmd.Flags().StringVar(&ControllerId, "ControllerId", "", "ControllerId")

									cmd.Flags().StringVar(&ControllerStatus, "ControllerStatus", "", "ControllerStatus")

									cmd.Flags().StringVar(&HwRevision, "HwRevision", "", "HwRevision")

									cmd.Flags().StringVar(&OobInterfaceSupported, "OobInterfaceSupported", "", "OobInterfaceSupported")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&Operability, "Operability", "", "Operability")

									cmd.Flags().StringVar(&PciAddr, "PciAddr", "", "PciAddr")

									cmd.Flags().StringVar(&PciSlot, "PciSlot", "", "PciSlot")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&RaidSupport, "RaidSupport", "", "RaidSupport")

									cmd.Flags().StringVar(&RebuildRate, "RebuildRate", "", "RebuildRate")

									cmd.Flags().StringVar(&SelfEncryptEnabled, "SelfEncryptEnabled", "", "SelfEncryptEnabled")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship
									if isMoRef(openapi.ComputeBoardRelationship{}) {
										cmd.Flags().String("ComputeBoard", "", "ComputeBoard")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var DedicatedHotSpares with unknown data type []StorageLocalDisk

									var RaidLevel string

									//Skipping var SpanGroups with unknown data type []StorageSpanGroup

									var UseJbods bool

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var StoragePolicies with unknown data type []StorageStoragePolicyRelationship

									cmd := &cobra.Command{
										Use: "updatestoragediskgrouppolicy",

										Short: "Update a 'storage.DiskGroupPolicy' resource.",
										Long: `Update a 'storage.DiskGroupPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.UpdateStorageDiskGroupPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&RaidLevel, "RaidLevel", "", "RaidLevel")

									cmd.Flags().BoolVar(&UseJbods, "UseJbods", false, "UseJbods")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									//Skipping var ChassisId with unknown data type int64

									var Description string

									//Skipping var EnclosureId with unknown data type int64

									//Skipping var NumSlots with unknown data type int64

									var Presence string

									//Skipping var ServerId with unknown data type int64

									var Type string

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship

									//Skipping var EnclosureDiskSlots with unknown data type []StorageEnclosureDiskSlotEpRelationship

									//Skipping var EnclosureDisks with unknown data type []StorageEnclosureDiskRelationship

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship

									//Skipping var PhysicalDisks with unknown data type []StoragePhysicalDiskRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatestorageenclosure",

										Short: "Update a 'storage.Enclosure' resource.",
										Long: `Update a 'storage.Enclosure' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.UpdateStorageEnclosure(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship
									if isMoRef(openapi.ComputeBladeRelationship{}) {
										cmd.Flags().String("ComputeBlade", "", "ComputeBlade")
									}

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("ComputeRackUnit", "", "ComputeRackUnit")
									}

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship
									if isMoRef(openapi.EquipmentChassisRelationship{}) {
										cmd.Flags().String("EquipmentChassis", "", "EquipmentChassis")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var BlockSize string

									var DiskId string

									var DiskState string

									var Health string

									var NumBlocks string

									var Pid string

									var SasAddress1 string

									var SasAddress2 string

									var Size string

									//Skipping var PhysicalDisk with unknown data type StoragePhysicalDiskRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StorageEnclosure with unknown data type StorageEnclosureRelationship

									cmd := &cobra.Command{
										Use: "updatestorageenclosuredisk",

										Short: "Update a 'storage.EnclosureDisk' resource.",
										Long: `Update a 'storage.EnclosureDisk' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.UpdateStorageEnclosureDisk(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&BlockSize, "BlockSize", "", "BlockSize")

									cmd.Flags().StringVar(&DiskId, "DiskId", "", "DiskId")

									cmd.Flags().StringVar(&DiskState, "DiskState", "", "DiskState")

									cmd.Flags().StringVar(&Health, "Health", "", "Health")

									cmd.Flags().StringVar(&NumBlocks, "NumBlocks", "", "NumBlocks")

									cmd.Flags().StringVar(&Pid, "Pid", "", "Pid")

									cmd.Flags().StringVar(&SasAddress1, "SasAddress1", "", "SasAddress1")

									cmd.Flags().StringVar(&SasAddress2, "SasAddress2", "", "SasAddress2")

									cmd.Flags().StringVar(&Size, "Size", "", "Size")

									//Skipping var PhysicalDisk with unknown data type StoragePhysicalDiskRelationship
									if isMoRef(openapi.StoragePhysicalDiskRelationship{}) {
										cmd.Flags().String("PhysicalDisk", "", "PhysicalDisk")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageEnclosure with unknown data type StorageEnclosureRelationship
									if isMoRef(openapi.StorageEnclosureRelationship{}) {
										cmd.Flags().String("StorageEnclosure", "", "StorageEnclosure")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var DrivePath string

									var Health string

									var Presence string

									var Slot string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StorageEnclosure with unknown data type StorageEnclosureRelationship

									cmd := &cobra.Command{
										Use: "updatestorageenclosurediskslotep",

										Short: "Update a 'storage.EnclosureDiskSlotEp' resource.",
										Long: `Update a 'storage.EnclosureDiskSlotEp' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.UpdateStorageEnclosureDiskSlotEp(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&DrivePath, "DrivePath", "", "DrivePath")

									cmd.Flags().StringVar(&Health, "Health", "", "Health")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&Slot, "Slot", "", "Slot")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageEnclosure with unknown data type StorageEnclosureRelationship
									if isMoRef(openapi.StorageEnclosureRelationship{}) {
										cmd.Flags().String("StorageEnclosure", "", "StorageEnclosure")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var ControllerState string

									var FfControllerId string

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship

									//Skipping var FlexFlashControllerProps with unknown data type []StorageFlexFlashControllerPropsRelationship

									//Skipping var FlexFlashPhysicalDrives with unknown data type []StorageFlexFlashPhysicalDriveRelationship

									//Skipping var FlexFlashVirtualDrives with unknown data type []StorageFlexFlashVirtualDriveRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatestorageflexflashcontroller",

										Short: "Update a 'storage.FlexFlashController' resource.",
										Long: `Update a 'storage.FlexFlashController' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.UpdateStorageFlexFlashController(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&ControllerState, "ControllerState", "", "ControllerState")

									cmd.Flags().StringVar(&FfControllerId, "FfControllerId", "", "FfControllerId")

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship
									if isMoRef(openapi.ComputeBoardRelationship{}) {
										cmd.Flags().String("ComputeBoard", "", "ComputeBoard")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var CardsManageable string

									var ConfiguredMode string

									var ControllerName string

									var ControllerStatus string

									var FwVersion string

									var InternalState string

									var OperatingMode string

									var PhysicalDriveCount string

									var ProductName string

									var StartupFwVersion string

									var VirtualDriveCount string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StorageFlexFlashController with unknown data type StorageFlexFlashControllerRelationship

									cmd := &cobra.Command{
										Use: "updatestorageflexflashcontrollerprops",

										Short: "Update a 'storage.FlexFlashControllerProps' resource.",
										Long: `Update a 'storage.FlexFlashControllerProps' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.UpdateStorageFlexFlashControllerProps(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&CardsManageable, "CardsManageable", "", "CardsManageable")

									cmd.Flags().StringVar(&ConfiguredMode, "ConfiguredMode", "", "ConfiguredMode")

									cmd.Flags().StringVar(&ControllerName, "ControllerName", "", "ControllerName")

									cmd.Flags().StringVar(&ControllerStatus, "ControllerStatus", "", "ControllerStatus")

									cmd.Flags().StringVar(&FwVersion, "FwVersion", "", "FwVersion")

									cmd.Flags().StringVar(&InternalState, "InternalState", "", "InternalState")

									cmd.Flags().StringVar(&OperatingMode, "OperatingMode", "", "OperatingMode")

									cmd.Flags().StringVar(&PhysicalDriveCount, "PhysicalDriveCount", "", "PhysicalDriveCount")

									cmd.Flags().StringVar(&ProductName, "ProductName", "", "ProductName")

									cmd.Flags().StringVar(&StartupFwVersion, "StartupFwVersion", "", "StartupFwVersion")

									cmd.Flags().StringVar(&VirtualDriveCount, "VirtualDriveCount", "", "VirtualDriveCount")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageFlexFlashController with unknown data type StorageFlexFlashControllerRelationship
									if isMoRef(openapi.StorageFlexFlashControllerRelationship{}) {
										cmd.Flags().String("StorageFlexFlashController", "", "StorageFlexFlashController")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var CardStatus string

									var CardType string

									var OemId string

									var PdStatus string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StorageFlexFlashController with unknown data type StorageFlexFlashControllerRelationship

									cmd := &cobra.Command{
										Use: "updatestorageflexflashphysicaldrive",

										Short: "Update a 'storage.FlexFlashPhysicalDrive' resource.",
										Long: `Update a 'storage.FlexFlashPhysicalDrive' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.UpdateStorageFlexFlashPhysicalDrive(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&CardStatus, "CardStatus", "", "CardStatus")

									cmd.Flags().StringVar(&CardType, "CardType", "", "CardType")

									cmd.Flags().StringVar(&OemId, "OemId", "", "OemId")

									cmd.Flags().StringVar(&PdStatus, "PdStatus", "", "PdStatus")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageFlexFlashController with unknown data type StorageFlexFlashControllerRelationship
									if isMoRef(openapi.StorageFlexFlashControllerRelationship{}) {
										cmd.Flags().String("StorageFlexFlashController", "", "StorageFlexFlashController")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var DriveScope string

									var DriveStatus string

									var PartitionId string

									var ResidentImage string

									var Size string

									var VirtualDrive string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StorageFlexFlashController with unknown data type StorageFlexFlashControllerRelationship

									cmd := &cobra.Command{
										Use: "updatestorageflexflashvirtualdrive",

										Short: "Update a 'storage.FlexFlashVirtualDrive' resource.",
										Long: `Update a 'storage.FlexFlashVirtualDrive' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.UpdateStorageFlexFlashVirtualDrive(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&DriveScope, "DriveScope", "", "DriveScope")

									cmd.Flags().StringVar(&DriveStatus, "DriveStatus", "", "DriveStatus")

									cmd.Flags().StringVar(&PartitionId, "PartitionId", "", "PartitionId")

									cmd.Flags().StringVar(&ResidentImage, "ResidentImage", "", "ResidentImage")

									cmd.Flags().StringVar(&Size, "Size", "", "Size")

									cmd.Flags().StringVar(&VirtualDrive, "VirtualDrive", "", "VirtualDrive")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageFlexFlashController with unknown data type StorageFlexFlashControllerRelationship
									if isMoRef(openapi.StorageFlexFlashControllerRelationship{}) {
										cmd.Flags().String("StorageFlexFlashController", "", "StorageFlexFlashController")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var ControllerName string

									var ControllerStatus string

									var FfControllerId string

									var InternalState string

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship

									//Skipping var FlexUtilPhysicalDrives with unknown data type []StorageFlexUtilPhysicalDriveRelationship

									//Skipping var FlexUtilVirtualDrives with unknown data type []StorageFlexUtilVirtualDriveRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatestorageflexutilcontroller",

										Short: "Update a 'storage.FlexUtilController' resource.",
										Long: `Update a 'storage.FlexUtilController' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.UpdateStorageFlexUtilController(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&ControllerName, "ControllerName", "", "ControllerName")

									cmd.Flags().StringVar(&ControllerStatus, "ControllerStatus", "", "ControllerStatus")

									cmd.Flags().StringVar(&FfControllerId, "FfControllerId", "", "FfControllerId")

									cmd.Flags().StringVar(&InternalState, "InternalState", "", "InternalState")

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship
									if isMoRef(openapi.ComputeBoardRelationship{}) {
										cmd.Flags().String("ComputeBoard", "", "ComputeBoard")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var BlockSize string

									var Capacity string

									var Controller string

									var DrivesEnabled string

									var Health string

									var ManufacturerDate string

									var ManufacturerId string

									var OemId string

									var PartitionCount string

									var PdStatus string

									var PhysicalDrive string

									var ProductName string

									var ProductRevision string

									var ReadErrorCount string

									var ReadErrorThreshold string

									var WriteEnabled string

									var WriteErrorCount string

									var WriteErrorThreshold string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StorageFlexUtilController with unknown data type StorageFlexUtilControllerRelationship

									cmd := &cobra.Command{
										Use: "updatestorageflexutilphysicaldrive",

										Short: "Update a 'storage.FlexUtilPhysicalDrive' resource.",
										Long: `Update a 'storage.FlexUtilPhysicalDrive' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.UpdateStorageFlexUtilPhysicalDrive(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&BlockSize, "BlockSize", "", "BlockSize")

									cmd.Flags().StringVar(&Capacity, "Capacity", "", "Capacity")

									cmd.Flags().StringVar(&Controller, "Controller", "", "Controller")

									cmd.Flags().StringVar(&DrivesEnabled, "DrivesEnabled", "", "DrivesEnabled")

									cmd.Flags().StringVar(&Health, "Health", "", "Health")

									cmd.Flags().StringVar(&ManufacturerDate, "ManufacturerDate", "", "ManufacturerDate")

									cmd.Flags().StringVar(&ManufacturerId, "ManufacturerId", "", "ManufacturerId")

									cmd.Flags().StringVar(&OemId, "OemId", "", "OemId")

									cmd.Flags().StringVar(&PartitionCount, "PartitionCount", "", "PartitionCount")

									cmd.Flags().StringVar(&PdStatus, "PdStatus", "", "PdStatus")

									cmd.Flags().StringVar(&PhysicalDrive, "PhysicalDrive", "", "PhysicalDrive")

									cmd.Flags().StringVar(&ProductName, "ProductName", "", "ProductName")

									cmd.Flags().StringVar(&ProductRevision, "ProductRevision", "", "ProductRevision")

									cmd.Flags().StringVar(&ReadErrorCount, "ReadErrorCount", "", "ReadErrorCount")

									cmd.Flags().StringVar(&ReadErrorThreshold, "ReadErrorThreshold", "", "ReadErrorThreshold")

									cmd.Flags().StringVar(&WriteEnabled, "WriteEnabled", "", "WriteEnabled")

									cmd.Flags().StringVar(&WriteErrorCount, "WriteErrorCount", "", "WriteErrorCount")

									cmd.Flags().StringVar(&WriteErrorThreshold, "WriteErrorThreshold", "", "WriteErrorThreshold")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageFlexUtilController with unknown data type StorageFlexUtilControllerRelationship
									if isMoRef(openapi.StorageFlexUtilControllerRelationship{}) {
										cmd.Flags().String("StorageFlexUtilController", "", "StorageFlexUtilController")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var DriveStatus string

									var DriveType string

									var PartitionId string

									var PartitionName string

									var ResidentImage string

									var Size string

									var VirtualDrive string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StorageFlexUtilController with unknown data type StorageFlexUtilControllerRelationship

									cmd := &cobra.Command{
										Use: "updatestorageflexutilvirtualdrive",

										Short: "Update a 'storage.FlexUtilVirtualDrive' resource.",
										Long: `Update a 'storage.FlexUtilVirtualDrive' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.UpdateStorageFlexUtilVirtualDrive(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&DriveStatus, "DriveStatus", "", "DriveStatus")

									cmd.Flags().StringVar(&DriveType, "DriveType", "", "DriveType")

									cmd.Flags().StringVar(&PartitionId, "PartitionId", "", "PartitionId")

									cmd.Flags().StringVar(&PartitionName, "PartitionName", "", "PartitionName")

									cmd.Flags().StringVar(&ResidentImage, "ResidentImage", "", "ResidentImage")

									cmd.Flags().StringVar(&Size, "Size", "", "Size")

									cmd.Flags().StringVar(&VirtualDrive, "VirtualDrive", "", "VirtualDrive")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageFlexUtilController with unknown data type StorageFlexUtilControllerRelationship
									if isMoRef(openapi.StorageFlexUtilControllerRelationship{}) {
										cmd.Flags().String("StorageFlexUtilController", "", "StorageFlexUtilController")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var BlockSize string

									var Bootable string

									var ConfigurationCheckpoint string

									var ConfigurationState string

									var DiscoveredPath string

									var DiskId string

									var DiskState string

									var DriveFirmware string

									var DriveState string

									var FdeCapable string

									var LinkSpeed string

									var LinkState string

									var NumBlocks string

									var OperPowerState string

									var OperQualifierReason string

									var Operability string

									var PhysicalBlockSize string

									var Pid string

									var Presence string

									var Protocol string

									var RawSize string

									var Secured string

									var Size string

									var Thermal string

									var Type string

									var VariantType string

									//Skipping var LocatorLed with unknown data type EquipmentLocatorLedRelationship

									//Skipping var PhysicalDiskExtensions with unknown data type []StoragePhysicalDiskExtensionRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var RunningFirmware with unknown data type []FirmwareRunningFirmwareRelationship

									//Skipping var SasPorts with unknown data type []StorageSasPortRelationship

									//Skipping var StorageController with unknown data type StorageControllerRelationship

									//Skipping var StorageEnclosure with unknown data type StorageEnclosureRelationship

									cmd := &cobra.Command{
										Use: "updatestoragephysicaldisk",

										Short: "Update a 'storage.PhysicalDisk' resource.",
										Long: `Update a 'storage.PhysicalDisk' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.UpdateStoragePhysicalDisk(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&BlockSize, "BlockSize", "", "BlockSize")

									cmd.Flags().StringVar(&Bootable, "Bootable", "", "Bootable")

									cmd.Flags().StringVar(&ConfigurationCheckpoint, "ConfigurationCheckpoint", "", "ConfigurationCheckpoint")

									cmd.Flags().StringVar(&ConfigurationState, "ConfigurationState", "", "ConfigurationState")

									cmd.Flags().StringVar(&DiscoveredPath, "DiscoveredPath", "", "DiscoveredPath")

									cmd.Flags().StringVar(&DiskId, "DiskId", "", "DiskId")

									cmd.Flags().StringVar(&DiskState, "DiskState", "", "DiskState")

									cmd.Flags().StringVar(&DriveFirmware, "DriveFirmware", "", "DriveFirmware")

									cmd.Flags().StringVar(&DriveState, "DriveState", "", "DriveState")

									cmd.Flags().StringVar(&FdeCapable, "FdeCapable", "", "FdeCapable")

									cmd.Flags().StringVar(&LinkSpeed, "LinkSpeed", "", "LinkSpeed")

									cmd.Flags().StringVar(&LinkState, "LinkState", "", "LinkState")

									cmd.Flags().StringVar(&NumBlocks, "NumBlocks", "", "NumBlocks")

									cmd.Flags().StringVar(&OperPowerState, "OperPowerState", "", "OperPowerState")

									cmd.Flags().StringVar(&OperQualifierReason, "OperQualifierReason", "", "OperQualifierReason")

									cmd.Flags().StringVar(&Operability, "Operability", "", "Operability")

									cmd.Flags().StringVar(&PhysicalBlockSize, "PhysicalBlockSize", "", "PhysicalBlockSize")

									cmd.Flags().StringVar(&Pid, "Pid", "", "Pid")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&Protocol, "Protocol", "", "Protocol")

									cmd.Flags().StringVar(&RawSize, "RawSize", "", "RawSize")

									cmd.Flags().StringVar(&Secured, "Secured", "", "Secured")

									cmd.Flags().StringVar(&Size, "Size", "", "Size")

									cmd.Flags().StringVar(&Thermal, "Thermal", "", "Thermal")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									cmd.Flags().StringVar(&VariantType, "VariantType", "", "VariantType")

									//Skipping var LocatorLed with unknown data type EquipmentLocatorLedRelationship
									if isMoRef(openapi.EquipmentLocatorLedRelationship{}) {
										cmd.Flags().String("LocatorLed", "", "LocatorLed")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageController with unknown data type StorageControllerRelationship
									if isMoRef(openapi.StorageControllerRelationship{}) {
										cmd.Flags().String("StorageController", "", "StorageController")
									}

									//Skipping var StorageEnclosure with unknown data type StorageEnclosureRelationship
									if isMoRef(openapi.StorageEnclosureRelationship{}) {
										cmd.Flags().String("StorageEnclosure", "", "StorageEnclosure")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var Bootable string

									var DiskDn string

									//Skipping var DiskId with unknown data type int64

									var DiskState string

									var Health string

									//Skipping var PhysicalDisk with unknown data type StoragePhysicalDiskRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StorageController with unknown data type StorageControllerRelationship

									cmd := &cobra.Command{
										Use: "updatestoragephysicaldiskextension",

										Short: "Update a 'storage.PhysicalDiskExtension' resource.",
										Long: `Update a 'storage.PhysicalDiskExtension' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.UpdateStoragePhysicalDiskExtension(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&Bootable, "Bootable", "", "Bootable")

									cmd.Flags().StringVar(&DiskDn, "DiskDn", "", "DiskDn")

									cmd.Flags().StringVar(&DiskState, "DiskState", "", "DiskState")

									cmd.Flags().StringVar(&Health, "Health", "", "Health")

									//Skipping var PhysicalDisk with unknown data type StoragePhysicalDiskRelationship
									if isMoRef(openapi.StoragePhysicalDiskRelationship{}) {
										cmd.Flags().String("PhysicalDisk", "", "PhysicalDisk")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageController with unknown data type StorageControllerRelationship
									if isMoRef(openapi.StorageControllerRelationship{}) {
										cmd.Flags().String("StorageController", "", "StorageController")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var NumberOfBlocks string

									var PhysicalDrive string

									var Span string

									var StartingBlock string

									var State string

									var VirtualDrive string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatestoragephysicaldiskusage",

										Short: "Update a 'storage.PhysicalDiskUsage' resource.",
										Long: `Update a 'storage.PhysicalDiskUsage' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.UpdateStoragePhysicalDiskUsage(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&NumberOfBlocks, "NumberOfBlocks", "", "NumberOfBlocks")

									cmd.Flags().StringVar(&PhysicalDrive, "PhysicalDrive", "", "PhysicalDrive")

									cmd.Flags().StringVar(&Span, "Span", "", "Span")

									cmd.Flags().StringVar(&StartingBlock, "StartingBlock", "", "StartingBlock")

									cmd.Flags().StringVar(&State, "State", "", "State")

									cmd.Flags().StringVar(&VirtualDrive, "VirtualDrive", "", "VirtualDrive")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var Name string

									var Uuid string

									var Version string

									//Skipping var StorageUtilization with unknown data type StorageCapacity

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatestoragepurearray",

										Short: "Update a 'storage.PureArray' resource.",
										Long: `Update a 'storage.PureArray' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.UpdateStoragePureArray(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Uuid, "Uuid", "", "Uuid")

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									//Skipping var StorageUtilization with unknown data type StorageCapacity
									if isMoRef(openapi.StorageCapacity{}) {
										cmd.Flags().String("StorageUtilization", "", "StorageUtilization")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									//Skipping var ExpanderId with unknown data type int64

									var Name string

									var OperState string

									var Operability string

									var Presence string

									var SasAddress string

									//Skipping var Controller with unknown data type ManagementControllerRelationship

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatestoragesasexpander",

										Short: "Update a 'storage.SasExpander' resource.",
										Long: `Update a 'storage.SasExpander' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.UpdateStorageSasExpander(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&Operability, "Operability", "", "Operability")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&SasAddress, "SasAddress", "", "SasAddress")

									//Skipping var Controller with unknown data type ManagementControllerRelationship
									if isMoRef(openapi.ManagementControllerRelationship{}) {
										cmd.Flags().String("Controller", "", "Controller")
									}

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship
									if isMoRef(openapi.EquipmentChassisRelationship{}) {
										cmd.Flags().String("EquipmentChassis", "", "EquipmentChassis")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Address string

									//Skipping var DiskId with unknown data type int64

									//Skipping var EndPointId with unknown data type int64

									var LinkDescription string

									var LinkSpeed string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StoragePhysicalDisk with unknown data type StoragePhysicalDiskRelationship

									cmd := &cobra.Command{
										Use: "updatestoragesasport",

										Short: "Update a 'storage.SasPort' resource.",
										Long: `Update a 'storage.SasPort' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.UpdateStorageSasPort(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Address, "Address", "", "Address")

									cmd.Flags().StringVar(&LinkDescription, "LinkDescription", "", "LinkDescription")

									cmd.Flags().StringVar(&LinkSpeed, "LinkSpeed", "", "LinkSpeed")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StoragePhysicalDisk with unknown data type StoragePhysicalDiskRelationship
									if isMoRef(openapi.StoragePhysicalDiskRelationship{}) {
										cmd.Flags().String("StoragePhysicalDisk", "", "StoragePhysicalDisk")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var GlobalHotSpares with unknown data type []StorageLocalDisk

									var RetainPolicyVirtualDrives bool

									var UnusedDisksState string

									//Skipping var VirtualDrives with unknown data type []StorageVirtualDriveConfig

									//Skipping var DiskGroupPolicies with unknown data type []StorageDiskGroupPolicyRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "updatestoragestoragepolicy",

										Short: "Update a 'storage.StoragePolicy' resource.",
										Long: `Update a 'storage.StoragePolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.UpdateStorageStoragePolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&RetainPolicyVirtualDrives, "RetainPolicyVirtualDrives", false, "RetainPolicyVirtualDrives")

									cmd.Flags().StringVar(&UnusedDisksState, "UnusedDisksState", "", "UnusedDisksState")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var OperQualifierReason string

									var Presence string

									var Role string

									var SpanId string

									//Skipping var VdMemberEpId with unknown data type int64

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StorageVirtualDrive with unknown data type StorageVirtualDriveRelationship

									cmd := &cobra.Command{
										Use: "updatestoragevdmemberep",

										Short: "Update a 'storage.VdMemberEp' resource.",
										Long: `Update a 'storage.VdMemberEp' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.UpdateStorageVdMemberEp(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&OperQualifierReason, "OperQualifierReason", "", "OperQualifierReason")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&Role, "Role", "", "Role")

									cmd.Flags().StringVar(&SpanId, "SpanId", "", "SpanId")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageVirtualDrive with unknown data type StorageVirtualDriveRelationship
									if isMoRef(openapi.StorageVirtualDriveRelationship{}) {
										cmd.Flags().String("StorageVirtualDrive", "", "StorageVirtualDrive")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var AccessPolicy string

									var ActualWriteCachePolicy string

									var AvailableSize string

									var BlockSize string

									var Bootable string

									var ConfigState string

									var ConfiguredWriteCachePolicy string

									var ConnectionProtocol string

									var DriveCache string

									var DriveSecurity string

									var DriveState string

									var IoPolicy string

									var Name string

									var NumBlocks string

									var OperState string

									var Operability string

									var PhysicalBlockSize string

									var Presence string

									var ReadPolicy string

									var SecurityFlags string

									var Size string

									var StripSize string

									var Type string

									var Uuid string

									var VendorUuid string

									var VirtualDriveId string

									//Skipping var PhysicalDiskUsages with unknown data type []StoragePhysicalDiskUsageRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StorageController with unknown data type StorageControllerRelationship

									//Skipping var VdMemberEps with unknown data type []StorageVdMemberEpRelationship

									//Skipping var VirtualDriveExtension with unknown data type StorageVirtualDriveExtensionRelationship

									cmd := &cobra.Command{
										Use: "updatestoragevirtualdrive",

										Short: "Update a 'storage.VirtualDrive' resource.",
										Long: `Update a 'storage.VirtualDrive' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.UpdateStorageVirtualDrive(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&AccessPolicy, "AccessPolicy", "", "AccessPolicy")

									cmd.Flags().StringVar(&ActualWriteCachePolicy, "ActualWriteCachePolicy", "", "ActualWriteCachePolicy")

									cmd.Flags().StringVar(&AvailableSize, "AvailableSize", "", "AvailableSize")

									cmd.Flags().StringVar(&BlockSize, "BlockSize", "", "BlockSize")

									cmd.Flags().StringVar(&Bootable, "Bootable", "", "Bootable")

									cmd.Flags().StringVar(&ConfigState, "ConfigState", "", "ConfigState")

									cmd.Flags().StringVar(&ConfiguredWriteCachePolicy, "ConfiguredWriteCachePolicy", "", "ConfiguredWriteCachePolicy")

									cmd.Flags().StringVar(&ConnectionProtocol, "ConnectionProtocol", "", "ConnectionProtocol")

									cmd.Flags().StringVar(&DriveCache, "DriveCache", "", "DriveCache")

									cmd.Flags().StringVar(&DriveSecurity, "DriveSecurity", "", "DriveSecurity")

									cmd.Flags().StringVar(&DriveState, "DriveState", "", "DriveState")

									cmd.Flags().StringVar(&IoPolicy, "IoPolicy", "", "IoPolicy")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&NumBlocks, "NumBlocks", "", "NumBlocks")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&Operability, "Operability", "", "Operability")

									cmd.Flags().StringVar(&PhysicalBlockSize, "PhysicalBlockSize", "", "PhysicalBlockSize")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&ReadPolicy, "ReadPolicy", "", "ReadPolicy")

									cmd.Flags().StringVar(&SecurityFlags, "SecurityFlags", "", "SecurityFlags")

									cmd.Flags().StringVar(&Size, "Size", "", "Size")

									cmd.Flags().StringVar(&StripSize, "StripSize", "", "StripSize")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									cmd.Flags().StringVar(&Uuid, "Uuid", "", "Uuid")

									cmd.Flags().StringVar(&VendorUuid, "VendorUuid", "", "VendorUuid")

									cmd.Flags().StringVar(&VirtualDriveId, "VirtualDriveId", "", "VirtualDriveId")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageController with unknown data type StorageControllerRelationship
									if isMoRef(openapi.StorageControllerRelationship{}) {
										cmd.Flags().String("StorageController", "", "StorageController")
									}

									//Skipping var VirtualDriveExtension with unknown data type StorageVirtualDriveExtensionRelationship
									if isMoRef(openapi.StorageVirtualDriveExtensionRelationship{}) {
										cmd.Flags().String("VirtualDriveExtension", "", "VirtualDriveExtension")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Bootable string

									//Skipping var ContainerId with unknown data type int64

									var DriveState string

									var Name string

									var OperDeviceId string

									var Uuid string

									var VendorUuid string

									var VirtualDriveDn string

									var VirtualDriveId string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StorageController with unknown data type StorageControllerRelationship

									//Skipping var VirtualDrive with unknown data type StorageVirtualDriveRelationship

									cmd := &cobra.Command{
										Use: "updatestoragevirtualdriveextension",

										Short: "Update a 'storage.VirtualDriveExtension' resource.",
										Long: `Update a 'storage.VirtualDriveExtension' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.UpdateStorageVirtualDriveExtension(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Bootable, "Bootable", "", "Bootable")

									cmd.Flags().StringVar(&DriveState, "DriveState", "", "DriveState")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&OperDeviceId, "OperDeviceId", "", "OperDeviceId")

									cmd.Flags().StringVar(&Uuid, "Uuid", "", "Uuid")

									cmd.Flags().StringVar(&VendorUuid, "VendorUuid", "", "VendorUuid")

									cmd.Flags().StringVar(&VirtualDriveDn, "VirtualDriveDn", "", "VirtualDriveDn")

									cmd.Flags().StringVar(&VirtualDriveId, "VirtualDriveId", "", "VirtualDriveId")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageController with unknown data type StorageControllerRelationship
									if isMoRef(openapi.StorageControllerRelationship{}) {
										cmd.Flags().String("StorageController", "", "StorageController")
									}

									//Skipping var VirtualDrive with unknown data type StorageVirtualDriveRelationship
									if isMoRef(openapi.StorageVirtualDriveRelationship{}) {
										cmd.Flags().String("VirtualDrive", "", "VirtualDrive")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "syslog",

								Short: "Create Syslog resource(s)",
								Long: `Create Syslog resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var LocalClients with unknown data type []SyslogLocalClientBase

									//Skipping var RemoteClients with unknown data type []SyslogRemoteClientBase

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "policy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SyslogApi.CreateSyslogPolicy(authCtx)

											body := openapi.NewSyslogPolicy()

											//Set class id and object type by default
											body.ClassId = "syslog.Policy"
											body.ObjectType = "syslog.Policy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.SyslogPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'syslog.Policy' resource.",
										Long: `Create a 'syslog.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var LocalClients with unknown data type []SyslogLocalClientBase

									//Skipping var RemoteClients with unknown data type []SyslogRemoteClientBase

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "updatesyslogpolicy",

										Short: "Update a 'syslog.Policy' resource.",
										Long: `Update a 'syslog.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SyslogApi.UpdateSyslogPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "tam",

								Short: "Create Tam resource(s)",
								Long: `Create Tam resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var AdvisoryCount with unknown data type int64

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "advisorycount",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.TamApi.CreateTamAdvisoryCount(authCtx)

											body := openapi.NewTamAdvisoryCount()

											//Set class id and object type by default
											body.ClassId = "tam.AdvisoryCount"
											body.ObjectType = "tam.AdvisoryCount"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Account") && isMoRef(openapi.IamAccountRelationship{}) {
												if f, err := cmd.Flags().GetString("Account"); err == nil {
													paramVal := openapi.IamAccountRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Account = &paramVal
														//                                if v, ok := v.(openapi.IamAccountRelationship); ok {
														//                                    body.Account = &v
														//                                }
													}
												}
											}

											req = req.TamAdvisoryCount(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'tam.AdvisoryCount' resource.",
										Long: `Create a 'tam.AdvisoryCount' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var State string

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var Advisory with unknown data type TamAdvisoryRelationship

									cmd := &cobra.Command{
										Use: "advisoryinfo",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.TamApi.CreateTamAdvisoryInfo(authCtx)

											body := openapi.NewTamAdvisoryInfo()

											//Set class id and object type by default
											body.ClassId = "tam.AdvisoryInfo"
											body.ObjectType = "tam.AdvisoryInfo"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "State") {
												body.State = &State
											}

											if isFlagPassed(cmd.Flags(), "Account") && isMoRef(openapi.IamAccountRelationship{}) {
												if f, err := cmd.Flags().GetString("Account"); err == nil {
													paramVal := openapi.IamAccountRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Account = &paramVal
														//                                if v, ok := v.(openapi.IamAccountRelationship); ok {
														//                                    body.Account = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Advisory") && isMoRef(openapi.TamAdvisoryRelationship{}) {
												if f, err := cmd.Flags().GetString("Advisory"); err == nil {
													paramVal := openapi.TamAdvisoryRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Advisory = &paramVal
														//                                if v, ok := v.(openapi.TamAdvisoryRelationship); ok {
														//                                    body.Advisory = &v
														//                                }
													}
												}
											}

											req = req.TamAdvisoryInfo(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'tam.AdvisoryInfo' resource.",
										Long: `Create a 'tam.AdvisoryInfo' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&State, "State", "", "State")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var Advisory with unknown data type TamAdvisoryRelationship
									if isMoRef(openapi.TamAdvisoryRelationship{}) {
										cmd.Flags().String("Advisory", "", "Advisory")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var AffectedObjectMoid string

									var AffectedObjectType string

									//Skipping var LastStateChangeTime with unknown data type time.Time

									//Skipping var LastVerifiedTime with unknown data type time.Time

									var State string

									//Skipping var Advisory with unknown data type TamAdvisoryRelationship

									//Skipping var AffectedObject with unknown data type MoBaseMoRelationship

									//Skipping var DeviceRegistration with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "advisoryinstance",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.TamApi.CreateTamAdvisoryInstance(authCtx)

											body := openapi.NewTamAdvisoryInstance()

											//Set class id and object type by default
											body.ClassId = "tam.AdvisoryInstance"
											body.ObjectType = "tam.AdvisoryInstance"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "AffectedObjectMoid") {
												body.AffectedObjectMoid = &AffectedObjectMoid
											}

											if isFlagPassed(cmd.Flags(), "AffectedObjectType") {
												body.AffectedObjectType = &AffectedObjectType
											}

											if isFlagPassed(cmd.Flags(), "State") {
												body.State = &State
											}

											if isFlagPassed(cmd.Flags(), "Advisory") && isMoRef(openapi.TamAdvisoryRelationship{}) {
												if f, err := cmd.Flags().GetString("Advisory"); err == nil {
													paramVal := openapi.TamAdvisoryRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Advisory = &paramVal
														//                                if v, ok := v.(openapi.TamAdvisoryRelationship); ok {
														//                                    body.Advisory = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "AffectedObject") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("AffectedObject"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.AffectedObject = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.AffectedObject = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "DeviceRegistration") && isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
												if f, err := cmd.Flags().GetString("DeviceRegistration"); err == nil {
													paramVal := openapi.AssetDeviceRegistrationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.DeviceRegistration = &paramVal
														//                                if v, ok := v.(openapi.AssetDeviceRegistrationRelationship); ok {
														//                                    body.DeviceRegistration = &v
														//                                }
													}
												}
											}

											req = req.TamAdvisoryInstance(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'tam.AdvisoryInstance' resource.",
										Long: `Create a 'tam.AdvisoryInstance' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&AffectedObjectMoid, "AffectedObjectMoid", "", "AffectedObjectMoid")

									cmd.Flags().StringVar(&AffectedObjectType, "AffectedObjectType", "", "AffectedObjectType")

									cmd.Flags().StringVar(&State, "State", "", "State")

									//Skipping var Advisory with unknown data type TamAdvisoryRelationship
									if isMoRef(openapi.TamAdvisoryRelationship{}) {
										cmd.Flags().String("Advisory", "", "Advisory")
									}

									//Skipping var AffectedObject with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("AffectedObject", "", "AffectedObject")
									}

									//Skipping var DeviceRegistration with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("DeviceRegistration", "", "DeviceRegistration")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var Severity with unknown data type TamSeverity

									var State string

									//Skipping var Actions with unknown data type []TamAction

									var AdvisoryId string

									//Skipping var ApiDataSources with unknown data type []TamApiDataSource

									//Skipping var BaseScore with unknown data type float32

									var CveIds []string

									//Skipping var DatePublished with unknown data type time.Time

									//Skipping var DateUpdated with unknown data type time.Time

									//Skipping var EnvironmentalScore with unknown data type float32

									var ExternalUrl string

									var Recommendation string

									var Status string

									//Skipping var TemporalScore with unknown data type float32

									var Version string

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "securityadvisory",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.TamApi.CreateTamSecurityAdvisory(authCtx)

											body := openapi.NewTamSecurityAdvisory()

											//Set class id and object type by default
											body.ClassId = "tam.SecurityAdvisory"
											body.ObjectType = "tam.SecurityAdvisory"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Severity") && isMoRef(openapi.TamSeverity{}) {
												if f, err := cmd.Flags().GetString("Severity"); err == nil {
													paramVal := openapi.TamSeverity{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Severity = &paramVal
														//                                if v, ok := v.(openapi.TamSeverity); ok {
														//                                    body.Severity = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "State") {
												body.State = &State
											}

											if isFlagPassed(cmd.Flags(), "AdvisoryId") {
												body.AdvisoryId = &AdvisoryId
											}

											if isFlagPassed(cmd.Flags(), "CveIds") {
												body.CveIds = &CveIds
											}

											if isFlagPassed(cmd.Flags(), "ExternalUrl") {
												body.ExternalUrl = &ExternalUrl
											}

											if isFlagPassed(cmd.Flags(), "Recommendation") {
												body.Recommendation = &Recommendation
											}

											if isFlagPassed(cmd.Flags(), "Status") {
												body.Status = &Status
											}

											if isFlagPassed(cmd.Flags(), "Version") {
												body.Version = &Version
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.TamSecurityAdvisory(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'tam.SecurityAdvisory' resource.",
										Long: `Create a 'tam.SecurityAdvisory' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Severity with unknown data type TamSeverity
									if isMoRef(openapi.TamSeverity{}) {
										cmd.Flags().String("Severity", "", "Severity")
									}

									cmd.Flags().StringVar(&State, "State", "", "State")

									cmd.Flags().StringVar(&AdvisoryId, "AdvisoryId", "", "AdvisoryId")

									cmd.Flags().StringSliceVar(&CveIds, "CveIds", []string{}, "CveIds")

									cmd.Flags().StringVar(&ExternalUrl, "ExternalUrl", "", "ExternalUrl")

									cmd.Flags().StringVar(&Recommendation, "Recommendation", "", "Recommendation")

									cmd.Flags().StringVar(&Status, "Status", "", "Status")

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var AdvisoryCount with unknown data type int64

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "updatetamadvisorycount",

										Short: "Update a 'tam.AdvisoryCount' resource.",
										Long: `Update a 'tam.AdvisoryCount' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.TamApi.UpdateTamAdvisoryCount(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var State string

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var Advisory with unknown data type TamAdvisoryRelationship

									cmd := &cobra.Command{
										Use: "updatetamadvisoryinfo",

										Short: "Update a 'tam.AdvisoryInfo' resource.",
										Long: `Update a 'tam.AdvisoryInfo' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.TamApi.UpdateTamAdvisoryInfo(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&State, "State", "", "State")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var Advisory with unknown data type TamAdvisoryRelationship
									if isMoRef(openapi.TamAdvisoryRelationship{}) {
										cmd.Flags().String("Advisory", "", "Advisory")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var AffectedObjectMoid string

									var AffectedObjectType string

									//Skipping var LastStateChangeTime with unknown data type time.Time

									//Skipping var LastVerifiedTime with unknown data type time.Time

									var State string

									//Skipping var Advisory with unknown data type TamAdvisoryRelationship

									//Skipping var AffectedObject with unknown data type MoBaseMoRelationship

									//Skipping var DeviceRegistration with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatetamadvisoryinstance",

										Short: "Update a 'tam.AdvisoryInstance' resource.",
										Long: `Update a 'tam.AdvisoryInstance' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.TamApi.UpdateTamAdvisoryInstance(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&AffectedObjectMoid, "AffectedObjectMoid", "", "AffectedObjectMoid")

									cmd.Flags().StringVar(&AffectedObjectType, "AffectedObjectType", "", "AffectedObjectType")

									cmd.Flags().StringVar(&State, "State", "", "State")

									//Skipping var Advisory with unknown data type TamAdvisoryRelationship
									if isMoRef(openapi.TamAdvisoryRelationship{}) {
										cmd.Flags().String("Advisory", "", "Advisory")
									}

									//Skipping var AffectedObject with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("AffectedObject", "", "AffectedObject")
									}

									//Skipping var DeviceRegistration with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("DeviceRegistration", "", "DeviceRegistration")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var Severity with unknown data type TamSeverity

									var State string

									//Skipping var Actions with unknown data type []TamAction

									var AdvisoryId string

									//Skipping var ApiDataSources with unknown data type []TamApiDataSource

									//Skipping var BaseScore with unknown data type float32

									var CveIds []string

									//Skipping var DatePublished with unknown data type time.Time

									//Skipping var DateUpdated with unknown data type time.Time

									//Skipping var EnvironmentalScore with unknown data type float32

									var ExternalUrl string

									var Recommendation string

									var Status string

									//Skipping var TemporalScore with unknown data type float32

									var Version string

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "updatetamsecurityadvisory",

										Short: "Update a 'tam.SecurityAdvisory' resource.",
										Long: `Update a 'tam.SecurityAdvisory' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.TamApi.UpdateTamSecurityAdvisory(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Severity with unknown data type TamSeverity
									if isMoRef(openapi.TamSeverity{}) {
										cmd.Flags().String("Severity", "", "Severity")
									}

									cmd.Flags().StringVar(&State, "State", "", "State")

									cmd.Flags().StringVar(&AdvisoryId, "AdvisoryId", "", "AdvisoryId")

									cmd.Flags().StringSliceVar(&CveIds, "CveIds", []string{}, "CveIds")

									cmd.Flags().StringVar(&ExternalUrl, "ExternalUrl", "", "ExternalUrl")

									cmd.Flags().StringVar(&Recommendation, "Recommendation", "", "Recommendation")

									cmd.Flags().StringVar(&Status, "Status", "", "Status")

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "task",

								Short: "Create Task resource(s)",
								Long: `Create Task resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var NamingProperty string

									var Type string

									var Values []string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "purescopedinventory",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.TaskApi.CreateTaskPureScopedInventory(authCtx)

											body := openapi.NewTaskPureScopedInventory()

											//Set class id and object type by default
											body.ClassId = "task.PureScopedInventory"
											body.ObjectType = "task.PureScopedInventory"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "NamingProperty") {
												body.NamingProperty = &NamingProperty
											}

											if isFlagPassed(cmd.Flags(), "Type") {
												body.Type = &Type
											}

											if isFlagPassed(cmd.Flags(), "Values") {
												body.Values = &Values
											}

											if isFlagPassed(cmd.Flags(), "RegisteredDevice") && isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
												if f, err := cmd.Flags().GetString("RegisteredDevice"); err == nil {
													paramVal := openapi.AssetDeviceRegistrationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.RegisteredDevice = &paramVal
														//                                if v, ok := v.(openapi.AssetDeviceRegistrationRelationship); ok {
														//                                    body.RegisteredDevice = &v
														//                                }
													}
												}
											}

											req = req.TaskPureScopedInventory(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'task.PureScopedInventory' resource.",
										Long: `Create a 'task.PureScopedInventory' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&NamingProperty, "NamingProperty", "", "NamingProperty")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									cmd.Flags().StringSliceVar(&Values, "Values", []string{}, "Values")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "top",

								Short: "Create Top resource(s)",
								Long: `Create Top resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Ipv4Address string

									var Ipv6Address string

									var Mode string

									var Name string

									var TimeZone string

									//Skipping var ComputeBlades with unknown data type []ComputeBladeRelationship

									//Skipping var ComputeRackUnits with unknown data type []ComputeRackUnitRelationship

									//Skipping var ManagementController with unknown data type ManagementControllerRelationship

									//Skipping var NetworkElements with unknown data type []NetworkElementRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "updatetopsystem",

										Short: "Update a 'top.System' resource.",
										Long: `Update a 'top.System' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.TopApi.UpdateTopSystem(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Ipv4Address, "Ipv4Address", "", "Ipv4Address")

									cmd.Flags().StringVar(&Ipv6Address, "Ipv6Address", "", "Ipv6Address")

									cmd.Flags().StringVar(&Mode, "Mode", "", "Mode")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&TimeZone, "TimeZone", "", "TimeZone")

									//Skipping var ManagementController with unknown data type ManagementControllerRelationship
									if isMoRef(openapi.ManagementControllerRelationship{}) {
										cmd.Flags().String("ManagementController", "", "ManagementController")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "virtualization",

								Short: "Create Virtualization resource(s)",
								Long: `Create Virtualization resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									var HypervisorType string

									var Identity string

									//Skipping var MemoryCapacity with unknown data type VirtualizationMemoryCapacity

									var Name string

									//Skipping var ProcessorCapacity with unknown data type VirtualizationComputeCapacity

									var Status string

									//Skipping var TotalCores with unknown data type int64

									//Skipping var DatastoreCount with unknown data type int64

									//Skipping var Datacenter with unknown data type VirtualizationVmwareDatacenterRelationship

									//Skipping var Hosts with unknown data type []VirtualizationVmwareHostRelationship

									cmd := &cobra.Command{
										Use: "updatevirtualizationvmwarecluster",

										Short: "Update a 'virtualization.VmwareCluster' resource.",
										Long: `Update a 'virtualization.VmwareCluster' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VirtualizationApi.UpdateVirtualizationVmwareCluster(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									cmd.Flags().StringVar(&HypervisorType, "HypervisorType", "", "HypervisorType")

									cmd.Flags().StringVar(&Identity, "Identity", "", "Identity")

									//Skipping var MemoryCapacity with unknown data type VirtualizationMemoryCapacity
									if isMoRef(openapi.VirtualizationMemoryCapacity{}) {
										cmd.Flags().String("MemoryCapacity", "", "MemoryCapacity")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var ProcessorCapacity with unknown data type VirtualizationComputeCapacity
									if isMoRef(openapi.VirtualizationComputeCapacity{}) {
										cmd.Flags().String("ProcessorCapacity", "", "ProcessorCapacity")
									}

									cmd.Flags().StringVar(&Status, "Status", "", "Status")

									//Skipping var Datacenter with unknown data type VirtualizationVmwareDatacenterRelationship
									if isMoRef(openapi.VirtualizationVmwareDatacenterRelationship{}) {
										cmd.Flags().String("Datacenter", "", "Datacenter")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									var Identity string

									var Name string

									//Skipping var ClusterCount with unknown data type int64

									//Skipping var DatastoreCount with unknown data type int64

									//Skipping var HostCount with unknown data type int64

									//Skipping var NetworkCount with unknown data type int64

									//Skipping var VmCount with unknown data type int64

									//Skipping var HypervisorManager with unknown data type VirtualizationVmwareVcenterRelationship

									cmd := &cobra.Command{
										Use: "updatevirtualizationvmwaredatacenter",

										Short: "Update a 'virtualization.VmwareDatacenter' resource.",
										Long: `Update a 'virtualization.VmwareDatacenter' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VirtualizationApi.UpdateVirtualizationVmwareDatacenter(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									cmd.Flags().StringVar(&Identity, "Identity", "", "Identity")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var HypervisorManager with unknown data type VirtualizationVmwareVcenterRelationship
									if isMoRef(openapi.VirtualizationVmwareVcenterRelationship{}) {
										cmd.Flags().String("HypervisorManager", "", "HypervisorManager")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var Capacity with unknown data type VirtualizationStorageCapacity

									//Skipping var HostCount with unknown data type int64

									var Identity string

									var Name string

									var Type string

									//Skipping var VmCount with unknown data type int64

									var Accessible bool

									var MaintenanceMode bool

									var MultipleHostAccess bool

									var Status string

									var ThinProvisioningSupported bool

									//Skipping var UnCommitted with unknown data type int64

									var Url string

									//Skipping var Cluster with unknown data type VirtualizationVmwareClusterRelationship

									//Skipping var Datacenter with unknown data type VirtualizationVmwareDatacenterRelationship

									//Skipping var Hosts with unknown data type []VirtualizationVmwareHostRelationship

									cmd := &cobra.Command{
										Use: "updatevirtualizationvmwaredatastore",

										Short: "Update a 'virtualization.VmwareDatastore' resource.",
										Long: `Update a 'virtualization.VmwareDatastore' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VirtualizationApi.UpdateVirtualizationVmwareDatastore(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var Capacity with unknown data type VirtualizationStorageCapacity
									if isMoRef(openapi.VirtualizationStorageCapacity{}) {
										cmd.Flags().String("Capacity", "", "Capacity")
									}

									cmd.Flags().StringVar(&Identity, "Identity", "", "Identity")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									cmd.Flags().BoolVar(&Accessible, "Accessible", false, "Accessible")

									cmd.Flags().BoolVar(&MaintenanceMode, "MaintenanceMode", false, "MaintenanceMode")

									cmd.Flags().BoolVar(&MultipleHostAccess, "MultipleHostAccess", false, "MultipleHostAccess")

									cmd.Flags().StringVar(&Status, "Status", "", "Status")

									cmd.Flags().BoolVar(&ThinProvisioningSupported, "ThinProvisioningSupported", false, "ThinProvisioningSupported")

									cmd.Flags().StringVar(&Url, "Url", "", "Url")

									//Skipping var Cluster with unknown data type VirtualizationVmwareClusterRelationship
									if isMoRef(openapi.VirtualizationVmwareClusterRelationship{}) {
										cmd.Flags().String("Cluster", "", "Cluster")
									}

									//Skipping var Datacenter with unknown data type VirtualizationVmwareDatacenterRelationship
									if isMoRef(openapi.VirtualizationVmwareDatacenterRelationship{}) {
										cmd.Flags().String("Datacenter", "", "Datacenter")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var CpuInfo with unknown data type VirtualizationCpuInfo

									//Skipping var HardwareInfo with unknown data type InfraHardwareInfo

									var HypervisorType string

									var Identity string

									var MaintenanceMode bool

									//Skipping var MemoryCapacity with unknown data type VirtualizationMemoryCapacity

									var Model string

									var Name string

									//Skipping var ProcessorCapacity with unknown data type VirtualizationComputeCapacity

									//Skipping var ProductInfo with unknown data type VirtualizationProductInfo

									var Serial string

									var Status string

									var UpTime string

									var Uuid string

									var Vendor string

									//Skipping var BootTime with unknown data type time.Time

									var ConnectionState string

									var HwPowerState string

									//Skipping var NetworkAdapterCount with unknown data type int64

									//Skipping var ResourceConsumed with unknown data type VirtualizationResourceConsumption

									//Skipping var StorageAdapterCount with unknown data type int64

									var VcenterHostId string

									//Skipping var Cluster with unknown data type VirtualizationVmwareClusterRelationship

									//Skipping var Datacenter with unknown data type VirtualizationVmwareDatacenterRelationship

									//Skipping var Datastores with unknown data type []VirtualizationVmwareDatastoreRelationship

									cmd := &cobra.Command{
										Use: "updatevirtualizationvmwarehost",

										Short: "Update a 'virtualization.VmwareHost' resource.",
										Long: `Update a 'virtualization.VmwareHost' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VirtualizationApi.UpdateVirtualizationVmwareHost(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var CpuInfo with unknown data type VirtualizationCpuInfo
									if isMoRef(openapi.VirtualizationCpuInfo{}) {
										cmd.Flags().String("CpuInfo", "", "CpuInfo")
									}

									//Skipping var HardwareInfo with unknown data type InfraHardwareInfo
									if isMoRef(openapi.InfraHardwareInfo{}) {
										cmd.Flags().String("HardwareInfo", "", "HardwareInfo")
									}

									cmd.Flags().StringVar(&HypervisorType, "HypervisorType", "", "HypervisorType")

									cmd.Flags().StringVar(&Identity, "Identity", "", "Identity")

									cmd.Flags().BoolVar(&MaintenanceMode, "MaintenanceMode", false, "MaintenanceMode")

									//Skipping var MemoryCapacity with unknown data type VirtualizationMemoryCapacity
									if isMoRef(openapi.VirtualizationMemoryCapacity{}) {
										cmd.Flags().String("MemoryCapacity", "", "MemoryCapacity")
									}

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var ProcessorCapacity with unknown data type VirtualizationComputeCapacity
									if isMoRef(openapi.VirtualizationComputeCapacity{}) {
										cmd.Flags().String("ProcessorCapacity", "", "ProcessorCapacity")
									}

									//Skipping var ProductInfo with unknown data type VirtualizationProductInfo
									if isMoRef(openapi.VirtualizationProductInfo{}) {
										cmd.Flags().String("ProductInfo", "", "ProductInfo")
									}

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Status, "Status", "", "Status")

									cmd.Flags().StringVar(&UpTime, "UpTime", "", "UpTime")

									cmd.Flags().StringVar(&Uuid, "Uuid", "", "Uuid")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&ConnectionState, "ConnectionState", "", "ConnectionState")

									cmd.Flags().StringVar(&HwPowerState, "HwPowerState", "", "HwPowerState")

									//Skipping var ResourceConsumed with unknown data type VirtualizationResourceConsumption
									if isMoRef(openapi.VirtualizationResourceConsumption{}) {
										cmd.Flags().String("ResourceConsumed", "", "ResourceConsumed")
									}

									cmd.Flags().StringVar(&VcenterHostId, "VcenterHostId", "", "VcenterHostId")

									//Skipping var Cluster with unknown data type VirtualizationVmwareClusterRelationship
									if isMoRef(openapi.VirtualizationVmwareClusterRelationship{}) {
										cmd.Flags().String("Cluster", "", "Cluster")
									}

									//Skipping var Datacenter with unknown data type VirtualizationVmwareDatacenterRelationship
									if isMoRef(openapi.VirtualizationVmwareDatacenterRelationship{}) {
										cmd.Flags().String("Datacenter", "", "Datacenter")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var Capacity with unknown data type InfraHardwareInfo

									//Skipping var GuestInfo with unknown data type VirtualizationGuestInfo

									var HypervisorType string

									var Identity string

									var IpAddress []string

									//Skipping var MemoryCapacity with unknown data type VirtualizationMemoryCapacity

									var Name string

									var PowerState string

									//Skipping var ProcessorCapacity with unknown data type VirtualizationComputeCapacity

									var Uuid string

									var Annotation string

									//Skipping var BootTime with unknown data type time.Time

									var ConfigName string

									var ConnectionState string

									var CpuHotAddEnabled bool

									//Skipping var CpuShares with unknown data type VirtualizationVmCpuShareInfo

									//Skipping var CpuSocketInfo with unknown data type VirtualizationVmCpuSocketInfo

									var CustomAttributes []string

									var DefaultPowerOffType string

									var DhcpEnabled bool

									//Skipping var DiskCommitInfo with unknown data type VirtualizationVmDiskCommitInfo

									var DnsServerList []string

									var DnsSuffixList []string

									var Folder string

									var GuestState string

									var InstanceUuid string

									var IsTemplate bool

									var MacAddress []string

									//Skipping var MemShares with unknown data type VirtualizationVmMemoryShareInfo

									var MemoryHotAddEnabled bool

									//Skipping var NetworkCount with unknown data type int64

									var PortGroups []string

									var ProtectedVm bool

									//Skipping var RemoteDisplayInfo with unknown data type VirtualizationRemoteDisplayInfo

									var RemoteDisplayVncEnabled bool

									var ResourcePool string

									var ResourcePoolOwner string

									var ResourcePoolParent string

									var ToolRunningStatus string

									var ToolsVersion string

									//Skipping var VmDiskCount with unknown data type int64

									var VmOverallStatus string

									var VmPath string

									var VmVersion string

									//Skipping var VmVnicCount with unknown data type int64

									var VnicDeviceConfigId string

									//Skipping var Cluster with unknown data type VirtualizationVmwareClusterRelationship

									//Skipping var Datacenter with unknown data type VirtualizationVmwareDatacenterRelationship

									//Skipping var Datastores with unknown data type []VirtualizationVmwareDatastoreRelationship

									//Skipping var Host with unknown data type VirtualizationVmwareHostRelationship

									cmd := &cobra.Command{
										Use: "updatevirtualizationvmwarevirtualmachine",

										Short: "Update a 'virtualization.VmwareVirtualMachine' resource.",
										Long: `Update a 'virtualization.VmwareVirtualMachine' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VirtualizationApi.UpdateVirtualizationVmwareVirtualMachine(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var Capacity with unknown data type InfraHardwareInfo
									if isMoRef(openapi.InfraHardwareInfo{}) {
										cmd.Flags().String("Capacity", "", "Capacity")
									}

									//Skipping var GuestInfo with unknown data type VirtualizationGuestInfo
									if isMoRef(openapi.VirtualizationGuestInfo{}) {
										cmd.Flags().String("GuestInfo", "", "GuestInfo")
									}

									cmd.Flags().StringVar(&HypervisorType, "HypervisorType", "", "HypervisorType")

									cmd.Flags().StringVar(&Identity, "Identity", "", "Identity")

									cmd.Flags().StringSliceVar(&IpAddress, "IpAddress", []string{}, "IpAddress")

									//Skipping var MemoryCapacity with unknown data type VirtualizationMemoryCapacity
									if isMoRef(openapi.VirtualizationMemoryCapacity{}) {
										cmd.Flags().String("MemoryCapacity", "", "MemoryCapacity")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&PowerState, "PowerState", "", "PowerState")

									//Skipping var ProcessorCapacity with unknown data type VirtualizationComputeCapacity
									if isMoRef(openapi.VirtualizationComputeCapacity{}) {
										cmd.Flags().String("ProcessorCapacity", "", "ProcessorCapacity")
									}

									cmd.Flags().StringVar(&Uuid, "Uuid", "", "Uuid")

									cmd.Flags().StringVar(&Annotation, "Annotation", "", "Annotation")

									cmd.Flags().StringVar(&ConfigName, "ConfigName", "", "ConfigName")

									cmd.Flags().StringVar(&ConnectionState, "ConnectionState", "", "ConnectionState")

									cmd.Flags().BoolVar(&CpuHotAddEnabled, "CpuHotAddEnabled", false, "CpuHotAddEnabled")

									//Skipping var CpuShares with unknown data type VirtualizationVmCpuShareInfo
									if isMoRef(openapi.VirtualizationVmCpuShareInfo{}) {
										cmd.Flags().String("CpuShares", "", "CpuShares")
									}

									//Skipping var CpuSocketInfo with unknown data type VirtualizationVmCpuSocketInfo
									if isMoRef(openapi.VirtualizationVmCpuSocketInfo{}) {
										cmd.Flags().String("CpuSocketInfo", "", "CpuSocketInfo")
									}

									cmd.Flags().StringSliceVar(&CustomAttributes, "CustomAttributes", []string{}, "CustomAttributes")

									cmd.Flags().StringVar(&DefaultPowerOffType, "DefaultPowerOffType", "", "DefaultPowerOffType")

									cmd.Flags().BoolVar(&DhcpEnabled, "DhcpEnabled", false, "DhcpEnabled")

									//Skipping var DiskCommitInfo with unknown data type VirtualizationVmDiskCommitInfo
									if isMoRef(openapi.VirtualizationVmDiskCommitInfo{}) {
										cmd.Flags().String("DiskCommitInfo", "", "DiskCommitInfo")
									}

									cmd.Flags().StringSliceVar(&DnsServerList, "DnsServerList", []string{}, "DnsServerList")

									cmd.Flags().StringSliceVar(&DnsSuffixList, "DnsSuffixList", []string{}, "DnsSuffixList")

									cmd.Flags().StringVar(&Folder, "Folder", "", "Folder")

									cmd.Flags().StringVar(&GuestState, "GuestState", "", "GuestState")

									cmd.Flags().StringVar(&InstanceUuid, "InstanceUuid", "", "InstanceUuid")

									cmd.Flags().BoolVar(&IsTemplate, "IsTemplate", false, "IsTemplate")

									cmd.Flags().StringSliceVar(&MacAddress, "MacAddress", []string{}, "MacAddress")

									//Skipping var MemShares with unknown data type VirtualizationVmMemoryShareInfo
									if isMoRef(openapi.VirtualizationVmMemoryShareInfo{}) {
										cmd.Flags().String("MemShares", "", "MemShares")
									}

									cmd.Flags().BoolVar(&MemoryHotAddEnabled, "MemoryHotAddEnabled", false, "MemoryHotAddEnabled")

									cmd.Flags().StringSliceVar(&PortGroups, "PortGroups", []string{}, "PortGroups")

									cmd.Flags().BoolVar(&ProtectedVm, "ProtectedVm", false, "ProtectedVm")

									//Skipping var RemoteDisplayInfo with unknown data type VirtualizationRemoteDisplayInfo
									if isMoRef(openapi.VirtualizationRemoteDisplayInfo{}) {
										cmd.Flags().String("RemoteDisplayInfo", "", "RemoteDisplayInfo")
									}

									cmd.Flags().BoolVar(&RemoteDisplayVncEnabled, "RemoteDisplayVncEnabled", false, "RemoteDisplayVncEnabled")

									cmd.Flags().StringVar(&ResourcePool, "ResourcePool", "", "ResourcePool")

									cmd.Flags().StringVar(&ResourcePoolOwner, "ResourcePoolOwner", "", "ResourcePoolOwner")

									cmd.Flags().StringVar(&ResourcePoolParent, "ResourcePoolParent", "", "ResourcePoolParent")

									cmd.Flags().StringVar(&ToolRunningStatus, "ToolRunningStatus", "", "ToolRunningStatus")

									cmd.Flags().StringVar(&ToolsVersion, "ToolsVersion", "", "ToolsVersion")

									cmd.Flags().StringVar(&VmOverallStatus, "VmOverallStatus", "", "VmOverallStatus")

									cmd.Flags().StringVar(&VmPath, "VmPath", "", "VmPath")

									cmd.Flags().StringVar(&VmVersion, "VmVersion", "", "VmVersion")

									cmd.Flags().StringVar(&VnicDeviceConfigId, "VnicDeviceConfigId", "", "VnicDeviceConfigId")

									//Skipping var Cluster with unknown data type VirtualizationVmwareClusterRelationship
									if isMoRef(openapi.VirtualizationVmwareClusterRelationship{}) {
										cmd.Flags().String("Cluster", "", "Cluster")
									}

									//Skipping var Datacenter with unknown data type VirtualizationVmwareDatacenterRelationship
									if isMoRef(openapi.VirtualizationVmwareDatacenterRelationship{}) {
										cmd.Flags().String("Datacenter", "", "Datacenter")
									}

									//Skipping var Host with unknown data type VirtualizationVmwareHostRelationship
									if isMoRef(openapi.VirtualizationVmwareHostRelationship{}) {
										cmd.Flags().String("Host", "", "Host")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "vmedia",

								Short: "Create Vmedia resource(s)",
								Long: `Create Vmedia resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Enabled bool

									var Encryption bool

									var LowPowerUsb bool

									//Skipping var Mappings with unknown data type []VmediaMapping

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "policy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VmediaApi.CreateVmediaPolicy(authCtx)

											body := openapi.NewVmediaPolicy()

											//Set class id and object type by default
											body.ClassId = "vmedia.Policy"
											body.ObjectType = "vmedia.Policy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Enabled") {
												body.Enabled = &Enabled
											}

											if isFlagPassed(cmd.Flags(), "Encryption") {
												body.Encryption = &Encryption
											}

											if isFlagPassed(cmd.Flags(), "LowPowerUsb") {
												body.LowPowerUsb = &LowPowerUsb
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.VmediaPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'vmedia.Policy' resource.",
										Long: `Create a 'vmedia.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									cmd.Flags().BoolVar(&Encryption, "Encryption", false, "Encryption")

									cmd.Flags().BoolVar(&LowPowerUsb, "LowPowerUsb", false, "LowPowerUsb")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Enabled bool

									var Encryption bool

									var LowPowerUsb bool

									//Skipping var Mappings with unknown data type []VmediaMapping

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "updatevmediapolicy",

										Short: "Update a 'vmedia.Policy' resource.",
										Long: `Update a 'vmedia.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VmediaApi.UpdateVmediaPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									cmd.Flags().BoolVar(&Encryption, "Encryption", false, "Encryption")

									cmd.Flags().BoolVar(&LowPowerUsb, "LowPowerUsb", false, "LowPowerUsb")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "vnic",

								Short: "Create Vnic resource(s)",
								Long: `Create Vnic resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var AdvancedFilter bool

									//Skipping var ArfsSettings with unknown data type VnicArfsSettings

									//Skipping var CompletionQueueSettings with unknown data type VnicCompletionQueueSettings

									//Skipping var InterruptSettings with unknown data type VnicEthInterruptSettings

									//Skipping var NvgreSettings with unknown data type VnicNvgreSettings

									//Skipping var RoceSettings with unknown data type VnicRoceSettings

									var RssSettings bool

									//Skipping var RxQueueSettings with unknown data type VnicEthRxQueueSettings

									//Skipping var TcpOffloadSettings with unknown data type VnicTcpOffloadSettings

									//Skipping var TxQueueSettings with unknown data type VnicEthTxQueueSettings

									//Skipping var VxlanSettings with unknown data type VnicVxlanSettings

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "ethadapterpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VnicApi.CreateVnicEthAdapterPolicy(authCtx)

											body := openapi.NewVnicEthAdapterPolicy()

											//Set class id and object type by default
											body.ClassId = "vnic.EthAdapterPolicy"
											body.ObjectType = "vnic.EthAdapterPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "AdvancedFilter") {
												body.AdvancedFilter = &AdvancedFilter
											}

											if isFlagPassed(cmd.Flags(), "ArfsSettings") && isMoRef(openapi.VnicArfsSettings{}) {
												if f, err := cmd.Flags().GetString("ArfsSettings"); err == nil {
													paramVal := openapi.VnicArfsSettings{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ArfsSettings = &paramVal
														//                                if v, ok := v.(openapi.VnicArfsSettings); ok {
														//                                    body.ArfsSettings = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "CompletionQueueSettings") && isMoRef(openapi.VnicCompletionQueueSettings{}) {
												if f, err := cmd.Flags().GetString("CompletionQueueSettings"); err == nil {
													paramVal := openapi.VnicCompletionQueueSettings{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.CompletionQueueSettings = &paramVal
														//                                if v, ok := v.(openapi.VnicCompletionQueueSettings); ok {
														//                                    body.CompletionQueueSettings = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "InterruptSettings") && isMoRef(openapi.VnicEthInterruptSettings{}) {
												if f, err := cmd.Flags().GetString("InterruptSettings"); err == nil {
													paramVal := openapi.VnicEthInterruptSettings{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.InterruptSettings = &paramVal
														//                                if v, ok := v.(openapi.VnicEthInterruptSettings); ok {
														//                                    body.InterruptSettings = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "NvgreSettings") && isMoRef(openapi.VnicNvgreSettings{}) {
												if f, err := cmd.Flags().GetString("NvgreSettings"); err == nil {
													paramVal := openapi.VnicNvgreSettings{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.NvgreSettings = &paramVal
														//                                if v, ok := v.(openapi.VnicNvgreSettings); ok {
														//                                    body.NvgreSettings = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "RoceSettings") && isMoRef(openapi.VnicRoceSettings{}) {
												if f, err := cmd.Flags().GetString("RoceSettings"); err == nil {
													paramVal := openapi.VnicRoceSettings{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.RoceSettings = &paramVal
														//                                if v, ok := v.(openapi.VnicRoceSettings); ok {
														//                                    body.RoceSettings = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "RssSettings") {
												body.RssSettings = &RssSettings
											}

											if isFlagPassed(cmd.Flags(), "RxQueueSettings") && isMoRef(openapi.VnicEthRxQueueSettings{}) {
												if f, err := cmd.Flags().GetString("RxQueueSettings"); err == nil {
													paramVal := openapi.VnicEthRxQueueSettings{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.RxQueueSettings = &paramVal
														//                                if v, ok := v.(openapi.VnicEthRxQueueSettings); ok {
														//                                    body.RxQueueSettings = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "TcpOffloadSettings") && isMoRef(openapi.VnicTcpOffloadSettings{}) {
												if f, err := cmd.Flags().GetString("TcpOffloadSettings"); err == nil {
													paramVal := openapi.VnicTcpOffloadSettings{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.TcpOffloadSettings = &paramVal
														//                                if v, ok := v.(openapi.VnicTcpOffloadSettings); ok {
														//                                    body.TcpOffloadSettings = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "TxQueueSettings") && isMoRef(openapi.VnicEthTxQueueSettings{}) {
												if f, err := cmd.Flags().GetString("TxQueueSettings"); err == nil {
													paramVal := openapi.VnicEthTxQueueSettings{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.TxQueueSettings = &paramVal
														//                                if v, ok := v.(openapi.VnicEthTxQueueSettings); ok {
														//                                    body.TxQueueSettings = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "VxlanSettings") && isMoRef(openapi.VnicVxlanSettings{}) {
												if f, err := cmd.Flags().GetString("VxlanSettings"); err == nil {
													paramVal := openapi.VnicVxlanSettings{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VxlanSettings = &paramVal
														//                                if v, ok := v.(openapi.VnicVxlanSettings); ok {
														//                                    body.VxlanSettings = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.VnicEthAdapterPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'vnic.EthAdapterPolicy' resource.",
										Long: `Create a 'vnic.EthAdapterPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&AdvancedFilter, "AdvancedFilter", false, "AdvancedFilter")

									//Skipping var ArfsSettings with unknown data type VnicArfsSettings
									if isMoRef(openapi.VnicArfsSettings{}) {
										cmd.Flags().String("ArfsSettings", "", "ArfsSettings")
									}

									//Skipping var CompletionQueueSettings with unknown data type VnicCompletionQueueSettings
									if isMoRef(openapi.VnicCompletionQueueSettings{}) {
										cmd.Flags().String("CompletionQueueSettings", "", "CompletionQueueSettings")
									}

									//Skipping var InterruptSettings with unknown data type VnicEthInterruptSettings
									if isMoRef(openapi.VnicEthInterruptSettings{}) {
										cmd.Flags().String("InterruptSettings", "", "InterruptSettings")
									}

									//Skipping var NvgreSettings with unknown data type VnicNvgreSettings
									if isMoRef(openapi.VnicNvgreSettings{}) {
										cmd.Flags().String("NvgreSettings", "", "NvgreSettings")
									}

									//Skipping var RoceSettings with unknown data type VnicRoceSettings
									if isMoRef(openapi.VnicRoceSettings{}) {
										cmd.Flags().String("RoceSettings", "", "RoceSettings")
									}

									cmd.Flags().BoolVar(&RssSettings, "RssSettings", false, "RssSettings")

									//Skipping var RxQueueSettings with unknown data type VnicEthRxQueueSettings
									if isMoRef(openapi.VnicEthRxQueueSettings{}) {
										cmd.Flags().String("RxQueueSettings", "", "RxQueueSettings")
									}

									//Skipping var TcpOffloadSettings with unknown data type VnicTcpOffloadSettings
									if isMoRef(openapi.VnicTcpOffloadSettings{}) {
										cmd.Flags().String("TcpOffloadSettings", "", "TcpOffloadSettings")
									}

									//Skipping var TxQueueSettings with unknown data type VnicEthTxQueueSettings
									if isMoRef(openapi.VnicEthTxQueueSettings{}) {
										cmd.Flags().String("TxQueueSettings", "", "TxQueueSettings")
									}

									//Skipping var VxlanSettings with unknown data type VnicVxlanSettings
									if isMoRef(openapi.VnicVxlanSettings{}) {
										cmd.Flags().String("VxlanSettings", "", "VxlanSettings")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Cdn with unknown data type VnicCdn

									var Name string

									//Skipping var Order with unknown data type int64

									//Skipping var Placement with unknown data type VnicPlacementSettings

									//Skipping var UsnicSettings with unknown data type VnicUsnicSettings

									//Skipping var VmqSettings with unknown data type VnicVmqSettings

									//Skipping var EthAdapterPolicy with unknown data type VnicEthAdapterPolicyRelationship

									//Skipping var EthNetworkPolicy with unknown data type VnicEthNetworkPolicyRelationship

									//Skipping var EthQosPolicy with unknown data type VnicEthQosPolicyRelationship

									//Skipping var LanConnectivityPolicy with unknown data type VnicLanConnectivityPolicyRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "ethif",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VnicApi.CreateVnicEthIf(authCtx)

											body := openapi.NewVnicEthIf()

											//Set class id and object type by default
											body.ClassId = "vnic.EthIf"
											body.ObjectType = "vnic.EthIf"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Cdn") && isMoRef(openapi.VnicCdn{}) {
												if f, err := cmd.Flags().GetString("Cdn"); err == nil {
													paramVal := openapi.VnicCdn{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Cdn = &paramVal
														//                                if v, ok := v.(openapi.VnicCdn); ok {
														//                                    body.Cdn = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Placement") && isMoRef(openapi.VnicPlacementSettings{}) {
												if f, err := cmd.Flags().GetString("Placement"); err == nil {
													paramVal := openapi.VnicPlacementSettings{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Placement = &paramVal
														//                                if v, ok := v.(openapi.VnicPlacementSettings); ok {
														//                                    body.Placement = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "UsnicSettings") && isMoRef(openapi.VnicUsnicSettings{}) {
												if f, err := cmd.Flags().GetString("UsnicSettings"); err == nil {
													paramVal := openapi.VnicUsnicSettings{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.UsnicSettings = &paramVal
														//                                if v, ok := v.(openapi.VnicUsnicSettings); ok {
														//                                    body.UsnicSettings = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "VmqSettings") && isMoRef(openapi.VnicVmqSettings{}) {
												if f, err := cmd.Flags().GetString("VmqSettings"); err == nil {
													paramVal := openapi.VnicVmqSettings{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VmqSettings = &paramVal
														//                                if v, ok := v.(openapi.VnicVmqSettings); ok {
														//                                    body.VmqSettings = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "EthAdapterPolicy") && isMoRef(openapi.VnicEthAdapterPolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("EthAdapterPolicy"); err == nil {
													paramVal := openapi.VnicEthAdapterPolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.EthAdapterPolicy = &paramVal
														//                                if v, ok := v.(openapi.VnicEthAdapterPolicyRelationship); ok {
														//                                    body.EthAdapterPolicy = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "EthNetworkPolicy") && isMoRef(openapi.VnicEthNetworkPolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("EthNetworkPolicy"); err == nil {
													paramVal := openapi.VnicEthNetworkPolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.EthNetworkPolicy = &paramVal
														//                                if v, ok := v.(openapi.VnicEthNetworkPolicyRelationship); ok {
														//                                    body.EthNetworkPolicy = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "EthQosPolicy") && isMoRef(openapi.VnicEthQosPolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("EthQosPolicy"); err == nil {
													paramVal := openapi.VnicEthQosPolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.EthQosPolicy = &paramVal
														//                                if v, ok := v.(openapi.VnicEthQosPolicyRelationship); ok {
														//                                    body.EthQosPolicy = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "LanConnectivityPolicy") && isMoRef(openapi.VnicLanConnectivityPolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("LanConnectivityPolicy"); err == nil {
													paramVal := openapi.VnicLanConnectivityPolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.LanConnectivityPolicy = &paramVal
														//                                if v, ok := v.(openapi.VnicLanConnectivityPolicyRelationship); ok {
														//                                    body.LanConnectivityPolicy = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.VnicEthIf(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'vnic.EthIf' resource.",
										Long: `Create a 'vnic.EthIf' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Cdn with unknown data type VnicCdn
									if isMoRef(openapi.VnicCdn{}) {
										cmd.Flags().String("Cdn", "", "Cdn")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Placement with unknown data type VnicPlacementSettings
									if isMoRef(openapi.VnicPlacementSettings{}) {
										cmd.Flags().String("Placement", "", "Placement")
									}

									//Skipping var UsnicSettings with unknown data type VnicUsnicSettings
									if isMoRef(openapi.VnicUsnicSettings{}) {
										cmd.Flags().String("UsnicSettings", "", "UsnicSettings")
									}

									//Skipping var VmqSettings with unknown data type VnicVmqSettings
									if isMoRef(openapi.VnicVmqSettings{}) {
										cmd.Flags().String("VmqSettings", "", "VmqSettings")
									}

									//Skipping var EthAdapterPolicy with unknown data type VnicEthAdapterPolicyRelationship
									if isMoRef(openapi.VnicEthAdapterPolicyRelationship{}) {
										cmd.Flags().String("EthAdapterPolicy", "", "EthAdapterPolicy")
									}

									//Skipping var EthNetworkPolicy with unknown data type VnicEthNetworkPolicyRelationship
									if isMoRef(openapi.VnicEthNetworkPolicyRelationship{}) {
										cmd.Flags().String("EthNetworkPolicy", "", "EthNetworkPolicy")
									}

									//Skipping var EthQosPolicy with unknown data type VnicEthQosPolicyRelationship
									if isMoRef(openapi.VnicEthQosPolicyRelationship{}) {
										cmd.Flags().String("EthQosPolicy", "", "EthQosPolicy")
									}

									//Skipping var LanConnectivityPolicy with unknown data type VnicLanConnectivityPolicyRelationship
									if isMoRef(openapi.VnicLanConnectivityPolicyRelationship{}) {
										cmd.Flags().String("LanConnectivityPolicy", "", "LanConnectivityPolicy")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var VlanSettings with unknown data type VnicVlanSettings

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "ethnetworkpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VnicApi.CreateVnicEthNetworkPolicy(authCtx)

											body := openapi.NewVnicEthNetworkPolicy()

											//Set class id and object type by default
											body.ClassId = "vnic.EthNetworkPolicy"
											body.ObjectType = "vnic.EthNetworkPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "VlanSettings") && isMoRef(openapi.VnicVlanSettings{}) {
												if f, err := cmd.Flags().GetString("VlanSettings"); err == nil {
													paramVal := openapi.VnicVlanSettings{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VlanSettings = &paramVal
														//                                if v, ok := v.(openapi.VnicVlanSettings); ok {
														//                                    body.VlanSettings = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.VnicEthNetworkPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'vnic.EthNetworkPolicy' resource.",
										Long: `Create a 'vnic.EthNetworkPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var VlanSettings with unknown data type VnicVlanSettings
									if isMoRef(openapi.VnicVlanSettings{}) {
										cmd.Flags().String("VlanSettings", "", "VlanSettings")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var Cos with unknown data type int64

									//Skipping var Mtu with unknown data type int64

									//Skipping var RateLimit with unknown data type int64

									var TrustHostCos bool

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "ethqospolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VnicApi.CreateVnicEthQosPolicy(authCtx)

											body := openapi.NewVnicEthQosPolicy()

											//Set class id and object type by default
											body.ClassId = "vnic.EthQosPolicy"
											body.ObjectType = "vnic.EthQosPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "TrustHostCos") {
												body.TrustHostCos = &TrustHostCos
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.VnicEthQosPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'vnic.EthQosPolicy' resource.",
										Long: `Create a 'vnic.EthQosPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&TrustHostCos, "TrustHostCos", false, "TrustHostCos")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var ErrorDetectionTimeout with unknown data type int64

									//Skipping var ErrorRecoverySettings with unknown data type VnicFcErrorRecoverySettings

									//Skipping var FlogiSettings with unknown data type VnicFlogiSettings

									//Skipping var InterruptSettings with unknown data type VnicFcInterruptSettings

									//Skipping var IoThrottleCount with unknown data type int64

									//Skipping var LunCount with unknown data type int64

									//Skipping var LunQueueDepth with unknown data type int64

									//Skipping var PlogiSettings with unknown data type VnicPlogiSettings

									//Skipping var ResourceAllocationTimeout with unknown data type int64

									//Skipping var RxQueueSettings with unknown data type VnicFcQueueSettings

									//Skipping var ScsiQueueSettings with unknown data type VnicScsiQueueSettings

									//Skipping var TxQueueSettings with unknown data type VnicFcQueueSettings

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "fcadapterpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VnicApi.CreateVnicFcAdapterPolicy(authCtx)

											body := openapi.NewVnicFcAdapterPolicy()

											//Set class id and object type by default
											body.ClassId = "vnic.FcAdapterPolicy"
											body.ObjectType = "vnic.FcAdapterPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "ErrorRecoverySettings") && isMoRef(openapi.VnicFcErrorRecoverySettings{}) {
												if f, err := cmd.Flags().GetString("ErrorRecoverySettings"); err == nil {
													paramVal := openapi.VnicFcErrorRecoverySettings{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ErrorRecoverySettings = &paramVal
														//                                if v, ok := v.(openapi.VnicFcErrorRecoverySettings); ok {
														//                                    body.ErrorRecoverySettings = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "FlogiSettings") && isMoRef(openapi.VnicFlogiSettings{}) {
												if f, err := cmd.Flags().GetString("FlogiSettings"); err == nil {
													paramVal := openapi.VnicFlogiSettings{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.FlogiSettings = &paramVal
														//                                if v, ok := v.(openapi.VnicFlogiSettings); ok {
														//                                    body.FlogiSettings = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "InterruptSettings") && isMoRef(openapi.VnicFcInterruptSettings{}) {
												if f, err := cmd.Flags().GetString("InterruptSettings"); err == nil {
													paramVal := openapi.VnicFcInterruptSettings{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.InterruptSettings = &paramVal
														//                                if v, ok := v.(openapi.VnicFcInterruptSettings); ok {
														//                                    body.InterruptSettings = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "PlogiSettings") && isMoRef(openapi.VnicPlogiSettings{}) {
												if f, err := cmd.Flags().GetString("PlogiSettings"); err == nil {
													paramVal := openapi.VnicPlogiSettings{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.PlogiSettings = &paramVal
														//                                if v, ok := v.(openapi.VnicPlogiSettings); ok {
														//                                    body.PlogiSettings = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "RxQueueSettings") && isMoRef(openapi.VnicFcQueueSettings{}) {
												if f, err := cmd.Flags().GetString("RxQueueSettings"); err == nil {
													paramVal := openapi.VnicFcQueueSettings{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.RxQueueSettings = &paramVal
														//                                if v, ok := v.(openapi.VnicFcQueueSettings); ok {
														//                                    body.RxQueueSettings = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ScsiQueueSettings") && isMoRef(openapi.VnicScsiQueueSettings{}) {
												if f, err := cmd.Flags().GetString("ScsiQueueSettings"); err == nil {
													paramVal := openapi.VnicScsiQueueSettings{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ScsiQueueSettings = &paramVal
														//                                if v, ok := v.(openapi.VnicScsiQueueSettings); ok {
														//                                    body.ScsiQueueSettings = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "TxQueueSettings") && isMoRef(openapi.VnicFcQueueSettings{}) {
												if f, err := cmd.Flags().GetString("TxQueueSettings"); err == nil {
													paramVal := openapi.VnicFcQueueSettings{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.TxQueueSettings = &paramVal
														//                                if v, ok := v.(openapi.VnicFcQueueSettings); ok {
														//                                    body.TxQueueSettings = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.VnicFcAdapterPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'vnic.FcAdapterPolicy' resource.",
										Long: `Create a 'vnic.FcAdapterPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var ErrorRecoverySettings with unknown data type VnicFcErrorRecoverySettings
									if isMoRef(openapi.VnicFcErrorRecoverySettings{}) {
										cmd.Flags().String("ErrorRecoverySettings", "", "ErrorRecoverySettings")
									}

									//Skipping var FlogiSettings with unknown data type VnicFlogiSettings
									if isMoRef(openapi.VnicFlogiSettings{}) {
										cmd.Flags().String("FlogiSettings", "", "FlogiSettings")
									}

									//Skipping var InterruptSettings with unknown data type VnicFcInterruptSettings
									if isMoRef(openapi.VnicFcInterruptSettings{}) {
										cmd.Flags().String("InterruptSettings", "", "InterruptSettings")
									}

									//Skipping var PlogiSettings with unknown data type VnicPlogiSettings
									if isMoRef(openapi.VnicPlogiSettings{}) {
										cmd.Flags().String("PlogiSettings", "", "PlogiSettings")
									}

									//Skipping var RxQueueSettings with unknown data type VnicFcQueueSettings
									if isMoRef(openapi.VnicFcQueueSettings{}) {
										cmd.Flags().String("RxQueueSettings", "", "RxQueueSettings")
									}

									//Skipping var ScsiQueueSettings with unknown data type VnicScsiQueueSettings
									if isMoRef(openapi.VnicScsiQueueSettings{}) {
										cmd.Flags().String("ScsiQueueSettings", "", "ScsiQueueSettings")
									}

									//Skipping var TxQueueSettings with unknown data type VnicFcQueueSettings
									if isMoRef(openapi.VnicFcQueueSettings{}) {
										cmd.Flags().String("TxQueueSettings", "", "TxQueueSettings")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Name string

									//Skipping var Order with unknown data type int64

									var PersistentBindings bool

									//Skipping var Placement with unknown data type VnicPlacementSettings

									var Type string

									//Skipping var FcAdapterPolicy with unknown data type VnicFcAdapterPolicyRelationship

									//Skipping var FcNetworkPolicy with unknown data type VnicFcNetworkPolicyRelationship

									//Skipping var FcQosPolicy with unknown data type VnicFcQosPolicyRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var SanConnectivityPolicy with unknown data type VnicSanConnectivityPolicyRelationship

									cmd := &cobra.Command{
										Use: "fcif",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VnicApi.CreateVnicFcIf(authCtx)

											body := openapi.NewVnicFcIf()

											//Set class id and object type by default
											body.ClassId = "vnic.FcIf"
											body.ObjectType = "vnic.FcIf"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "PersistentBindings") {
												body.PersistentBindings = &PersistentBindings
											}

											if isFlagPassed(cmd.Flags(), "Placement") && isMoRef(openapi.VnicPlacementSettings{}) {
												if f, err := cmd.Flags().GetString("Placement"); err == nil {
													paramVal := openapi.VnicPlacementSettings{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Placement = &paramVal
														//                                if v, ok := v.(openapi.VnicPlacementSettings); ok {
														//                                    body.Placement = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Type") {
												body.Type = &Type
											}

											if isFlagPassed(cmd.Flags(), "FcAdapterPolicy") && isMoRef(openapi.VnicFcAdapterPolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("FcAdapterPolicy"); err == nil {
													paramVal := openapi.VnicFcAdapterPolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.FcAdapterPolicy = &paramVal
														//                                if v, ok := v.(openapi.VnicFcAdapterPolicyRelationship); ok {
														//                                    body.FcAdapterPolicy = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "FcNetworkPolicy") && isMoRef(openapi.VnicFcNetworkPolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("FcNetworkPolicy"); err == nil {
													paramVal := openapi.VnicFcNetworkPolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.FcNetworkPolicy = &paramVal
														//                                if v, ok := v.(openapi.VnicFcNetworkPolicyRelationship); ok {
														//                                    body.FcNetworkPolicy = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "FcQosPolicy") && isMoRef(openapi.VnicFcQosPolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("FcQosPolicy"); err == nil {
													paramVal := openapi.VnicFcQosPolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.FcQosPolicy = &paramVal
														//                                if v, ok := v.(openapi.VnicFcQosPolicyRelationship); ok {
														//                                    body.FcQosPolicy = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "SanConnectivityPolicy") && isMoRef(openapi.VnicSanConnectivityPolicyRelationship{}) {
												if f, err := cmd.Flags().GetString("SanConnectivityPolicy"); err == nil {
													paramVal := openapi.VnicSanConnectivityPolicyRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.SanConnectivityPolicy = &paramVal
														//                                if v, ok := v.(openapi.VnicSanConnectivityPolicyRelationship); ok {
														//                                    body.SanConnectivityPolicy = &v
														//                                }
													}
												}
											}

											req = req.VnicFcIf(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'vnic.FcIf' resource.",
										Long: `Create a 'vnic.FcIf' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&PersistentBindings, "PersistentBindings", false, "PersistentBindings")

									//Skipping var Placement with unknown data type VnicPlacementSettings
									if isMoRef(openapi.VnicPlacementSettings{}) {
										cmd.Flags().String("Placement", "", "Placement")
									}

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									//Skipping var FcAdapterPolicy with unknown data type VnicFcAdapterPolicyRelationship
									if isMoRef(openapi.VnicFcAdapterPolicyRelationship{}) {
										cmd.Flags().String("FcAdapterPolicy", "", "FcAdapterPolicy")
									}

									//Skipping var FcNetworkPolicy with unknown data type VnicFcNetworkPolicyRelationship
									if isMoRef(openapi.VnicFcNetworkPolicyRelationship{}) {
										cmd.Flags().String("FcNetworkPolicy", "", "FcNetworkPolicy")
									}

									//Skipping var FcQosPolicy with unknown data type VnicFcQosPolicyRelationship
									if isMoRef(openapi.VnicFcQosPolicyRelationship{}) {
										cmd.Flags().String("FcQosPolicy", "", "FcQosPolicy")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									//Skipping var SanConnectivityPolicy with unknown data type VnicSanConnectivityPolicyRelationship
									if isMoRef(openapi.VnicSanConnectivityPolicyRelationship{}) {
										cmd.Flags().String("SanConnectivityPolicy", "", "SanConnectivityPolicy")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var VsanSettings with unknown data type VnicVsanSettings

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "fcnetworkpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VnicApi.CreateVnicFcNetworkPolicy(authCtx)

											body := openapi.NewVnicFcNetworkPolicy()

											//Set class id and object type by default
											body.ClassId = "vnic.FcNetworkPolicy"
											body.ObjectType = "vnic.FcNetworkPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "VsanSettings") && isMoRef(openapi.VnicVsanSettings{}) {
												if f, err := cmd.Flags().GetString("VsanSettings"); err == nil {
													paramVal := openapi.VnicVsanSettings{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VsanSettings = &paramVal
														//                                if v, ok := v.(openapi.VnicVsanSettings); ok {
														//                                    body.VsanSettings = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.VnicFcNetworkPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'vnic.FcNetworkPolicy' resource.",
										Long: `Create a 'vnic.FcNetworkPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var VsanSettings with unknown data type VnicVsanSettings
									if isMoRef(openapi.VnicVsanSettings{}) {
										cmd.Flags().String("VsanSettings", "", "VsanSettings")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var Cos with unknown data type int64

									//Skipping var MaxDataFieldSize with unknown data type int64

									//Skipping var RateLimit with unknown data type int64

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "fcqospolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VnicApi.CreateVnicFcQosPolicy(authCtx)

											body := openapi.NewVnicFcQosPolicy()

											//Set class id and object type by default
											body.ClassId = "vnic.FcQosPolicy"
											body.ObjectType = "vnic.FcQosPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.VnicFcQosPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'vnic.FcQosPolicy' resource.",
										Long: `Create a 'vnic.FcQosPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var EthIfs with unknown data type []VnicEthIfRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "lanconnectivitypolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VnicApi.CreateVnicLanConnectivityPolicy(authCtx)

											body := openapi.NewVnicLanConnectivityPolicy()

											//Set class id and object type by default
											body.ClassId = "vnic.LanConnectivityPolicy"
											body.ObjectType = "vnic.LanConnectivityPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.VnicLanConnectivityPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'vnic.LanConnectivityPolicy' resource.",
										Long: `Create a 'vnic.LanConnectivityPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var FcIfs with unknown data type []VnicFcIfRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "sanconnectivitypolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VnicApi.CreateVnicSanConnectivityPolicy(authCtx)

											body := openapi.NewVnicSanConnectivityPolicy()

											//Set class id and object type by default
											body.ClassId = "vnic.SanConnectivityPolicy"
											body.ObjectType = "vnic.SanConnectivityPolicy"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											req = req.VnicSanConnectivityPolicy(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'vnic.SanConnectivityPolicy' resource.",
										Long: `Create a 'vnic.SanConnectivityPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var AdvancedFilter bool

									//Skipping var ArfsSettings with unknown data type VnicArfsSettings

									//Skipping var CompletionQueueSettings with unknown data type VnicCompletionQueueSettings

									//Skipping var InterruptSettings with unknown data type VnicEthInterruptSettings

									//Skipping var NvgreSettings with unknown data type VnicNvgreSettings

									//Skipping var RoceSettings with unknown data type VnicRoceSettings

									var RssSettings bool

									//Skipping var RxQueueSettings with unknown data type VnicEthRxQueueSettings

									//Skipping var TcpOffloadSettings with unknown data type VnicTcpOffloadSettings

									//Skipping var TxQueueSettings with unknown data type VnicEthTxQueueSettings

									//Skipping var VxlanSettings with unknown data type VnicVxlanSettings

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "updatevnicethadapterpolicy",

										Short: "Update a 'vnic.EthAdapterPolicy' resource.",
										Long: `Update a 'vnic.EthAdapterPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.UpdateVnicEthAdapterPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&AdvancedFilter, "AdvancedFilter", false, "AdvancedFilter")

									//Skipping var ArfsSettings with unknown data type VnicArfsSettings
									if isMoRef(openapi.VnicArfsSettings{}) {
										cmd.Flags().String("ArfsSettings", "", "ArfsSettings")
									}

									//Skipping var CompletionQueueSettings with unknown data type VnicCompletionQueueSettings
									if isMoRef(openapi.VnicCompletionQueueSettings{}) {
										cmd.Flags().String("CompletionQueueSettings", "", "CompletionQueueSettings")
									}

									//Skipping var InterruptSettings with unknown data type VnicEthInterruptSettings
									if isMoRef(openapi.VnicEthInterruptSettings{}) {
										cmd.Flags().String("InterruptSettings", "", "InterruptSettings")
									}

									//Skipping var NvgreSettings with unknown data type VnicNvgreSettings
									if isMoRef(openapi.VnicNvgreSettings{}) {
										cmd.Flags().String("NvgreSettings", "", "NvgreSettings")
									}

									//Skipping var RoceSettings with unknown data type VnicRoceSettings
									if isMoRef(openapi.VnicRoceSettings{}) {
										cmd.Flags().String("RoceSettings", "", "RoceSettings")
									}

									cmd.Flags().BoolVar(&RssSettings, "RssSettings", false, "RssSettings")

									//Skipping var RxQueueSettings with unknown data type VnicEthRxQueueSettings
									if isMoRef(openapi.VnicEthRxQueueSettings{}) {
										cmd.Flags().String("RxQueueSettings", "", "RxQueueSettings")
									}

									//Skipping var TcpOffloadSettings with unknown data type VnicTcpOffloadSettings
									if isMoRef(openapi.VnicTcpOffloadSettings{}) {
										cmd.Flags().String("TcpOffloadSettings", "", "TcpOffloadSettings")
									}

									//Skipping var TxQueueSettings with unknown data type VnicEthTxQueueSettings
									if isMoRef(openapi.VnicEthTxQueueSettings{}) {
										cmd.Flags().String("TxQueueSettings", "", "TxQueueSettings")
									}

									//Skipping var VxlanSettings with unknown data type VnicVxlanSettings
									if isMoRef(openapi.VnicVxlanSettings{}) {
										cmd.Flags().String("VxlanSettings", "", "VxlanSettings")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Cdn with unknown data type VnicCdn

									var Name string

									//Skipping var Order with unknown data type int64

									//Skipping var Placement with unknown data type VnicPlacementSettings

									//Skipping var UsnicSettings with unknown data type VnicUsnicSettings

									//Skipping var VmqSettings with unknown data type VnicVmqSettings

									//Skipping var EthAdapterPolicy with unknown data type VnicEthAdapterPolicyRelationship

									//Skipping var EthNetworkPolicy with unknown data type VnicEthNetworkPolicyRelationship

									//Skipping var EthQosPolicy with unknown data type VnicEthQosPolicyRelationship

									//Skipping var LanConnectivityPolicy with unknown data type VnicLanConnectivityPolicyRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "updatevnicethif",

										Short: "Update a 'vnic.EthIf' resource.",
										Long: `Update a 'vnic.EthIf' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.UpdateVnicEthIf(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Cdn with unknown data type VnicCdn
									if isMoRef(openapi.VnicCdn{}) {
										cmd.Flags().String("Cdn", "", "Cdn")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Placement with unknown data type VnicPlacementSettings
									if isMoRef(openapi.VnicPlacementSettings{}) {
										cmd.Flags().String("Placement", "", "Placement")
									}

									//Skipping var UsnicSettings with unknown data type VnicUsnicSettings
									if isMoRef(openapi.VnicUsnicSettings{}) {
										cmd.Flags().String("UsnicSettings", "", "UsnicSettings")
									}

									//Skipping var VmqSettings with unknown data type VnicVmqSettings
									if isMoRef(openapi.VnicVmqSettings{}) {
										cmd.Flags().String("VmqSettings", "", "VmqSettings")
									}

									//Skipping var EthAdapterPolicy with unknown data type VnicEthAdapterPolicyRelationship
									if isMoRef(openapi.VnicEthAdapterPolicyRelationship{}) {
										cmd.Flags().String("EthAdapterPolicy", "", "EthAdapterPolicy")
									}

									//Skipping var EthNetworkPolicy with unknown data type VnicEthNetworkPolicyRelationship
									if isMoRef(openapi.VnicEthNetworkPolicyRelationship{}) {
										cmd.Flags().String("EthNetworkPolicy", "", "EthNetworkPolicy")
									}

									//Skipping var EthQosPolicy with unknown data type VnicEthQosPolicyRelationship
									if isMoRef(openapi.VnicEthQosPolicyRelationship{}) {
										cmd.Flags().String("EthQosPolicy", "", "EthQosPolicy")
									}

									//Skipping var LanConnectivityPolicy with unknown data type VnicLanConnectivityPolicyRelationship
									if isMoRef(openapi.VnicLanConnectivityPolicyRelationship{}) {
										cmd.Flags().String("LanConnectivityPolicy", "", "LanConnectivityPolicy")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var VlanSettings with unknown data type VnicVlanSettings

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "updatevnicethnetworkpolicy",

										Short: "Update a 'vnic.EthNetworkPolicy' resource.",
										Long: `Update a 'vnic.EthNetworkPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.UpdateVnicEthNetworkPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var VlanSettings with unknown data type VnicVlanSettings
									if isMoRef(openapi.VnicVlanSettings{}) {
										cmd.Flags().String("VlanSettings", "", "VlanSettings")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var Cos with unknown data type int64

									//Skipping var Mtu with unknown data type int64

									//Skipping var RateLimit with unknown data type int64

									var TrustHostCos bool

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "updatevnicethqospolicy",

										Short: "Update a 'vnic.EthQosPolicy' resource.",
										Long: `Update a 'vnic.EthQosPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.UpdateVnicEthQosPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&TrustHostCos, "TrustHostCos", false, "TrustHostCos")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var ErrorDetectionTimeout with unknown data type int64

									//Skipping var ErrorRecoverySettings with unknown data type VnicFcErrorRecoverySettings

									//Skipping var FlogiSettings with unknown data type VnicFlogiSettings

									//Skipping var InterruptSettings with unknown data type VnicFcInterruptSettings

									//Skipping var IoThrottleCount with unknown data type int64

									//Skipping var LunCount with unknown data type int64

									//Skipping var LunQueueDepth with unknown data type int64

									//Skipping var PlogiSettings with unknown data type VnicPlogiSettings

									//Skipping var ResourceAllocationTimeout with unknown data type int64

									//Skipping var RxQueueSettings with unknown data type VnicFcQueueSettings

									//Skipping var ScsiQueueSettings with unknown data type VnicScsiQueueSettings

									//Skipping var TxQueueSettings with unknown data type VnicFcQueueSettings

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "updatevnicfcadapterpolicy",

										Short: "Update a 'vnic.FcAdapterPolicy' resource.",
										Long: `Update a 'vnic.FcAdapterPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.UpdateVnicFcAdapterPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var ErrorRecoverySettings with unknown data type VnicFcErrorRecoverySettings
									if isMoRef(openapi.VnicFcErrorRecoverySettings{}) {
										cmd.Flags().String("ErrorRecoverySettings", "", "ErrorRecoverySettings")
									}

									//Skipping var FlogiSettings with unknown data type VnicFlogiSettings
									if isMoRef(openapi.VnicFlogiSettings{}) {
										cmd.Flags().String("FlogiSettings", "", "FlogiSettings")
									}

									//Skipping var InterruptSettings with unknown data type VnicFcInterruptSettings
									if isMoRef(openapi.VnicFcInterruptSettings{}) {
										cmd.Flags().String("InterruptSettings", "", "InterruptSettings")
									}

									//Skipping var PlogiSettings with unknown data type VnicPlogiSettings
									if isMoRef(openapi.VnicPlogiSettings{}) {
										cmd.Flags().String("PlogiSettings", "", "PlogiSettings")
									}

									//Skipping var RxQueueSettings with unknown data type VnicFcQueueSettings
									if isMoRef(openapi.VnicFcQueueSettings{}) {
										cmd.Flags().String("RxQueueSettings", "", "RxQueueSettings")
									}

									//Skipping var ScsiQueueSettings with unknown data type VnicScsiQueueSettings
									if isMoRef(openapi.VnicScsiQueueSettings{}) {
										cmd.Flags().String("ScsiQueueSettings", "", "ScsiQueueSettings")
									}

									//Skipping var TxQueueSettings with unknown data type VnicFcQueueSettings
									if isMoRef(openapi.VnicFcQueueSettings{}) {
										cmd.Flags().String("TxQueueSettings", "", "TxQueueSettings")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Name string

									//Skipping var Order with unknown data type int64

									var PersistentBindings bool

									//Skipping var Placement with unknown data type VnicPlacementSettings

									var Type string

									//Skipping var FcAdapterPolicy with unknown data type VnicFcAdapterPolicyRelationship

									//Skipping var FcNetworkPolicy with unknown data type VnicFcNetworkPolicyRelationship

									//Skipping var FcQosPolicy with unknown data type VnicFcQosPolicyRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var SanConnectivityPolicy with unknown data type VnicSanConnectivityPolicyRelationship

									cmd := &cobra.Command{
										Use: "updatevnicfcif",

										Short: "Update a 'vnic.FcIf' resource.",
										Long: `Update a 'vnic.FcIf' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.UpdateVnicFcIf(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&PersistentBindings, "PersistentBindings", false, "PersistentBindings")

									//Skipping var Placement with unknown data type VnicPlacementSettings
									if isMoRef(openapi.VnicPlacementSettings{}) {
										cmd.Flags().String("Placement", "", "Placement")
									}

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									//Skipping var FcAdapterPolicy with unknown data type VnicFcAdapterPolicyRelationship
									if isMoRef(openapi.VnicFcAdapterPolicyRelationship{}) {
										cmd.Flags().String("FcAdapterPolicy", "", "FcAdapterPolicy")
									}

									//Skipping var FcNetworkPolicy with unknown data type VnicFcNetworkPolicyRelationship
									if isMoRef(openapi.VnicFcNetworkPolicyRelationship{}) {
										cmd.Flags().String("FcNetworkPolicy", "", "FcNetworkPolicy")
									}

									//Skipping var FcQosPolicy with unknown data type VnicFcQosPolicyRelationship
									if isMoRef(openapi.VnicFcQosPolicyRelationship{}) {
										cmd.Flags().String("FcQosPolicy", "", "FcQosPolicy")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									//Skipping var SanConnectivityPolicy with unknown data type VnicSanConnectivityPolicyRelationship
									if isMoRef(openapi.VnicSanConnectivityPolicyRelationship{}) {
										cmd.Flags().String("SanConnectivityPolicy", "", "SanConnectivityPolicy")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var VsanSettings with unknown data type VnicVsanSettings

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "updatevnicfcnetworkpolicy",

										Short: "Update a 'vnic.FcNetworkPolicy' resource.",
										Long: `Update a 'vnic.FcNetworkPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.UpdateVnicFcNetworkPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var VsanSettings with unknown data type VnicVsanSettings
									if isMoRef(openapi.VnicVsanSettings{}) {
										cmd.Flags().String("VsanSettings", "", "VsanSettings")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var Cos with unknown data type int64

									//Skipping var MaxDataFieldSize with unknown data type int64

									//Skipping var RateLimit with unknown data type int64

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "updatevnicfcqospolicy",

										Short: "Update a 'vnic.FcQosPolicy' resource.",
										Long: `Update a 'vnic.FcQosPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.UpdateVnicFcQosPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var EthIfs with unknown data type []VnicEthIfRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "updatevniclanconnectivitypolicy",

										Short: "Update a 'vnic.LanConnectivityPolicy' resource.",
										Long: `Update a 'vnic.LanConnectivityPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.UpdateVnicLanConnectivityPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var FcIfs with unknown data type []VnicFcIfRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "updatevnicsanconnectivitypolicy",

										Short: "Update a 'vnic.SanConnectivityPolicy' resource.",
										Long: `Update a 'vnic.SanConnectivityPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.UpdateVnicSanConnectivityPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "workflow",

								Short: "Create Workflow resource(s)",
								Long: `Create Workflow resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Batch with unknown data type []WorkflowApi

									//Skipping var Constraints with unknown data type WorkflowTaskConstraints

									var Description string

									var Name string

									//Skipping var Outcomes with unknown data type map[string]interface{}

									//Skipping var Output with unknown data type map[string]interface{}

									var SkipOnCondition string

									//Skipping var TaskDefinition with unknown data type WorkflowTaskDefinitionRelationship

									cmd := &cobra.Command{
										Use: "batchapiexecutor",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.WorkflowApi.CreateWorkflowBatchApiExecutor(authCtx)

											body := openapi.NewWorkflowBatchApiExecutor()

											//Set class id and object type by default
											body.ClassId = "workflow.BatchApiExecutor"
											body.ObjectType = "workflow.BatchApiExecutor"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Constraints") && isMoRef(openapi.WorkflowTaskConstraints{}) {
												if f, err := cmd.Flags().GetString("Constraints"); err == nil {
													paramVal := openapi.WorkflowTaskConstraints{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Constraints = &paramVal
														//                                if v, ok := v.(openapi.WorkflowTaskConstraints); ok {
														//                                    body.Constraints = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "SkipOnCondition") {
												body.SkipOnCondition = &SkipOnCondition
											}

											if isFlagPassed(cmd.Flags(), "TaskDefinition") && isMoRef(openapi.WorkflowTaskDefinitionRelationship{}) {
												if f, err := cmd.Flags().GetString("TaskDefinition"); err == nil {
													paramVal := openapi.WorkflowTaskDefinitionRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.TaskDefinition = &paramVal
														//                                if v, ok := v.(openapi.WorkflowTaskDefinitionRelationship); ok {
														//                                    body.TaskDefinition = &v
														//                                }
													}
												}
											}

											req = req.WorkflowBatchApiExecutor(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'workflow.BatchApiExecutor' resource.",
										Long: `Create a 'workflow.BatchApiExecutor' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Constraints with unknown data type WorkflowTaskConstraints
									if isMoRef(openapi.WorkflowTaskConstraints{}) {
										cmd.Flags().String("Constraints", "", "Constraints")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&SkipOnCondition, "SkipOnCondition", "", "SkipOnCondition")

									//Skipping var TaskDefinition with unknown data type WorkflowTaskDefinitionRelationship
									if isMoRef(openapi.WorkflowTaskDefinitionRelationship{}) {
										cmd.Flags().String("TaskDefinition", "", "TaskDefinition")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var CompositeType bool

									var Description string

									var Label string

									var Name string

									//Skipping var TypeDefinition with unknown data type []WorkflowBaseDataType

									//Skipping var Catalog with unknown data type WorkflowCatalogRelationship

									cmd := &cobra.Command{
										Use: "customdatatypedefinition",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.WorkflowApi.CreateWorkflowCustomDataTypeDefinition(authCtx)

											body := openapi.NewWorkflowCustomDataTypeDefinition()

											//Set class id and object type by default
											body.ClassId = "workflow.CustomDataTypeDefinition"
											body.ObjectType = "workflow.CustomDataTypeDefinition"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "CompositeType") {
												body.CompositeType = &CompositeType
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Label") {
												body.Label = &Label
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Catalog") && isMoRef(openapi.WorkflowCatalogRelationship{}) {
												if f, err := cmd.Flags().GetString("Catalog"); err == nil {
													paramVal := openapi.WorkflowCatalogRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Catalog = &paramVal
														//                                if v, ok := v.(openapi.WorkflowCatalogRelationship); ok {
														//                                    body.Catalog = &v
														//                                }
													}
												}
											}

											req = req.WorkflowCustomDataTypeDefinition(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'workflow.CustomDataTypeDefinition' resource.",
										Long: `Create a 'workflow.CustomDataTypeDefinition' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&CompositeType, "CompositeType", false, "CompositeType")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Label, "Label", "", "Label")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Catalog with unknown data type WorkflowCatalogRelationship
									if isMoRef(openapi.WorkflowCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DefaultVersion bool

									var Description string

									//Skipping var InternalProperties with unknown data type WorkflowInternalProperties

									var Label string

									var LicenseEntitlement string

									var Name string

									//Skipping var Properties with unknown data type WorkflowProperties

									var SecurePropAccess bool

									//Skipping var Version with unknown data type int64

									//Skipping var Catalog with unknown data type WorkflowCatalogRelationship

									//Skipping var ImplementedTasks with unknown data type []WorkflowTaskDefinitionRelationship

									//Skipping var InterfaceTask with unknown data type WorkflowTaskDefinitionRelationship

									cmd := &cobra.Command{
										Use: "taskdefinition",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.WorkflowApi.CreateWorkflowTaskDefinition(authCtx)

											body := openapi.NewWorkflowTaskDefinition()

											//Set class id and object type by default
											body.ClassId = "workflow.TaskDefinition"
											body.ObjectType = "workflow.TaskDefinition"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "DefaultVersion") {
												body.DefaultVersion = &DefaultVersion
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "InternalProperties") && isMoRef(openapi.WorkflowInternalProperties{}) {
												if f, err := cmd.Flags().GetString("InternalProperties"); err == nil {
													paramVal := openapi.WorkflowInternalProperties{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.InternalProperties = &paramVal
														//                                if v, ok := v.(openapi.WorkflowInternalProperties); ok {
														//                                    body.InternalProperties = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Label") {
												body.Label = &Label
											}

											if isFlagPassed(cmd.Flags(), "LicenseEntitlement") {
												body.LicenseEntitlement = &LicenseEntitlement
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Properties") && isMoRef(openapi.WorkflowProperties{}) {
												if f, err := cmd.Flags().GetString("Properties"); err == nil {
													paramVal := openapi.WorkflowProperties{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Properties = &paramVal
														//                                if v, ok := v.(openapi.WorkflowProperties); ok {
														//                                    body.Properties = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "SecurePropAccess") {
												body.SecurePropAccess = &SecurePropAccess
											}

											if isFlagPassed(cmd.Flags(), "Catalog") && isMoRef(openapi.WorkflowCatalogRelationship{}) {
												if f, err := cmd.Flags().GetString("Catalog"); err == nil {
													paramVal := openapi.WorkflowCatalogRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Catalog = &paramVal
														//                                if v, ok := v.(openapi.WorkflowCatalogRelationship); ok {
														//                                    body.Catalog = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "InterfaceTask") && isMoRef(openapi.WorkflowTaskDefinitionRelationship{}) {
												if f, err := cmd.Flags().GetString("InterfaceTask"); err == nil {
													paramVal := openapi.WorkflowTaskDefinitionRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.InterfaceTask = &paramVal
														//                                if v, ok := v.(openapi.WorkflowTaskDefinitionRelationship); ok {
														//                                    body.InterfaceTask = &v
														//                                }
													}
												}
											}

											req = req.WorkflowTaskDefinition(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'workflow.TaskDefinition' resource.",
										Long: `Create a 'workflow.TaskDefinition' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&DefaultVersion, "DefaultVersion", false, "DefaultVersion")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									//Skipping var InternalProperties with unknown data type WorkflowInternalProperties
									if isMoRef(openapi.WorkflowInternalProperties{}) {
										cmd.Flags().String("InternalProperties", "", "InternalProperties")
									}

									cmd.Flags().StringVar(&Label, "Label", "", "Label")

									cmd.Flags().StringVar(&LicenseEntitlement, "LicenseEntitlement", "", "LicenseEntitlement")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Properties with unknown data type WorkflowProperties
									if isMoRef(openapi.WorkflowProperties{}) {
										cmd.Flags().String("Properties", "", "Properties")
									}

									cmd.Flags().BoolVar(&SecurePropAccess, "SecurePropAccess", false, "SecurePropAccess")

									//Skipping var Catalog with unknown data type WorkflowCatalogRelationship
									if isMoRef(openapi.WorkflowCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									//Skipping var InterfaceTask with unknown data type WorkflowTaskDefinitionRelationship
									if isMoRef(openapi.WorkflowTaskDefinitionRelationship{}) {
										cmd.Flags().String("InterfaceTask", "", "InterfaceTask")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Batch with unknown data type []WorkflowApi

									//Skipping var Constraints with unknown data type WorkflowTaskConstraints

									var Description string

									var Name string

									//Skipping var Outcomes with unknown data type map[string]interface{}

									//Skipping var Output with unknown data type map[string]interface{}

									var SkipOnCondition string

									//Skipping var TaskDefinition with unknown data type WorkflowTaskDefinitionRelationship

									cmd := &cobra.Command{
										Use: "updateworkflowbatchapiexecutor",

										Short: "Update a 'workflow.BatchApiExecutor' resource.",
										Long: `Update a 'workflow.BatchApiExecutor' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.UpdateWorkflowBatchApiExecutor(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Constraints with unknown data type WorkflowTaskConstraints
									if isMoRef(openapi.WorkflowTaskConstraints{}) {
										cmd.Flags().String("Constraints", "", "Constraints")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&SkipOnCondition, "SkipOnCondition", "", "SkipOnCondition")

									//Skipping var TaskDefinition with unknown data type WorkflowTaskDefinitionRelationship
									if isMoRef(openapi.WorkflowTaskDefinitionRelationship{}) {
										cmd.Flags().String("TaskDefinition", "", "TaskDefinition")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var CompositeType bool

									var Description string

									var Label string

									var Name string

									//Skipping var TypeDefinition with unknown data type []WorkflowBaseDataType

									//Skipping var Catalog with unknown data type WorkflowCatalogRelationship

									cmd := &cobra.Command{
										Use: "updateworkflowcustomdatatypedefinition",

										Short: "Update a 'workflow.CustomDataTypeDefinition' resource.",
										Long: `Update a 'workflow.CustomDataTypeDefinition' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.UpdateWorkflowCustomDataTypeDefinition(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&CompositeType, "CompositeType", false, "CompositeType")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Label, "Label", "", "Label")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Catalog with unknown data type WorkflowCatalogRelationship
									if isMoRef(openapi.WorkflowCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DefaultVersion bool

									var Description string

									//Skipping var InternalProperties with unknown data type WorkflowInternalProperties

									var Label string

									var LicenseEntitlement string

									var Name string

									//Skipping var Properties with unknown data type WorkflowProperties

									var SecurePropAccess bool

									//Skipping var Version with unknown data type int64

									//Skipping var Catalog with unknown data type WorkflowCatalogRelationship

									//Skipping var ImplementedTasks with unknown data type []WorkflowTaskDefinitionRelationship

									//Skipping var InterfaceTask with unknown data type WorkflowTaskDefinitionRelationship

									cmd := &cobra.Command{
										Use: "updateworkflowtaskdefinition",

										Short: "Update a 'workflow.TaskDefinition' resource.",
										Long: `Update a 'workflow.TaskDefinition' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.UpdateWorkflowTaskDefinition(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&DefaultVersion, "DefaultVersion", false, "DefaultVersion")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									//Skipping var InternalProperties with unknown data type WorkflowInternalProperties
									if isMoRef(openapi.WorkflowInternalProperties{}) {
										cmd.Flags().String("InternalProperties", "", "InternalProperties")
									}

									cmd.Flags().StringVar(&Label, "Label", "", "Label")

									cmd.Flags().StringVar(&LicenseEntitlement, "LicenseEntitlement", "", "LicenseEntitlement")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Properties with unknown data type WorkflowProperties
									if isMoRef(openapi.WorkflowProperties{}) {
										cmd.Flags().String("Properties", "", "Properties")
									}

									cmd.Flags().BoolVar(&SecurePropAccess, "SecurePropAccess", false, "SecurePropAccess")

									//Skipping var Catalog with unknown data type WorkflowCatalogRelationship
									if isMoRef(openapi.WorkflowCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									//Skipping var InterfaceTask with unknown data type WorkflowTaskDefinitionRelationship
									if isMoRef(openapi.WorkflowTaskDefinitionRelationship{}) {
										cmd.Flags().String("InterfaceTask", "", "InterfaceTask")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									//Skipping var EndTime with unknown data type time.Time

									var FailureReason string

									//Skipping var Input with unknown data type map[string]interface{}

									var InstId string

									var Internal bool

									var Label string

									//Skipping var Message with unknown data type []WorkflowMessage

									var Name string

									//Skipping var Output with unknown data type map[string]interface{}

									var RefName string

									//Skipping var RetryCount with unknown data type int64

									//Skipping var StartTime with unknown data type time.Time

									var Status string

									//Skipping var TaskInstIdList with unknown data type []WorkflowTaskRetryInfo

									//Skipping var SubWorkflowInfo with unknown data type WorkflowWorkflowInfoRelationship

									//Skipping var TaskDefinition with unknown data type WorkflowTaskDefinitionRelationship

									//Skipping var WorkflowInfo with unknown data type WorkflowWorkflowInfoRelationship

									cmd := &cobra.Command{
										Use: "updateworkflowtaskinfo",

										Short: "Update a 'workflow.TaskInfo' resource.",
										Long: `Update a 'workflow.TaskInfo' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.UpdateWorkflowTaskInfo(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&FailureReason, "FailureReason", "", "FailureReason")

									cmd.Flags().StringVar(&InstId, "InstId", "", "InstId")

									cmd.Flags().BoolVar(&Internal, "Internal", false, "Internal")

									cmd.Flags().StringVar(&Label, "Label", "", "Label")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&RefName, "RefName", "", "RefName")

									cmd.Flags().StringVar(&Status, "Status", "", "Status")

									//Skipping var SubWorkflowInfo with unknown data type WorkflowWorkflowInfoRelationship
									if isMoRef(openapi.WorkflowWorkflowInfoRelationship{}) {
										cmd.Flags().String("SubWorkflowInfo", "", "SubWorkflowInfo")
									}

									//Skipping var TaskDefinition with unknown data type WorkflowTaskDefinitionRelationship
									if isMoRef(openapi.WorkflowTaskDefinitionRelationship{}) {
										cmd.Flags().String("TaskDefinition", "", "TaskDefinition")
									}

									//Skipping var WorkflowInfo with unknown data type WorkflowWorkflowInfoRelationship
									if isMoRef(openapi.WorkflowWorkflowInfoRelationship{}) {
										cmd.Flags().String("WorkflowInfo", "", "WorkflowInfo")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DefaultVersion bool

									var Description string

									//Skipping var InputDefinition with unknown data type []WorkflowBaseDataType

									var Label string

									var LicenseEntitlement string

									//Skipping var MaxTaskCount with unknown data type int64

									var Name string

									//Skipping var OutputDefinition with unknown data type []WorkflowBaseDataType

									//Skipping var OutputParameters with unknown data type map[string]interface{}

									//Skipping var Properties with unknown data type WorkflowWorkflowProperties

									//Skipping var Tasks with unknown data type []WorkflowWorkflowTask

									//Skipping var UiRenderingData with unknown data type map[string]interface{}

									//Skipping var ValidationInformation with unknown data type WorkflowValidationInformation

									//Skipping var Version with unknown data type int64

									//Skipping var Catalog with unknown data type WorkflowCatalogRelationship

									cmd := &cobra.Command{
										Use: "updateworkflowworkflowdefinition",

										Short: "Update a 'workflow.WorkflowDefinition' resource.",
										Long: `Update a 'workflow.WorkflowDefinition' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.UpdateWorkflowWorkflowDefinition(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&DefaultVersion, "DefaultVersion", false, "DefaultVersion")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Label, "Label", "", "Label")

									cmd.Flags().StringVar(&LicenseEntitlement, "LicenseEntitlement", "", "LicenseEntitlement")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Properties with unknown data type WorkflowWorkflowProperties
									if isMoRef(openapi.WorkflowWorkflowProperties{}) {
										cmd.Flags().String("Properties", "", "Properties")
									}

									//Skipping var ValidationInformation with unknown data type WorkflowValidationInformation
									if isMoRef(openapi.WorkflowValidationInformation{}) {
										cmd.Flags().String("ValidationInformation", "", "ValidationInformation")
									}

									//Skipping var Catalog with unknown data type WorkflowCatalogRelationship
									if isMoRef(openapi.WorkflowCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Action string

									//Skipping var CleanupTime with unknown data type time.Time

									//Skipping var EndTime with unknown data type time.Time

									//Skipping var FailedWorkflowCleanupDuration with unknown data type int64

									//Skipping var Input with unknown data type map[string]interface{}

									var InstId string

									var Internal bool

									var LastAction string

									//Skipping var Message with unknown data type []WorkflowMessage

									//Skipping var MetaVersion with unknown data type int64

									var Name string

									//Skipping var Output with unknown data type map[string]interface{}

									//Skipping var Progress with unknown data type float32

									//Skipping var Properties with unknown data type WorkflowWorkflowInfoProperties

									var RetryFromTaskName string

									var Src string

									//Skipping var StartTime with unknown data type time.Time

									var Status string

									//Skipping var SuccessWorkflowCleanupDuration with unknown data type int64

									var TraceId string

									var Type string

									var UserId string

									var WaitReason string

									//Skipping var WorkflowCtx with unknown data type map[string]interface{}

									var WorkflowMetaType string

									//Skipping var WorkflowTaskCount with unknown data type int64

									//Skipping var Var0ClusterProfile with unknown data type HyperflexClusterProfileRelationship

									//Skipping var Var1Profile with unknown data type ServerProfileRelationship

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var ParentTaskInfo with unknown data type WorkflowTaskInfoRelationship

									//Skipping var PendingDynamicWorkflowInfo with unknown data type WorkflowPendingDynamicWorkflowInfoRelationship

									//Skipping var Permission with unknown data type IamPermissionRelationship

									//Skipping var TaskInfos with unknown data type []WorkflowTaskInfoRelationship

									//Skipping var WorkflowDefinition with unknown data type WorkflowWorkflowDefinitionRelationship

									cmd := &cobra.Command{
										Use: "updateworkflowworkflowinfo",

										Short: "Update a 'workflow.WorkflowInfo' resource.",
										Long: `Update a 'workflow.WorkflowInfo' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.UpdateWorkflowWorkflowInfo(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Action, "Action", "", "Action")

									cmd.Flags().StringVar(&InstId, "InstId", "", "InstId")

									cmd.Flags().BoolVar(&Internal, "Internal", false, "Internal")

									cmd.Flags().StringVar(&LastAction, "LastAction", "", "LastAction")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Properties with unknown data type WorkflowWorkflowInfoProperties
									if isMoRef(openapi.WorkflowWorkflowInfoProperties{}) {
										cmd.Flags().String("Properties", "", "Properties")
									}

									cmd.Flags().StringVar(&RetryFromTaskName, "RetryFromTaskName", "", "RetryFromTaskName")

									cmd.Flags().StringVar(&Src, "Src", "", "Src")

									cmd.Flags().StringVar(&Status, "Status", "", "Status")

									cmd.Flags().StringVar(&TraceId, "TraceId", "", "TraceId")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									cmd.Flags().StringVar(&UserId, "UserId", "", "UserId")

									cmd.Flags().StringVar(&WaitReason, "WaitReason", "", "WaitReason")

									cmd.Flags().StringVar(&WorkflowMetaType, "WorkflowMetaType", "", "WorkflowMetaType")

									//Skipping var Var0ClusterProfile with unknown data type HyperflexClusterProfileRelationship
									if isMoRef(openapi.HyperflexClusterProfileRelationship{}) {
										cmd.Flags().String("Var0ClusterProfile", "", "Var0ClusterProfile")
									}

									//Skipping var Var1Profile with unknown data type ServerProfileRelationship
									if isMoRef(openapi.ServerProfileRelationship{}) {
										cmd.Flags().String("Var1Profile", "", "Var1Profile")
									}

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									//Skipping var ParentTaskInfo with unknown data type WorkflowTaskInfoRelationship
									if isMoRef(openapi.WorkflowTaskInfoRelationship{}) {
										cmd.Flags().String("ParentTaskInfo", "", "ParentTaskInfo")
									}

									//Skipping var PendingDynamicWorkflowInfo with unknown data type WorkflowPendingDynamicWorkflowInfoRelationship
									if isMoRef(openapi.WorkflowPendingDynamicWorkflowInfoRelationship{}) {
										cmd.Flags().String("PendingDynamicWorkflowInfo", "", "PendingDynamicWorkflowInfo")
									}

									//Skipping var Permission with unknown data type IamPermissionRelationship
									if isMoRef(openapi.IamPermissionRelationship{}) {
										cmd.Flags().String("Permission", "", "Permission")
									}

									//Skipping var WorkflowDefinition with unknown data type WorkflowWorkflowDefinitionRelationship
									if isMoRef(openapi.WorkflowWorkflowDefinitionRelationship{}) {
										cmd.Flags().String("WorkflowDefinition", "", "WorkflowDefinition")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DefaultVersion bool

									var Description string

									//Skipping var InputDefinition with unknown data type []WorkflowBaseDataType

									var Label string

									var LicenseEntitlement string

									//Skipping var MaxTaskCount with unknown data type int64

									var Name string

									//Skipping var OutputDefinition with unknown data type []WorkflowBaseDataType

									//Skipping var OutputParameters with unknown data type map[string]interface{}

									//Skipping var Properties with unknown data type WorkflowWorkflowProperties

									//Skipping var Tasks with unknown data type []WorkflowWorkflowTask

									//Skipping var UiRenderingData with unknown data type map[string]interface{}

									//Skipping var ValidationInformation with unknown data type WorkflowValidationInformation

									//Skipping var Version with unknown data type int64

									//Skipping var Catalog with unknown data type WorkflowCatalogRelationship

									cmd := &cobra.Command{
										Use: "workflowdefinition",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.WorkflowApi.CreateWorkflowWorkflowDefinition(authCtx)

											body := openapi.NewWorkflowWorkflowDefinition()

											//Set class id and object type by default
											body.ClassId = "workflow.WorkflowDefinition"
											body.ObjectType = "workflow.WorkflowDefinition"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "DefaultVersion") {
												body.DefaultVersion = &DefaultVersion
											}

											if isFlagPassed(cmd.Flags(), "Description") {
												body.Description = &Description
											}

											if isFlagPassed(cmd.Flags(), "Label") {
												body.Label = &Label
											}

											if isFlagPassed(cmd.Flags(), "LicenseEntitlement") {
												body.LicenseEntitlement = &LicenseEntitlement
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Properties") && isMoRef(openapi.WorkflowWorkflowProperties{}) {
												if f, err := cmd.Flags().GetString("Properties"); err == nil {
													paramVal := openapi.WorkflowWorkflowProperties{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Properties = &paramVal
														//                                if v, ok := v.(openapi.WorkflowWorkflowProperties); ok {
														//                                    body.Properties = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ValidationInformation") && isMoRef(openapi.WorkflowValidationInformation{}) {
												if f, err := cmd.Flags().GetString("ValidationInformation"); err == nil {
													paramVal := openapi.WorkflowValidationInformation{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ValidationInformation = &paramVal
														//                                if v, ok := v.(openapi.WorkflowValidationInformation); ok {
														//                                    body.ValidationInformation = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Catalog") && isMoRef(openapi.WorkflowCatalogRelationship{}) {
												if f, err := cmd.Flags().GetString("Catalog"); err == nil {
													paramVal := openapi.WorkflowCatalogRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Catalog = &paramVal
														//                                if v, ok := v.(openapi.WorkflowCatalogRelationship); ok {
														//                                    body.Catalog = &v
														//                                }
													}
												}
											}

											req = req.WorkflowWorkflowDefinition(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'workflow.WorkflowDefinition' resource.",
										Long: `Create a 'workflow.WorkflowDefinition' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&DefaultVersion, "DefaultVersion", false, "DefaultVersion")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Label, "Label", "", "Label")

									cmd.Flags().StringVar(&LicenseEntitlement, "LicenseEntitlement", "", "LicenseEntitlement")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Properties with unknown data type WorkflowWorkflowProperties
									if isMoRef(openapi.WorkflowWorkflowProperties{}) {
										cmd.Flags().String("Properties", "", "Properties")
									}

									//Skipping var ValidationInformation with unknown data type WorkflowValidationInformation
									if isMoRef(openapi.WorkflowValidationInformation{}) {
										cmd.Flags().String("ValidationInformation", "", "ValidationInformation")
									}

									//Skipping var Catalog with unknown data type WorkflowCatalogRelationship
									if isMoRef(openapi.WorkflowCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Action string

									//Skipping var CleanupTime with unknown data type time.Time

									//Skipping var EndTime with unknown data type time.Time

									//Skipping var FailedWorkflowCleanupDuration with unknown data type int64

									//Skipping var Input with unknown data type map[string]interface{}

									var InstId string

									var Internal bool

									var LastAction string

									//Skipping var Message with unknown data type []WorkflowMessage

									//Skipping var MetaVersion with unknown data type int64

									var Name string

									//Skipping var Output with unknown data type map[string]interface{}

									//Skipping var Progress with unknown data type float32

									//Skipping var Properties with unknown data type WorkflowWorkflowInfoProperties

									var RetryFromTaskName string

									var Src string

									//Skipping var StartTime with unknown data type time.Time

									var Status string

									//Skipping var SuccessWorkflowCleanupDuration with unknown data type int64

									var TraceId string

									var Type string

									var UserId string

									var WaitReason string

									//Skipping var WorkflowCtx with unknown data type map[string]interface{}

									var WorkflowMetaType string

									//Skipping var WorkflowTaskCount with unknown data type int64

									//Skipping var Var0ClusterProfile with unknown data type HyperflexClusterProfileRelationship

									//Skipping var Var1Profile with unknown data type ServerProfileRelationship

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var ParentTaskInfo with unknown data type WorkflowTaskInfoRelationship

									//Skipping var PendingDynamicWorkflowInfo with unknown data type WorkflowPendingDynamicWorkflowInfoRelationship

									//Skipping var Permission with unknown data type IamPermissionRelationship

									//Skipping var TaskInfos with unknown data type []WorkflowTaskInfoRelationship

									//Skipping var WorkflowDefinition with unknown data type WorkflowWorkflowDefinitionRelationship

									cmd := &cobra.Command{
										Use: "workflowinfo",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.WorkflowApi.CreateWorkflowWorkflowInfo(authCtx)

											body := openapi.NewWorkflowWorkflowInfo()

											//Set class id and object type by default
											body.ClassId = "workflow.WorkflowInfo"
											body.ObjectType = "workflow.WorkflowInfo"

											bodyFormat, err := cmd.Flags().GetString("bodyformat")
											if err == nil && bodyFormat == "json" {
												// Gather body from JSON on stdin.
												fmt.Println("Waiting for JSON body: ")
												err := json.NewDecoder(os.Stdin).Decode(&body)
												if err != nil {
													resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
													return
												}
											}

											if isFlagPassed(cmd.Flags(), "AccountMoid") {
												body.AccountMoid = &AccountMoid
											}

											if isFlagPassed(cmd.Flags(), "ClassId") {
												body.ClassId = ClassId
											}

											if isFlagPassed(cmd.Flags(), "DomainGroupMoid") {
												body.DomainGroupMoid = &DomainGroupMoid
											}

											if isFlagPassed(cmd.Flags(), "Moid") {
												body.Moid = &Moid
											}

											if isFlagPassed(cmd.Flags(), "ObjectType") {
												body.ObjectType = ObjectType
											}

											if isFlagPassed(cmd.Flags(), "Owners") {
												body.Owners = &Owners
											}

											if isFlagPassed(cmd.Flags(), "SharedScope") {
												body.SharedScope = &SharedScope
											}

											if isFlagPassed(cmd.Flags(), "VersionContext") && isMoRef(openapi.MoVersionContext{}) {
												if f, err := cmd.Flags().GetString("VersionContext"); err == nil {
													paramVal := openapi.MoVersionContext{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.VersionContext = &paramVal
														//                                if v, ok := v.(openapi.MoVersionContext); ok {
														//                                    body.VersionContext = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Parent") && isMoRef(openapi.MoBaseMoRelationship{}) {
												if f, err := cmd.Flags().GetString("Parent"); err == nil {
													paramVal := openapi.MoBaseMoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Parent = &paramVal
														//                                if v, ok := v.(openapi.MoBaseMoRelationship); ok {
														//                                    body.Parent = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Action") {
												body.Action = &Action
											}

											if isFlagPassed(cmd.Flags(), "InstId") {
												body.InstId = &InstId
											}

											if isFlagPassed(cmd.Flags(), "Internal") {
												body.Internal = &Internal
											}

											if isFlagPassed(cmd.Flags(), "LastAction") {
												body.LastAction = &LastAction
											}

											if isFlagPassed(cmd.Flags(), "Name") {
												body.Name = &Name
											}

											if isFlagPassed(cmd.Flags(), "Properties") && isMoRef(openapi.WorkflowWorkflowInfoProperties{}) {
												if f, err := cmd.Flags().GetString("Properties"); err == nil {
													paramVal := openapi.WorkflowWorkflowInfoProperties{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Properties = &paramVal
														//                                if v, ok := v.(openapi.WorkflowWorkflowInfoProperties); ok {
														//                                    body.Properties = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "RetryFromTaskName") {
												body.RetryFromTaskName = &RetryFromTaskName
											}

											if isFlagPassed(cmd.Flags(), "Src") {
												body.Src = &Src
											}

											if isFlagPassed(cmd.Flags(), "Status") {
												body.Status = &Status
											}

											if isFlagPassed(cmd.Flags(), "TraceId") {
												body.TraceId = &TraceId
											}

											if isFlagPassed(cmd.Flags(), "Type") {
												body.Type = &Type
											}

											if isFlagPassed(cmd.Flags(), "UserId") {
												body.UserId = &UserId
											}

											if isFlagPassed(cmd.Flags(), "WaitReason") {
												body.WaitReason = &WaitReason
											}

											if isFlagPassed(cmd.Flags(), "WorkflowMetaType") {
												body.WorkflowMetaType = &WorkflowMetaType
											}

											if isFlagPassed(cmd.Flags(), "Var0ClusterProfile") && isMoRef(openapi.HyperflexClusterProfileRelationship{}) {
												if f, err := cmd.Flags().GetString("Var0ClusterProfile"); err == nil {
													paramVal := openapi.HyperflexClusterProfileRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Var0ClusterProfile = &paramVal
														//                                if v, ok := v.(openapi.HyperflexClusterProfileRelationship); ok {
														//                                    body.Var0ClusterProfile = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Var1Profile") && isMoRef(openapi.ServerProfileRelationship{}) {
												if f, err := cmd.Flags().GetString("Var1Profile"); err == nil {
													paramVal := openapi.ServerProfileRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Var1Profile = &paramVal
														//                                if v, ok := v.(openapi.ServerProfileRelationship); ok {
														//                                    body.Var1Profile = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Account") && isMoRef(openapi.IamAccountRelationship{}) {
												if f, err := cmd.Flags().GetString("Account"); err == nil {
													paramVal := openapi.IamAccountRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Account = &paramVal
														//                                if v, ok := v.(openapi.IamAccountRelationship); ok {
														//                                    body.Account = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Organization") && isMoRef(openapi.OrganizationOrganizationRelationship{}) {
												if f, err := cmd.Flags().GetString("Organization"); err == nil {
													paramVal := openapi.OrganizationOrganizationRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Organization = &paramVal
														//                                if v, ok := v.(openapi.OrganizationOrganizationRelationship); ok {
														//                                    body.Organization = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "ParentTaskInfo") && isMoRef(openapi.WorkflowTaskInfoRelationship{}) {
												if f, err := cmd.Flags().GetString("ParentTaskInfo"); err == nil {
													paramVal := openapi.WorkflowTaskInfoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.ParentTaskInfo = &paramVal
														//                                if v, ok := v.(openapi.WorkflowTaskInfoRelationship); ok {
														//                                    body.ParentTaskInfo = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "PendingDynamicWorkflowInfo") && isMoRef(openapi.WorkflowPendingDynamicWorkflowInfoRelationship{}) {
												if f, err := cmd.Flags().GetString("PendingDynamicWorkflowInfo"); err == nil {
													paramVal := openapi.WorkflowPendingDynamicWorkflowInfoRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.PendingDynamicWorkflowInfo = &paramVal
														//                                if v, ok := v.(openapi.WorkflowPendingDynamicWorkflowInfoRelationship); ok {
														//                                    body.PendingDynamicWorkflowInfo = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "Permission") && isMoRef(openapi.IamPermissionRelationship{}) {
												if f, err := cmd.Flags().GetString("Permission"); err == nil {
													paramVal := openapi.IamPermissionRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.Permission = &paramVal
														//                                if v, ok := v.(openapi.IamPermissionRelationship); ok {
														//                                    body.Permission = &v
														//                                }
													}
												}
											}

											if isFlagPassed(cmd.Flags(), "WorkflowDefinition") && isMoRef(openapi.WorkflowWorkflowDefinitionRelationship{}) {
												if f, err := cmd.Flags().GetString("WorkflowDefinition"); err == nil {
													paramVal := openapi.WorkflowWorkflowDefinitionRelationship{}
													ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

													if ok {
														body.WorkflowDefinition = &paramVal
														//                                if v, ok := v.(openapi.WorkflowWorkflowDefinitionRelationship); ok {
														//                                    body.WorkflowDefinition = &v
														//                                }
													}
												}
											}

											req = req.WorkflowWorkflowInfo(*body)

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Create a 'workflow.WorkflowInfo' resource.",
										Long: `Create a 'workflow.WorkflowInfo' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Action, "Action", "", "Action")

									cmd.Flags().StringVar(&InstId, "InstId", "", "InstId")

									cmd.Flags().BoolVar(&Internal, "Internal", false, "Internal")

									cmd.Flags().StringVar(&LastAction, "LastAction", "", "LastAction")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Properties with unknown data type WorkflowWorkflowInfoProperties
									if isMoRef(openapi.WorkflowWorkflowInfoProperties{}) {
										cmd.Flags().String("Properties", "", "Properties")
									}

									cmd.Flags().StringVar(&RetryFromTaskName, "RetryFromTaskName", "", "RetryFromTaskName")

									cmd.Flags().StringVar(&Src, "Src", "", "Src")

									cmd.Flags().StringVar(&Status, "Status", "", "Status")

									cmd.Flags().StringVar(&TraceId, "TraceId", "", "TraceId")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									cmd.Flags().StringVar(&UserId, "UserId", "", "UserId")

									cmd.Flags().StringVar(&WaitReason, "WaitReason", "", "WaitReason")

									cmd.Flags().StringVar(&WorkflowMetaType, "WorkflowMetaType", "", "WorkflowMetaType")

									//Skipping var Var0ClusterProfile with unknown data type HyperflexClusterProfileRelationship
									if isMoRef(openapi.HyperflexClusterProfileRelationship{}) {
										cmd.Flags().String("Var0ClusterProfile", "", "Var0ClusterProfile")
									}

									//Skipping var Var1Profile with unknown data type ServerProfileRelationship
									if isMoRef(openapi.ServerProfileRelationship{}) {
										cmd.Flags().String("Var1Profile", "", "Var1Profile")
									}

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									//Skipping var ParentTaskInfo with unknown data type WorkflowTaskInfoRelationship
									if isMoRef(openapi.WorkflowTaskInfoRelationship{}) {
										cmd.Flags().String("ParentTaskInfo", "", "ParentTaskInfo")
									}

									//Skipping var PendingDynamicWorkflowInfo with unknown data type WorkflowPendingDynamicWorkflowInfoRelationship
									if isMoRef(openapi.WorkflowPendingDynamicWorkflowInfoRelationship{}) {
										cmd.Flags().String("PendingDynamicWorkflowInfo", "", "PendingDynamicWorkflowInfo")
									}

									//Skipping var Permission with unknown data type IamPermissionRelationship
									if isMoRef(openapi.IamPermissionRelationship{}) {
										cmd.Flags().String("Permission", "", "Permission")
									}

									//Skipping var WorkflowDefinition with unknown data type WorkflowWorkflowDefinitionRelationship
									if isMoRef(openapi.WorkflowWorkflowDefinitionRelationship{}) {
										cmd.Flags().String("WorkflowDefinition", "", "WorkflowDefinition")
									}

									return cmd
								}())

							return cmd
						}())

					return cmd
				}())

			cmd.AddCommand(
				func() *cobra.Command {

					cmd := &cobra.Command{
						Use: "delete",

						Short: "Delete resouce(s)",
						Long: `Delete resouce(s)
`,
					}

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "adapter",

								Short: "Delete Adapter resource(s)",
								Long: `Delete Adapter resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "configpolicy",

										Short: "Delete a 'adapter.ConfigPolicy' resource.",
										Long: `Delete a 'adapter.ConfigPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.AdapterApi.DeleteAdapterConfigPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "appliance",

								Short: "Delete Appliance resource(s)",
								Long: `Delete Appliance resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "backup",

										Short: "Delete a 'appliance.Backup' resource.",
										Long: `Delete a 'appliance.Backup' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.DeleteApplianceBackup(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "restore",

										Short: "Delete a 'appliance.Restore' resource.",
										Long: `Delete a 'appliance.Restore' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.DeleteApplianceRestore(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "asset",

								Short: "Delete Asset resource(s)",
								Long: `Delete Asset resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "deviceclaim",

										Short: "Delete a 'asset.DeviceClaim' resource.",
										Long: `Delete a 'asset.DeviceClaim' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.AssetApi.DeleteAssetDeviceClaim(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "deviceregistration",

										Short: "Deletes the resource representing the device connector. All associated REST resources will be deleted. In particular, inventory and operational data associated with this device will be deleted.",
										Long: `Deletes the resource representing the device connector. All associated REST resources will be deleted. In particular, inventory and operational data associated with this device will be deleted.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.AssetApi.DeleteAssetDeviceRegistration(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "manageddevice",

										Short: "Delete a 'asset.ManagedDevice' resource.",
										Long: `Delete a 'asset.ManagedDevice' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.AssetApi.DeleteAssetManagedDevice(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "bios",

								Short: "Delete Bios resource(s)",
								Long: `Delete Bios resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "policy",

										Short: "Delete a 'bios.Policy' resource.",
										Long: `Delete a 'bios.Policy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.BiosApi.DeleteBiosPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "boot",

								Short: "Delete Boot resource(s)",
								Long: `Delete Boot resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "precisionpolicy",

										Short: "Delete a 'boot.PrecisionPolicy' resource.",
										Long: `Delete a 'boot.PrecisionPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.BootApi.DeleteBootPrecisionPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "deviceconnector",

								Short: "Delete Deviceconnector resource(s)",
								Long: `Delete Deviceconnector resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "policy",

										Short: "Delete a 'deviceconnector.Policy' resource.",
										Long: `Delete a 'deviceconnector.Policy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.DeviceconnectorApi.DeleteDeviceconnectorPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "firmware",

								Short: "Delete Firmware resource(s)",
								Long: `Delete Firmware resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "distributable",

										Short: "Delete a 'firmware.Distributable' resource.",
										Long: `Delete a 'firmware.Distributable' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.FirmwareApi.DeleteFirmwareDistributable(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "driverdistributable",

										Short: "Delete a 'firmware.DriverDistributable' resource.",
										Long: `Delete a 'firmware.DriverDistributable' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.FirmwareApi.DeleteFirmwareDriverDistributable(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "serverconfigurationutilitydistributable",

										Short: "Delete a 'firmware.ServerConfigurationUtilityDistributable' resource.",
										Long: `Delete a 'firmware.ServerConfigurationUtilityDistributable' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.FirmwareApi.DeleteFirmwareServerConfigurationUtilityDistributable(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "upgrade",

										Short: "Delete a 'firmware.Upgrade' resource.",
										Long: `Delete a 'firmware.Upgrade' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.FirmwareApi.DeleteFirmwareUpgrade(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "hcl",

								Short: "Delete Hcl resource(s)",
								Long: `Delete Hcl resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "hyperflexsoftwarecompatibilityinfo",

										Short: "Delete a 'hcl.HyperflexSoftwareCompatibilityInfo' resource.",
										Long: `Delete a 'hcl.HyperflexSoftwareCompatibilityInfo' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HclApi.DeleteHclHyperflexSoftwareCompatibilityInfo(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "hyperflex",

								Short: "Delete Hyperflex resource(s)",
								Long: `Delete Hyperflex resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "appcatalog",

										Short: "Delete a 'hyperflex.AppCatalog' resource.",
										Long: `Delete a 'hyperflex.AppCatalog' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.DeleteHyperflexAppCatalog(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "autosupportpolicy",

										Short: "Delete a 'hyperflex.AutoSupportPolicy' resource.",
										Long: `Delete a 'hyperflex.AutoSupportPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.DeleteHyperflexAutoSupportPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "capabilityinfo",

										Short: "Delete a 'hyperflex.CapabilityInfo' resource.",
										Long: `Delete a 'hyperflex.CapabilityInfo' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.DeleteHyperflexCapabilityInfo(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "clusternetworkpolicy",

										Short: "Delete a 'hyperflex.ClusterNetworkPolicy' resource.",
										Long: `Delete a 'hyperflex.ClusterNetworkPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.DeleteHyperflexClusterNetworkPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "clusterprofile",

										Short: "Delete a 'hyperflex.ClusterProfile' resource.",
										Long: `Delete a 'hyperflex.ClusterProfile' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.DeleteHyperflexClusterProfile(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "clusterstoragepolicy",

										Short: "Delete a 'hyperflex.ClusterStoragePolicy' resource.",
										Long: `Delete a 'hyperflex.ClusterStoragePolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.DeleteHyperflexClusterStoragePolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "extfcstoragepolicy",

										Short: "Delete a 'hyperflex.ExtFcStoragePolicy' resource.",
										Long: `Delete a 'hyperflex.ExtFcStoragePolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.DeleteHyperflexExtFcStoragePolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "extiscsistoragepolicy",

										Short: "Delete a 'hyperflex.ExtIscsiStoragePolicy' resource.",
										Long: `Delete a 'hyperflex.ExtIscsiStoragePolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.DeleteHyperflexExtIscsiStoragePolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "featurelimitexternal",

										Short: "Delete a 'hyperflex.FeatureLimitExternal' resource.",
										Long: `Delete a 'hyperflex.FeatureLimitExternal' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.DeleteHyperflexFeatureLimitExternal(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "featurelimitinternal",

										Short: "Delete a 'hyperflex.FeatureLimitInternal' resource.",
										Long: `Delete a 'hyperflex.FeatureLimitInternal' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.DeleteHyperflexFeatureLimitInternal(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "hxdpversion",

										Short: "Delete a 'hyperflex.HxdpVersion' resource.",
										Long: `Delete a 'hyperflex.HxdpVersion' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.DeleteHyperflexHxdpVersion(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "localcredentialpolicy",

										Short: "Delete a 'hyperflex.LocalCredentialPolicy' resource.",
										Long: `Delete a 'hyperflex.LocalCredentialPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.DeleteHyperflexLocalCredentialPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "nodeconfigpolicy",

										Short: "Delete a 'hyperflex.NodeConfigPolicy' resource.",
										Long: `Delete a 'hyperflex.NodeConfigPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.DeleteHyperflexNodeConfigPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "nodeprofile",

										Short: "Delete a 'hyperflex.NodeProfile' resource.",
										Long: `Delete a 'hyperflex.NodeProfile' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.DeleteHyperflexNodeProfile(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "proxysettingpolicy",

										Short: "Delete a 'hyperflex.ProxySettingPolicy' resource.",
										Long: `Delete a 'hyperflex.ProxySettingPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.DeleteHyperflexProxySettingPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "serverfirmwareversion",

										Short: "Delete a 'hyperflex.ServerFirmwareVersion' resource.",
										Long: `Delete a 'hyperflex.ServerFirmwareVersion' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.DeleteHyperflexServerFirmwareVersion(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "servermodel",

										Short: "Delete a 'hyperflex.ServerModel' resource.",
										Long: `Delete a 'hyperflex.ServerModel' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.DeleteHyperflexServerModel(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "softwareversionpolicy",

										Short: "Delete a 'hyperflex.SoftwareVersionPolicy' resource.",
										Long: `Delete a 'hyperflex.SoftwareVersionPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.DeleteHyperflexSoftwareVersionPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "sysconfigpolicy",

										Short: "Delete a 'hyperflex.SysConfigPolicy' resource.",
										Long: `Delete a 'hyperflex.SysConfigPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.DeleteHyperflexSysConfigPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "ucsmconfigpolicy",

										Short: "Delete a 'hyperflex.UcsmConfigPolicy' resource.",
										Long: `Delete a 'hyperflex.UcsmConfigPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.DeleteHyperflexUcsmConfigPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "vcenterconfigpolicy",

										Short: "Delete a 'hyperflex.VcenterConfigPolicy' resource.",
										Long: `Delete a 'hyperflex.VcenterConfigPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.DeleteHyperflexVcenterConfigPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "iaas",

								Short: "Delete Iaas resource(s)",
								Long: `Delete Iaas resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "ucsdinfo",

										Short: "Delete a 'iaas.UcsdInfo' resource.",
										Long: `Delete a 'iaas.UcsdInfo' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IaasApi.DeleteIaasUcsdInfo(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "iam",

								Short: "Delete Iam resource(s)",
								Long: `Delete Iam resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "account",

										Short: "Delete a 'iam.Account' resource.",
										Long: `Delete a 'iam.Account' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.DeleteIamAccount(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "apikey",

										Short: "Delete a 'iam.ApiKey' resource.",
										Long: `Delete a 'iam.ApiKey' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.DeleteIamApiKey(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "appregistration",

										Short: "Delete a 'iam.AppRegistration' resource.",
										Long: `Delete a 'iam.AppRegistration' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.DeleteIamAppRegistration(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "certificate",

										Short: "Delete a 'iam.Certificate' resource.",
										Long: `Delete a 'iam.Certificate' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.DeleteIamCertificate(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "certificaterequest",

										Short: "Delete a 'iam.CertificateRequest' resource.",
										Long: `Delete a 'iam.CertificateRequest' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.DeleteIamCertificateRequest(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "endpointuser",

										Short: "Delete a 'iam.EndPointUser' resource.",
										Long: `Delete a 'iam.EndPointUser' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.DeleteIamEndPointUser(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "endpointuserpolicy",

										Short: "Delete a 'iam.EndPointUserPolicy' resource.",
										Long: `Delete a 'iam.EndPointUserPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.DeleteIamEndPointUserPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "endpointuserrole",

										Short: "Delete a 'iam.EndPointUserRole' resource.",
										Long: `Delete a 'iam.EndPointUserRole' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.DeleteIamEndPointUserRole(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "idp",

										Short: "Delete a 'iam.Idp' resource.",
										Long: `Delete a 'iam.Idp' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.DeleteIamIdp(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "ldapgroup",

										Short: "Delete a 'iam.LdapGroup' resource.",
										Long: `Delete a 'iam.LdapGroup' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.DeleteIamLdapGroup(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "ldappolicy",

										Short: "Delete a 'iam.LdapPolicy' resource.",
										Long: `Delete a 'iam.LdapPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.DeleteIamLdapPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "ldapprovider",

										Short: "Delete a 'iam.LdapProvider' resource.",
										Long: `Delete a 'iam.LdapProvider' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.DeleteIamLdapProvider(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "oauthtoken",

										Short: "Delete a 'iam.OAuthToken' resource.",
										Long: `Delete a 'iam.OAuthToken' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.DeleteIamOAuthToken(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "permission",

										Short: "Delete a 'iam.Permission' resource.",
										Long: `Delete a 'iam.Permission' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.DeleteIamPermission(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "privatekeyspec",

										Short: "Delete a 'iam.PrivateKeySpec' resource.",
										Long: `Delete a 'iam.PrivateKeySpec' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.DeleteIamPrivateKeySpec(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "qualifier",

										Short: "Delete a 'iam.Qualifier' resource.",
										Long: `Delete a 'iam.Qualifier' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.DeleteIamQualifier(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "resourceroles",

										Short: "Delete a 'iam.ResourceRoles' resource.",
										Long: `Delete a 'iam.ResourceRoles' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.DeleteIamResourceRoles(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "session",

										Short: "Delete a 'iam.Session' resource.",
										Long: `Delete a 'iam.Session' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.DeleteIamSession(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "sessionlimits",

										Short: "Delete a 'iam.SessionLimits' resource.",
										Long: `Delete a 'iam.SessionLimits' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.DeleteIamSessionLimits(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "trustpoint",

										Short: "Delete a 'iam.TrustPoint' resource.",
										Long: `Delete a 'iam.TrustPoint' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.DeleteIamTrustPoint(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "user",

										Short: "Delete a 'iam.User' resource.",
										Long: `Delete a 'iam.User' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.DeleteIamUser(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "usergroup",

										Short: "Delete a 'iam.UserGroup' resource.",
										Long: `Delete a 'iam.UserGroup' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.DeleteIamUserGroup(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "infra",

								Short: "Delete Infra resource(s)",
								Long: `Delete Infra resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "accountexperience",

										Short: "Delete a 'infra.AccountExperience' resource.",
										Long: `Delete a 'infra.AccountExperience' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.InfraApi.DeleteInfraAccountExperience(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "ipmioverlan",

								Short: "Delete Ipmioverlan resource(s)",
								Long: `Delete Ipmioverlan resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "policy",

										Short: "Delete a 'ipmioverlan.Policy' resource.",
										Long: `Delete a 'ipmioverlan.Policy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IpmioverlanApi.DeleteIpmioverlanPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "kvm",

								Short: "Delete Kvm resource(s)",
								Long: `Delete Kvm resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "policy",

										Short: "Delete a 'kvm.Policy' resource.",
										Long: `Delete a 'kvm.Policy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.KvmApi.DeleteKvmPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "memory",

								Short: "Delete Memory resource(s)",
								Long: `Delete Memory resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "persistentmemorypolicy",

										Short: "Delete a 'memory.PersistentMemoryPolicy' resource.",
										Long: `Delete a 'memory.PersistentMemoryPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.DeleteMemoryPersistentMemoryPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "meta",

								Short: "Delete Meta resource(s)",
								Long: `Delete Meta resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "definition",

										Short: "Delete a 'meta.Definition' resource.",
										Long: `Delete a 'meta.Definition' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MetaApi.DeleteMetaDefinition(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "networkconfig",

								Short: "Delete Networkconfig resource(s)",
								Long: `Delete Networkconfig resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "policy",

										Short: "Delete a 'networkconfig.Policy' resource.",
										Long: `Delete a 'networkconfig.Policy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NetworkconfigApi.DeleteNetworkconfigPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "ntp",

								Short: "Delete Ntp resource(s)",
								Long: `Delete Ntp resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "policy",

										Short: "Delete a 'ntp.Policy' resource.",
										Long: `Delete a 'ntp.Policy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NtpApi.DeleteNtpPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "organization",

								Short: "Delete Organization resource(s)",
								Long: `Delete Organization resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "organization",

										Short: "Delete a 'organization.Organization' resource.",
										Long: `Delete a 'organization.Organization' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.OrganizationApi.DeleteOrganizationOrganization(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "os",

								Short: "Delete Os resource(s)",
								Long: `Delete Os resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "configurationfile",

										Short: "Delete a 'os.ConfigurationFile' resource.",
										Long: `Delete a 'os.ConfigurationFile' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.OsApi.DeleteOsConfigurationFile(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "recovery",

								Short: "Delete Recovery resource(s)",
								Long: `Delete Recovery resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "backupconfigpolicy",

										Short: "Delete a 'recovery.BackupConfigPolicy' resource.",
										Long: `Delete a 'recovery.BackupConfigPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.RecoveryApi.DeleteRecoveryBackupConfigPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "backupprofile",

										Short: "Delete a 'recovery.BackupProfile' resource.",
										Long: `Delete a 'recovery.BackupProfile' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.RecoveryApi.DeleteRecoveryBackupProfile(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "ondemandbackup",

										Short: "Delete a 'recovery.OnDemandBackup' resource.",
										Long: `Delete a 'recovery.OnDemandBackup' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.RecoveryApi.DeleteRecoveryOnDemandBackup(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "restore",

										Short: "Delete a 'recovery.Restore' resource.",
										Long: `Delete a 'recovery.Restore' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.RecoveryApi.DeleteRecoveryRestore(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "scheduleconfigpolicy",

										Short: "Delete a 'recovery.ScheduleConfigPolicy' resource.",
										Long: `Delete a 'recovery.ScheduleConfigPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.RecoveryApi.DeleteRecoveryScheduleConfigPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "resource",

								Short: "Delete Resource resource(s)",
								Long: `Delete Resource resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "group",

										Short: "Delete a 'resource.Group' resource.",
										Long: `Delete a 'resource.Group' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ResourceApi.DeleteResourceGroup(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "sdcard",

								Short: "Delete Sdcard resource(s)",
								Long: `Delete Sdcard resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "policy",

										Short: "Delete a 'sdcard.Policy' resource.",
										Long: `Delete a 'sdcard.Policy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SdcardApi.DeleteSdcardPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "sdwan",

								Short: "Delete Sdwan resource(s)",
								Long: `Delete Sdwan resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "profile",

										Short: "Delete a 'sdwan.Profile' resource.",
										Long: `Delete a 'sdwan.Profile' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SdwanApi.DeleteSdwanProfile(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "routernode",

										Short: "Delete a 'sdwan.RouterNode' resource.",
										Long: `Delete a 'sdwan.RouterNode' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SdwanApi.DeleteSdwanRouterNode(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "routerpolicy",

										Short: "Delete a 'sdwan.RouterPolicy' resource.",
										Long: `Delete a 'sdwan.RouterPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SdwanApi.DeleteSdwanRouterPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "vmanageaccountpolicy",

										Short: "Delete a 'sdwan.VmanageAccountPolicy' resource.",
										Long: `Delete a 'sdwan.VmanageAccountPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SdwanApi.DeleteSdwanVmanageAccountPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "server",

								Short: "Delete Server resource(s)",
								Long: `Delete Server resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "profile",

										Short: "Delete a 'server.Profile' resource.",
										Long: `Delete a 'server.Profile' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ServerApi.DeleteServerProfile(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "smtp",

								Short: "Delete Smtp resource(s)",
								Long: `Delete Smtp resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "policy",

										Short: "Delete a 'smtp.Policy' resource.",
										Long: `Delete a 'smtp.Policy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SmtpApi.DeleteSmtpPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "snmp",

								Short: "Delete Snmp resource(s)",
								Long: `Delete Snmp resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "policy",

										Short: "Delete a 'snmp.Policy' resource.",
										Long: `Delete a 'snmp.Policy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SnmpApi.DeleteSnmpPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "software",

								Short: "Delete Software resource(s)",
								Long: `Delete Software resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "hclmeta",

										Short: "Delete a 'software.HclMeta' resource.",
										Long: `Delete a 'software.HclMeta' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SoftwareApi.DeleteSoftwareHclMeta(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "hyperflexdistributable",

										Short: "Delete a 'software.HyperflexDistributable' resource.",
										Long: `Delete a 'software.HyperflexDistributable' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SoftwareApi.DeleteSoftwareHyperflexDistributable(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "solutiondistributable",

										Short: "Delete a 'software.SolutionDistributable' resource.",
										Long: `Delete a 'software.SolutionDistributable' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SoftwareApi.DeleteSoftwareSolutionDistributable(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "softwarerepository",

								Short: "Delete Softwarerepository resource(s)",
								Long: `Delete Softwarerepository resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "operatingsystemfile",

										Short: "Delete a 'softwarerepository.OperatingSystemFile' resource.",
										Long: `Delete a 'softwarerepository.OperatingSystemFile' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SoftwarerepositoryApi.DeleteSoftwarerepositoryOperatingSystemFile(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "sol",

								Short: "Delete Sol resource(s)",
								Long: `Delete Sol resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "policy",

										Short: "Delete a 'sol.Policy' resource.",
										Long: `Delete a 'sol.Policy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SolApi.DeleteSolPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "ssh",

								Short: "Delete Ssh resource(s)",
								Long: `Delete Ssh resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "policy",

										Short: "Delete a 'ssh.Policy' resource.",
										Long: `Delete a 'ssh.Policy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SshApi.DeleteSshPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "storage",

								Short: "Delete Storage resource(s)",
								Long: `Delete Storage resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "diskgrouppolicy",

										Short: "Delete a 'storage.DiskGroupPolicy' resource.",
										Long: `Delete a 'storage.DiskGroupPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.DeleteStorageDiskGroupPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "storagepolicy",

										Short: "Delete a 'storage.StoragePolicy' resource.",
										Long: `Delete a 'storage.StoragePolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.DeleteStorageStoragePolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "syslog",

								Short: "Delete Syslog resource(s)",
								Long: `Delete Syslog resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "policy",

										Short: "Delete a 'syslog.Policy' resource.",
										Long: `Delete a 'syslog.Policy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SyslogApi.DeleteSyslogPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "tam",

								Short: "Delete Tam resource(s)",
								Long: `Delete Tam resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "advisorycount",

										Short: "Delete a 'tam.AdvisoryCount' resource.",
										Long: `Delete a 'tam.AdvisoryCount' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.TamApi.DeleteTamAdvisoryCount(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "advisoryinfo",

										Short: "Delete a 'tam.AdvisoryInfo' resource.",
										Long: `Delete a 'tam.AdvisoryInfo' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.TamApi.DeleteTamAdvisoryInfo(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "advisoryinstance",

										Short: "Delete a 'tam.AdvisoryInstance' resource.",
										Long: `Delete a 'tam.AdvisoryInstance' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.TamApi.DeleteTamAdvisoryInstance(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "securityadvisory",

										Short: "Delete a 'tam.SecurityAdvisory' resource.",
										Long: `Delete a 'tam.SecurityAdvisory' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.TamApi.DeleteTamSecurityAdvisory(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "ucsd",

								Short: "Delete Ucsd resource(s)",
								Long: `Delete Ucsd resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "backupinfo",

										Short: "Delete a 'ucsd.BackupInfo' resource.",
										Long: `Delete a 'ucsd.BackupInfo' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.UcsdApi.DeleteUcsdBackupInfo(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "vmedia",

								Short: "Delete Vmedia resource(s)",
								Long: `Delete Vmedia resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "policy",

										Short: "Delete a 'vmedia.Policy' resource.",
										Long: `Delete a 'vmedia.Policy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VmediaApi.DeleteVmediaPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "vnic",

								Short: "Delete Vnic resource(s)",
								Long: `Delete Vnic resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "ethadapterpolicy",

										Short: "Delete a 'vnic.EthAdapterPolicy' resource.",
										Long: `Delete a 'vnic.EthAdapterPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.DeleteVnicEthAdapterPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "ethif",

										Short: "Delete a 'vnic.EthIf' resource.",
										Long: `Delete a 'vnic.EthIf' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.DeleteVnicEthIf(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "ethnetworkpolicy",

										Short: "Delete a 'vnic.EthNetworkPolicy' resource.",
										Long: `Delete a 'vnic.EthNetworkPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.DeleteVnicEthNetworkPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "ethqospolicy",

										Short: "Delete a 'vnic.EthQosPolicy' resource.",
										Long: `Delete a 'vnic.EthQosPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.DeleteVnicEthQosPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "fcadapterpolicy",

										Short: "Delete a 'vnic.FcAdapterPolicy' resource.",
										Long: `Delete a 'vnic.FcAdapterPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.DeleteVnicFcAdapterPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "fcif",

										Short: "Delete a 'vnic.FcIf' resource.",
										Long: `Delete a 'vnic.FcIf' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.DeleteVnicFcIf(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "fcnetworkpolicy",

										Short: "Delete a 'vnic.FcNetworkPolicy' resource.",
										Long: `Delete a 'vnic.FcNetworkPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.DeleteVnicFcNetworkPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "fcqospolicy",

										Short: "Delete a 'vnic.FcQosPolicy' resource.",
										Long: `Delete a 'vnic.FcQosPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.DeleteVnicFcQosPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "lanconnectivitypolicy",

										Short: "Delete a 'vnic.LanConnectivityPolicy' resource.",
										Long: `Delete a 'vnic.LanConnectivityPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.DeleteVnicLanConnectivityPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "sanconnectivitypolicy",

										Short: "Delete a 'vnic.SanConnectivityPolicy' resource.",
										Long: `Delete a 'vnic.SanConnectivityPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.DeleteVnicSanConnectivityPolicy(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "workflow",

								Short: "Delete Workflow resource(s)",
								Long: `Delete Workflow resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "batchapiexecutor",

										Short: "Delete a 'workflow.BatchApiExecutor' resource.",
										Long: `Delete a 'workflow.BatchApiExecutor' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.DeleteWorkflowBatchApiExecutor(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "customdatatypedefinition",

										Short: "Delete a 'workflow.CustomDataTypeDefinition' resource.",
										Long: `Delete a 'workflow.CustomDataTypeDefinition' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.DeleteWorkflowCustomDataTypeDefinition(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "taskdefinition",

										Short: "Delete a 'workflow.TaskDefinition' resource.",
										Long: `Delete a 'workflow.TaskDefinition' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.DeleteWorkflowTaskDefinition(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "workflowdefinition",

										Short: "Delete a 'workflow.WorkflowDefinition' resource.",
										Long: `Delete a 'workflow.WorkflowDefinition' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.DeleteWorkflowWorkflowDefinition(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "workflowinfo",

										Short: "Delete a 'workflow.WorkflowInfo' resource.",
										Long: `Delete a 'workflow.WorkflowInfo' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.DeleteWorkflowWorkflowInfo(authCtx, args[0])

													httpResponse, err := req.Execute()
													resultHandler(nil, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					return cmd
				}())

			cmd.AddCommand(
				func() *cobra.Command {

					cmd := &cobra.Command{
						Use: "get",

						Short: "Get or list resouce(s)",
						Long: `Get or list resouce(s)
`,
					}

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "aaa",

								Short: "Get or list Aaa resource(s)",
								Long: `Get or list Aaa resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "auditrecord",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.AaaApi.GetAaaAuditRecordList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'aaa.AuditRecord' resource.",
										Long: `Read a 'aaa.AuditRecord' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.AaaApi.GetAaaAuditRecordByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "adapter",

								Short: "Get or list Adapter resource(s)",
								Long: `Get or list Adapter resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "configpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.AdapterApi.GetAdapterConfigPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'adapter.ConfigPolicy' resource.",
										Long: `Read a 'adapter.ConfigPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.AdapterApi.GetAdapterConfigPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "extethinterface",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.AdapterApi.GetAdapterExtEthInterfaceList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'adapter.ExtEthInterface' resource.",
										Long: `Read a 'adapter.ExtEthInterface' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.AdapterApi.GetAdapterExtEthInterfaceByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "hostethinterface",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.AdapterApi.GetAdapterHostEthInterfaceList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'adapter.HostEthInterface' resource.",
										Long: `Read a 'adapter.HostEthInterface' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.AdapterApi.GetAdapterHostEthInterfaceByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "hostfcinterface",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.AdapterApi.GetAdapterHostFcInterfaceList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'adapter.HostFcInterface' resource.",
										Long: `Read a 'adapter.HostFcInterface' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.AdapterApi.GetAdapterHostFcInterfaceByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "hostiscsiinterface",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.AdapterApi.GetAdapterHostIscsiInterfaceList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'adapter.HostIscsiInterface' resource.",
										Long: `Read a 'adapter.HostIscsiInterface' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.AdapterApi.GetAdapterHostIscsiInterfaceByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "unit",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.AdapterApi.GetAdapterUnitList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'adapter.Unit' resource.",
										Long: `Read a 'adapter.Unit' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.AdapterApi.GetAdapterUnitByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "appliance",

								Short: "Get or list Appliance resource(s)",
								Long: `Get or list Appliance resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "backup",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ApplianceApi.GetApplianceBackupList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'appliance.Backup' resource.",
										Long: `Read a 'appliance.Backup' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.GetApplianceBackupByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "backuppolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ApplianceApi.GetApplianceBackupPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'appliance.BackupPolicy' resource.",
										Long: `Read a 'appliance.BackupPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.GetApplianceBackupPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "certificatesetting",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ApplianceApi.GetApplianceCertificateSettingList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'appliance.CertificateSetting' resource.",
										Long: `Read a 'appliance.CertificateSetting' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.GetApplianceCertificateSettingByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "dataexportpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ApplianceApi.GetApplianceDataExportPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'appliance.DataExportPolicy' resource.",
										Long: `Read a 'appliance.DataExportPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.GetApplianceDataExportPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "deviceclaim",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ApplianceApi.GetApplianceDeviceClaimList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'appliance.DeviceClaim' resource.",
										Long: `Read a 'appliance.DeviceClaim' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.GetApplianceDeviceClaimByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "diagsetting",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ApplianceApi.GetApplianceDiagSettingList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'appliance.DiagSetting' resource.",
										Long: `Read a 'appliance.DiagSetting' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.GetApplianceDiagSettingByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "imagebundle",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ApplianceApi.GetApplianceImageBundleList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'appliance.ImageBundle' resource.",
										Long: `Read a 'appliance.ImageBundle' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.GetApplianceImageBundleByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "nodeinfo",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ApplianceApi.GetApplianceNodeInfoList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'appliance.NodeInfo' resource.",
										Long: `Read a 'appliance.NodeInfo' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.GetApplianceNodeInfoByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "releasenote",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ApplianceApi.GetApplianceReleaseNoteList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'appliance.ReleaseNote' resource.",
										Long: `Read a 'appliance.ReleaseNote' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.GetApplianceReleaseNoteByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "restore",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ApplianceApi.GetApplianceRestoreList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'appliance.Restore' resource.",
										Long: `Read a 'appliance.Restore' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.GetApplianceRestoreByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "setupinfo",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ApplianceApi.GetApplianceSetupInfoList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'appliance.SetupInfo' resource.",
										Long: `Read a 'appliance.SetupInfo' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.GetApplianceSetupInfoByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "systeminfo",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ApplianceApi.GetApplianceSystemInfoList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'appliance.SystemInfo' resource.",
										Long: `Read a 'appliance.SystemInfo' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.GetApplianceSystemInfoByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "upgrade",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ApplianceApi.GetApplianceUpgradeList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'appliance.Upgrade' resource.",
										Long: `Read a 'appliance.Upgrade' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.GetApplianceUpgradeByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "upgradepolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ApplianceApi.GetApplianceUpgradePolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'appliance.UpgradePolicy' resource.",
										Long: `Read a 'appliance.UpgradePolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.GetApplianceUpgradePolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "asset",

								Short: "Get or list Asset resource(s)",
								Long: `Get or list Asset resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "clustermember",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.AssetApi.GetAssetClusterMemberList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'asset.ClusterMember' resource.",
										Long: `Read a 'asset.ClusterMember' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.AssetApi.GetAssetClusterMemberByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "deviceconfiguration",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.AssetApi.GetAssetDeviceConfigurationList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'asset.DeviceConfiguration' resource.",
										Long: `Read a 'asset.DeviceConfiguration' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.AssetApi.GetAssetDeviceConfigurationByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "deviceconnectormanager",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.AssetApi.GetAssetDeviceConnectorManagerList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'asset.DeviceConnectorManager' resource.",
										Long: `Read a 'asset.DeviceConnectorManager' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.AssetApi.GetAssetDeviceConnectorManagerByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "devicecontractinformation",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.AssetApi.GetAssetDeviceContractInformationList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'asset.DeviceContractInformation' resource.",
										Long: `Read a 'asset.DeviceContractInformation' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.AssetApi.GetAssetDeviceContractInformationByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "deviceregistration",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.AssetApi.GetAssetDeviceRegistrationList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'asset.DeviceRegistration' resource.",
										Long: `Read a 'asset.DeviceRegistration' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.AssetApi.GetAssetDeviceRegistrationByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "manageddevice",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.AssetApi.GetAssetManagedDeviceList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'asset.ManagedDevice' resource.",
										Long: `Read a 'asset.ManagedDevice' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.AssetApi.GetAssetManagedDeviceByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "bios",

								Short: "Get or list Bios resource(s)",
								Long: `Get or list Bios resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "bootmode",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.BiosApi.GetBiosBootModeList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'bios.BootMode' resource.",
										Long: `Read a 'bios.BootMode' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.BiosApi.GetBiosBootModeByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "policy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.BiosApi.GetBiosPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'bios.Policy' resource.",
										Long: `Read a 'bios.Policy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.BiosApi.GetBiosPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "unit",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.BiosApi.GetBiosUnitList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'bios.Unit' resource.",
										Long: `Read a 'bios.Unit' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.BiosApi.GetBiosUnitByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "boot",

								Short: "Get or list Boot resource(s)",
								Long: `Get or list Boot resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "devicebootmode",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.BootApi.GetBootDeviceBootModeList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'boot.DeviceBootMode' resource.",
										Long: `Read a 'boot.DeviceBootMode' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.BootApi.GetBootDeviceBootModeByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "precisionpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.BootApi.GetBootPrecisionPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'boot.PrecisionPolicy' resource.",
										Long: `Read a 'boot.PrecisionPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.BootApi.GetBootPrecisionPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "compute",

								Short: "Get or list Compute resource(s)",
								Long: `Get or list Compute resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "blade",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ComputeApi.GetComputeBladeList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'compute.Blade' resource.",
										Long: `Read a 'compute.Blade' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ComputeApi.GetComputeBladeByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "board",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ComputeApi.GetComputeBoardList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'compute.Board' resource.",
										Long: `Read a 'compute.Board' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ComputeApi.GetComputeBoardByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "physicalsummary",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ComputeApi.GetComputePhysicalSummaryList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'compute.PhysicalSummary' resource.",
										Long: `Read a 'compute.PhysicalSummary' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ComputeApi.GetComputePhysicalSummaryByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "rackunit",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ComputeApi.GetComputeRackUnitList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'compute.RackUnit' resource.",
										Long: `Read a 'compute.RackUnit' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ComputeApi.GetComputeRackUnitByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "serversetting",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ComputeApi.GetComputeServerSettingList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'compute.ServerSetting' resource.",
										Long: `Read a 'compute.ServerSetting' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ComputeApi.GetComputeServerSettingByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "cond",

								Short: "Get or list Cond resource(s)",
								Long: `Get or list Cond resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "alarm",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.CondApi.GetCondAlarmList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'cond.Alarm' resource.",
										Long: `Read a 'cond.Alarm' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.CondApi.GetCondAlarmByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "hclstatus",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.CondApi.GetCondHclStatusList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'cond.HclStatus' resource.",
										Long: `Read a 'cond.HclStatus' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.CondApi.GetCondHclStatusByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "hclstatusdetail",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.CondApi.GetCondHclStatusDetailList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'cond.HclStatusDetail' resource.",
										Long: `Read a 'cond.HclStatusDetail' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.CondApi.GetCondHclStatusDetailByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "hclstatusjob",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.CondApi.GetCondHclStatusJobList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'cond.HclStatusJob' resource.",
										Long: `Read a 'cond.HclStatusJob' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.CondApi.GetCondHclStatusJobByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "deviceconnector",

								Short: "Get or list Deviceconnector resource(s)",
								Long: `Get or list Deviceconnector resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "policy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.DeviceconnectorApi.GetDeviceconnectorPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'deviceconnector.Policy' resource.",
										Long: `Read a 'deviceconnector.Policy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.DeviceconnectorApi.GetDeviceconnectorPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "equipment",

								Short: "Get or list Equipment resource(s)",
								Long: `Get or list Equipment resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "chassis",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.EquipmentApi.GetEquipmentChassisList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'equipment.Chassis' resource.",
										Long: `Read a 'equipment.Chassis' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.GetEquipmentChassisByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "devicesummary",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.EquipmentApi.GetEquipmentDeviceSummaryList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'equipment.DeviceSummary' resource.",
										Long: `Read a 'equipment.DeviceSummary' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.GetEquipmentDeviceSummaryByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "fan",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.EquipmentApi.GetEquipmentFanList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'equipment.Fan' resource.",
										Long: `Read a 'equipment.Fan' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.GetEquipmentFanByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "fanmodule",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.EquipmentApi.GetEquipmentFanModuleList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'equipment.FanModule' resource.",
										Long: `Read a 'equipment.FanModule' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.GetEquipmentFanModuleByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "fex",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.EquipmentApi.GetEquipmentFexList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'equipment.Fex' resource.",
										Long: `Read a 'equipment.Fex' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.GetEquipmentFexByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "iocard",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.EquipmentApi.GetEquipmentIoCardList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'equipment.IoCard' resource.",
										Long: `Read a 'equipment.IoCard' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.GetEquipmentIoCardByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "ioexpander",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.EquipmentApi.GetEquipmentIoExpanderList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'equipment.IoExpander' resource.",
										Long: `Read a 'equipment.IoExpander' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.GetEquipmentIoExpanderByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "locatorled",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.EquipmentApi.GetEquipmentLocatorLedList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'equipment.LocatorLed' resource.",
										Long: `Read a 'equipment.LocatorLed' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.GetEquipmentLocatorLedByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "psu",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.EquipmentApi.GetEquipmentPsuList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'equipment.Psu' resource.",
										Long: `Read a 'equipment.Psu' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.GetEquipmentPsuByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "rackenclosure",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.EquipmentApi.GetEquipmentRackEnclosureList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'equipment.RackEnclosure' resource.",
										Long: `Read a 'equipment.RackEnclosure' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.GetEquipmentRackEnclosureByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "rackenclosureslot",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.EquipmentApi.GetEquipmentRackEnclosureSlotList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'equipment.RackEnclosureSlot' resource.",
										Long: `Read a 'equipment.RackEnclosureSlot' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.GetEquipmentRackEnclosureSlotByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "sharediomodule",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.EquipmentApi.GetEquipmentSharedIoModuleList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'equipment.SharedIoModule' resource.",
										Long: `Read a 'equipment.SharedIoModule' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.GetEquipmentSharedIoModuleByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "switchcard",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.EquipmentApi.GetEquipmentSwitchCardList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'equipment.SwitchCard' resource.",
										Long: `Read a 'equipment.SwitchCard' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.GetEquipmentSwitchCardByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "systemiocontroller",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.EquipmentApi.GetEquipmentSystemIoControllerList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'equipment.SystemIoController' resource.",
										Long: `Read a 'equipment.SystemIoController' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.GetEquipmentSystemIoControllerByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "tpm",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.EquipmentApi.GetEquipmentTpmList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'equipment.Tpm' resource.",
										Long: `Read a 'equipment.Tpm' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.GetEquipmentTpmByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "ether",

								Short: "Get or list Ether resource(s)",
								Long: `Get or list Ether resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "physicalport",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.EtherApi.GetEtherPhysicalPortList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'ether.PhysicalPort' resource.",
										Long: `Read a 'ether.PhysicalPort' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EtherApi.GetEtherPhysicalPortByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "externalsite",

								Short: "Get or list Externalsite resource(s)",
								Long: `Get or list Externalsite resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "authorization",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ExternalsiteApi.GetExternalsiteAuthorizationList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'externalsite.Authorization' resource.",
										Long: `Read a 'externalsite.Authorization' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ExternalsiteApi.GetExternalsiteAuthorizationByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "fault",

								Short: "Get or list Fault resource(s)",
								Long: `Get or list Fault resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "instance",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.FaultApi.GetFaultInstanceList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'fault.Instance' resource.",
										Long: `Read a 'fault.Instance' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.FaultApi.GetFaultInstanceByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "fc",

								Short: "Get or list Fc resource(s)",
								Long: `Get or list Fc resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "physicalport",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.FcApi.GetFcPhysicalPortList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'fc.PhysicalPort' resource.",
										Long: `Read a 'fc.PhysicalPort' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.FcApi.GetFcPhysicalPortByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "firmware",

								Short: "Get or list Firmware resource(s)",
								Long: `Get or list Firmware resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "distributable",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.FirmwareApi.GetFirmwareDistributableList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'firmware.Distributable' resource.",
										Long: `Read a 'firmware.Distributable' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.FirmwareApi.GetFirmwareDistributableByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "driverdistributable",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.FirmwareApi.GetFirmwareDriverDistributableList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'firmware.DriverDistributable' resource.",
										Long: `Read a 'firmware.DriverDistributable' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.FirmwareApi.GetFirmwareDriverDistributableByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "eula",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.FirmwareApi.GetFirmwareEulaList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'firmware.Eula' resource.",
										Long: `Read a 'firmware.Eula' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.FirmwareApi.GetFirmwareEulaByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "runningfirmware",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.FirmwareApi.GetFirmwareRunningFirmwareList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'firmware.RunningFirmware' resource.",
										Long: `Read a 'firmware.RunningFirmware' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.FirmwareApi.GetFirmwareRunningFirmwareByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "serverconfigurationutilitydistributable",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.FirmwareApi.GetFirmwareServerConfigurationUtilityDistributableList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'firmware.ServerConfigurationUtilityDistributable' resource.",
										Long: `Read a 'firmware.ServerConfigurationUtilityDistributable' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.FirmwareApi.GetFirmwareServerConfigurationUtilityDistributableByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "upgrade",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.FirmwareApi.GetFirmwareUpgradeList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'firmware.Upgrade' resource.",
										Long: `Read a 'firmware.Upgrade' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.FirmwareApi.GetFirmwareUpgradeByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "upgradestatus",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.FirmwareApi.GetFirmwareUpgradeStatusList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'firmware.UpgradeStatus' resource.",
										Long: `Read a 'firmware.UpgradeStatus' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.FirmwareApi.GetFirmwareUpgradeStatusByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "forecast",

								Short: "Get or list Forecast resource(s)",
								Long: `Get or list Forecast resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "catalog",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ForecastApi.GetForecastCatalogList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'forecast.Catalog' resource.",
										Long: `Read a 'forecast.Catalog' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ForecastApi.GetForecastCatalogByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "definition",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ForecastApi.GetForecastDefinitionList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'forecast.Definition' resource.",
										Long: `Read a 'forecast.Definition' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ForecastApi.GetForecastDefinitionByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "instance",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ForecastApi.GetForecastInstanceList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'forecast.Instance' resource.",
										Long: `Read a 'forecast.Instance' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ForecastApi.GetForecastInstanceByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "graphics",

								Short: "Get or list Graphics resource(s)",
								Long: `Get or list Graphics resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "card",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.GraphicsApi.GetGraphicsCardList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'graphics.Card' resource.",
										Long: `Read a 'graphics.Card' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.GraphicsApi.GetGraphicsCardByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "controller",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.GraphicsApi.GetGraphicsControllerList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'graphics.Controller' resource.",
										Long: `Read a 'graphics.Controller' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.GraphicsApi.GetGraphicsControllerByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "hcl",

								Short: "Get or list Hcl resource(s)",
								Long: `Get or list Hcl resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "driverimage",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HclApi.GetHclDriverImageList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hcl.DriverImage' resource.",
										Long: `Read a 'hcl.DriverImage' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HclApi.GetHclDriverImageByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "exemptedcatalog",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HclApi.GetHclExemptedCatalogList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hcl.ExemptedCatalog' resource.",
										Long: `Read a 'hcl.ExemptedCatalog' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HclApi.GetHclExemptedCatalogByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "hyperflexsoftwarecompatibilityinfo",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HclApi.GetHclHyperflexSoftwareCompatibilityInfoList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hcl.HyperflexSoftwareCompatibilityInfo' resource.",
										Long: `Read a 'hcl.HyperflexSoftwareCompatibilityInfo' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HclApi.GetHclHyperflexSoftwareCompatibilityInfoByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "operatingsystem",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HclApi.GetHclOperatingSystemList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hcl.OperatingSystem' resource.",
										Long: `Read a 'hcl.OperatingSystem' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HclApi.GetHclOperatingSystemByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "operatingsystemvendor",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HclApi.GetHclOperatingSystemVendorList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hcl.OperatingSystemVendor' resource.",
										Long: `Read a 'hcl.OperatingSystemVendor' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HclApi.GetHclOperatingSystemVendorByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "servicestatus",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HclApi.GetHclServiceStatusList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hcl.ServiceStatus' resource.",
										Long: `Read a 'hcl.ServiceStatus' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HclApi.GetHclServiceStatusByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "hyperflex",

								Short: "Get or list Hyperflex resource(s)",
								Long: `Get or list Hyperflex resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "alarm",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.GetHyperflexAlarmList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hyperflex.Alarm' resource.",
										Long: `Read a 'hyperflex.Alarm' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.GetHyperflexAlarmByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "appcatalog",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.GetHyperflexAppCatalogList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hyperflex.AppCatalog' resource.",
										Long: `Read a 'hyperflex.AppCatalog' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.GetHyperflexAppCatalogByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "autosupportpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.GetHyperflexAutoSupportPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hyperflex.AutoSupportPolicy' resource.",
										Long: `Read a 'hyperflex.AutoSupportPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.GetHyperflexAutoSupportPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "capabilityinfo",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.GetHyperflexCapabilityInfoList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hyperflex.CapabilityInfo' resource.",
										Long: `Read a 'hyperflex.CapabilityInfo' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.GetHyperflexCapabilityInfoByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "cluster",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.GetHyperflexClusterList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hyperflex.Cluster' resource.",
										Long: `Read a 'hyperflex.Cluster' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.GetHyperflexClusterByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "clusternetworkpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.GetHyperflexClusterNetworkPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hyperflex.ClusterNetworkPolicy' resource.",
										Long: `Read a 'hyperflex.ClusterNetworkPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.GetHyperflexClusterNetworkPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "clusterprofile",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.GetHyperflexClusterProfileList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hyperflex.ClusterProfile' resource.",
										Long: `Read a 'hyperflex.ClusterProfile' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.GetHyperflexClusterProfileByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "clusterstoragepolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.GetHyperflexClusterStoragePolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hyperflex.ClusterStoragePolicy' resource.",
										Long: `Read a 'hyperflex.ClusterStoragePolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.GetHyperflexClusterStoragePolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "configresult",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.GetHyperflexConfigResultList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hyperflex.ConfigResult' resource.",
										Long: `Read a 'hyperflex.ConfigResult' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.GetHyperflexConfigResultByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "configresultentry",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.GetHyperflexConfigResultEntryList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hyperflex.ConfigResultEntry' resource.",
										Long: `Read a 'hyperflex.ConfigResultEntry' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.GetHyperflexConfigResultEntryByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "extfcstoragepolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.GetHyperflexExtFcStoragePolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hyperflex.ExtFcStoragePolicy' resource.",
										Long: `Read a 'hyperflex.ExtFcStoragePolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.GetHyperflexExtFcStoragePolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "extiscsistoragepolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.GetHyperflexExtIscsiStoragePolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hyperflex.ExtIscsiStoragePolicy' resource.",
										Long: `Read a 'hyperflex.ExtIscsiStoragePolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.GetHyperflexExtIscsiStoragePolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "featurelimitexternal",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.GetHyperflexFeatureLimitExternalList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hyperflex.FeatureLimitExternal' resource.",
										Long: `Read a 'hyperflex.FeatureLimitExternal' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.GetHyperflexFeatureLimitExternalByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "featurelimitinternal",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.GetHyperflexFeatureLimitInternalList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hyperflex.FeatureLimitInternal' resource.",
										Long: `Read a 'hyperflex.FeatureLimitInternal' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.GetHyperflexFeatureLimitInternalByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "health",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.GetHyperflexHealthList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hyperflex.Health' resource.",
										Long: `Read a 'hyperflex.Health' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.GetHyperflexHealthByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "hxdpversion",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.GetHyperflexHxdpVersionList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hyperflex.HxdpVersion' resource.",
										Long: `Read a 'hyperflex.HxdpVersion' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.GetHyperflexHxdpVersionByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "localcredentialpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.GetHyperflexLocalCredentialPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hyperflex.LocalCredentialPolicy' resource.",
										Long: `Read a 'hyperflex.LocalCredentialPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.GetHyperflexLocalCredentialPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "node",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.GetHyperflexNodeList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hyperflex.Node' resource.",
										Long: `Read a 'hyperflex.Node' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.GetHyperflexNodeByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "nodeconfigpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.GetHyperflexNodeConfigPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hyperflex.NodeConfigPolicy' resource.",
										Long: `Read a 'hyperflex.NodeConfigPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.GetHyperflexNodeConfigPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "nodeprofile",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.GetHyperflexNodeProfileList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hyperflex.NodeProfile' resource.",
										Long: `Read a 'hyperflex.NodeProfile' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.GetHyperflexNodeProfileByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "proxysettingpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.GetHyperflexProxySettingPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hyperflex.ProxySettingPolicy' resource.",
										Long: `Read a 'hyperflex.ProxySettingPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.GetHyperflexProxySettingPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "serverfirmwareversion",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.GetHyperflexServerFirmwareVersionList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hyperflex.ServerFirmwareVersion' resource.",
										Long: `Read a 'hyperflex.ServerFirmwareVersion' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.GetHyperflexServerFirmwareVersionByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "servermodel",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.GetHyperflexServerModelList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hyperflex.ServerModel' resource.",
										Long: `Read a 'hyperflex.ServerModel' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.GetHyperflexServerModelByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "softwareversionpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.GetHyperflexSoftwareVersionPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hyperflex.SoftwareVersionPolicy' resource.",
										Long: `Read a 'hyperflex.SoftwareVersionPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.GetHyperflexSoftwareVersionPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "sysconfigpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.GetHyperflexSysConfigPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hyperflex.SysConfigPolicy' resource.",
										Long: `Read a 'hyperflex.SysConfigPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.GetHyperflexSysConfigPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "ucsmconfigpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.GetHyperflexUcsmConfigPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hyperflex.UcsmConfigPolicy' resource.",
										Long: `Read a 'hyperflex.UcsmConfigPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.GetHyperflexUcsmConfigPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "vcenterconfigpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.HyperflexApi.GetHyperflexVcenterConfigPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'hyperflex.VcenterConfigPolicy' resource.",
										Long: `Read a 'hyperflex.VcenterConfigPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.GetHyperflexVcenterConfigPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "iaas",

								Short: "Get or list Iaas resource(s)",
								Long: `Get or list Iaas resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "connectorpack",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IaasApi.GetIaasConnectorPackList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iaas.ConnectorPack' resource.",
										Long: `Read a 'iaas.ConnectorPack' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IaasApi.GetIaasConnectorPackByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "devicestatus",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IaasApi.GetIaasDeviceStatusList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iaas.DeviceStatus' resource.",
										Long: `Read a 'iaas.DeviceStatus' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IaasApi.GetIaasDeviceStatusByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "licenseinfo",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IaasApi.GetIaasLicenseInfoList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iaas.LicenseInfo' resource.",
										Long: `Read a 'iaas.LicenseInfo' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IaasApi.GetIaasLicenseInfoByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "mostruntasks",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IaasApi.GetIaasMostRunTasksList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iaas.MostRunTasks' resource.",
										Long: `Read a 'iaas.MostRunTasks' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IaasApi.GetIaasMostRunTasksByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "ucsdinfo",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IaasApi.GetIaasUcsdInfoList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iaas.UcsdInfo' resource.",
										Long: `Read a 'iaas.UcsdInfo' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IaasApi.GetIaasUcsdInfoByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "ucsdmanagedinfra",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IaasApi.GetIaasUcsdManagedInfraList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iaas.UcsdManagedInfra' resource.",
										Long: `Read a 'iaas.UcsdManagedInfra' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IaasApi.GetIaasUcsdManagedInfraByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "iam",

								Short: "Get or list Iam resource(s)",
								Long: `Get or list Iam resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "account",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamAccountList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.Account' resource.",
										Long: `Read a 'iam.Account' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamAccountByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "apikey",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamApiKeyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.ApiKey' resource.",
										Long: `Read a 'iam.ApiKey' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamApiKeyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "appregistration",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamAppRegistrationList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.AppRegistration' resource.",
										Long: `Read a 'iam.AppRegistration' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamAppRegistrationByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "certificate",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamCertificateList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.Certificate' resource.",
										Long: `Read a 'iam.Certificate' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamCertificateByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "certificaterequest",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamCertificateRequestList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.CertificateRequest' resource.",
										Long: `Read a 'iam.CertificateRequest' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamCertificateRequestByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "domaingroup",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamDomainGroupList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.DomainGroup' resource.",
										Long: `Read a 'iam.DomainGroup' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamDomainGroupByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "endpointprivilege",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamEndPointPrivilegeList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.EndPointPrivilege' resource.",
										Long: `Read a 'iam.EndPointPrivilege' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamEndPointPrivilegeByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "endpointrole",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamEndPointRoleList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.EndPointRole' resource.",
										Long: `Read a 'iam.EndPointRole' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamEndPointRoleByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "endpointuser",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamEndPointUserList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.EndPointUser' resource.",
										Long: `Read a 'iam.EndPointUser' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamEndPointUserByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "endpointuserpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamEndPointUserPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.EndPointUserPolicy' resource.",
										Long: `Read a 'iam.EndPointUserPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamEndPointUserPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "endpointuserrole",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamEndPointUserRoleList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.EndPointUserRole' resource.",
										Long: `Read a 'iam.EndPointUserRole' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamEndPointUserRoleByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "idp",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamIdpList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.Idp' resource.",
										Long: `Read a 'iam.Idp' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamIdpByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "idpreference",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamIdpReferenceList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.IdpReference' resource.",
										Long: `Read a 'iam.IdpReference' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamIdpReferenceByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "ldapgroup",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamLdapGroupList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.LdapGroup' resource.",
										Long: `Read a 'iam.LdapGroup' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamLdapGroupByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "ldappolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamLdapPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.LdapPolicy' resource.",
										Long: `Read a 'iam.LdapPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamLdapPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "ldapprovider",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamLdapProviderList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.LdapProvider' resource.",
										Long: `Read a 'iam.LdapProvider' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamLdapProviderByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "oauthtoken",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamOAuthTokenList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.OAuthToken' resource.",
										Long: `Read a 'iam.OAuthToken' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamOAuthTokenByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "permission",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamPermissionList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.Permission' resource.",
										Long: `Read a 'iam.Permission' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamPermissionByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "privatekeyspec",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamPrivateKeySpecList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.PrivateKeySpec' resource.",
										Long: `Read a 'iam.PrivateKeySpec' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamPrivateKeySpecByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "privilege",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamPrivilegeList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.Privilege' resource.",
										Long: `Read a 'iam.Privilege' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamPrivilegeByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "privilegeset",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamPrivilegeSetList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.PrivilegeSet' resource.",
										Long: `Read a 'iam.PrivilegeSet' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamPrivilegeSetByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "qualifier",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamQualifierList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.Qualifier' resource.",
										Long: `Read a 'iam.Qualifier' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamQualifierByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "resourcelimits",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamResourceLimitsList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.ResourceLimits' resource.",
										Long: `Read a 'iam.ResourceLimits' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamResourceLimitsByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "resourcepermission",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamResourcePermissionList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.ResourcePermission' resource.",
										Long: `Read a 'iam.ResourcePermission' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamResourcePermissionByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "resourceroles",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamResourceRolesList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.ResourceRoles' resource.",
										Long: `Read a 'iam.ResourceRoles' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamResourceRolesByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "role",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamRoleList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.Role' resource.",
										Long: `Read a 'iam.Role' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamRoleByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "securityholder",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamSecurityHolderList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.SecurityHolder' resource.",
										Long: `Read a 'iam.SecurityHolder' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamSecurityHolderByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "serviceprovider",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamServiceProviderList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.ServiceProvider' resource.",
										Long: `Read a 'iam.ServiceProvider' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamServiceProviderByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "session",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamSessionList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.Session' resource.",
										Long: `Read a 'iam.Session' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamSessionByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "sessionlimits",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamSessionLimitsList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.SessionLimits' resource.",
										Long: `Read a 'iam.SessionLimits' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamSessionLimitsByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "system",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamSystemList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.System' resource.",
										Long: `Read a 'iam.System' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamSystemByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "trustpoint",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamTrustPointList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.TrustPoint' resource.",
										Long: `Read a 'iam.TrustPoint' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamTrustPointByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "user",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamUserList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.User' resource.",
										Long: `Read a 'iam.User' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamUserByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "usergroup",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamUserGroupList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.UserGroup' resource.",
										Long: `Read a 'iam.UserGroup' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamUserGroupByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "userpreference",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IamApi.GetIamUserPreferenceList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'iam.UserPreference' resource.",
										Long: `Read a 'iam.UserPreference' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.GetIamUserPreferenceByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "infra",

								Short: "Get or list Infra resource(s)",
								Long: `Get or list Infra resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "accountexperience",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.InfraApi.GetInfraAccountExperienceList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'infra.AccountExperience' resource.",
										Long: `Read a 'infra.AccountExperience' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.InfraApi.GetInfraAccountExperienceByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "inventory",

								Short: "Get or list Inventory resource(s)",
								Long: `Get or list Inventory resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "deviceinfo",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.InventoryApi.GetInventoryDeviceInfoList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'inventory.DeviceInfo' resource.",
										Long: `Read a 'inventory.DeviceInfo' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.InventoryApi.GetInventoryDeviceInfoByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "dnmobinding",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.InventoryApi.GetInventoryDnMoBindingList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'inventory.DnMoBinding' resource.",
										Long: `Read a 'inventory.DnMoBinding' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.InventoryApi.GetInventoryDnMoBindingByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "genericinventory",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.InventoryApi.GetInventoryGenericInventoryList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'inventory.GenericInventory' resource.",
										Long: `Read a 'inventory.GenericInventory' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.InventoryApi.GetInventoryGenericInventoryByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "genericinventoryholder",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.InventoryApi.GetInventoryGenericInventoryHolderList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'inventory.GenericInventoryHolder' resource.",
										Long: `Read a 'inventory.GenericInventoryHolder' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.InventoryApi.GetInventoryGenericInventoryHolderByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "ipmioverlan",

								Short: "Get or list Ipmioverlan resource(s)",
								Long: `Get or list Ipmioverlan resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "policy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.IpmioverlanApi.GetIpmioverlanPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'ipmioverlan.Policy' resource.",
										Long: `Read a 'ipmioverlan.Policy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IpmioverlanApi.GetIpmioverlanPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "kvm",

								Short: "Get or list Kvm resource(s)",
								Long: `Get or list Kvm resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "kvmsession",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.KvmApi.GetKvmKvmSessionList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'kvm.KvmSession' resource.",
										Long: `Read a 'kvm.KvmSession' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.KvmApi.GetKvmKvmSessionByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "policy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.KvmApi.GetKvmPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'kvm.Policy' resource.",
										Long: `Read a 'kvm.Policy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.KvmApi.GetKvmPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "license",

								Short: "Get or list License resource(s)",
								Long: `Get or list License resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "accountlicensedata",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.LicenseApi.GetLicenseAccountLicenseDataList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'license.AccountLicenseData' resource.",
										Long: `Read a 'license.AccountLicenseData' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.LicenseApi.GetLicenseAccountLicenseDataByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "customerop",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.LicenseApi.GetLicenseCustomerOpList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'license.CustomerOp' resource.",
										Long: `Read a 'license.CustomerOp' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.LicenseApi.GetLicenseCustomerOpByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "licenseinfo",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.LicenseApi.GetLicenseLicenseInfoList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'license.LicenseInfo' resource.",
										Long: `Read a 'license.LicenseInfo' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.LicenseApi.GetLicenseLicenseInfoByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "smartlicensetoken",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.LicenseApi.GetLicenseSmartlicenseTokenList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'license.SmartlicenseToken' resource.",
										Long: `Read a 'license.SmartlicenseToken' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.LicenseApi.GetLicenseSmartlicenseTokenByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "ls",

								Short: "Get or list Ls resource(s)",
								Long: `Get or list Ls resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "serviceprofile",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.LsApi.GetLsServiceProfileList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'ls.ServiceProfile' resource.",
										Long: `Read a 'ls.ServiceProfile' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.LsApi.GetLsServiceProfileByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "management",

								Short: "Get or list Management resource(s)",
								Long: `Get or list Management resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "controller",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ManagementApi.GetManagementControllerList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'management.Controller' resource.",
										Long: `Read a 'management.Controller' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ManagementApi.GetManagementControllerByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "entity",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ManagementApi.GetManagementEntityList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'management.Entity' resource.",
										Long: `Read a 'management.Entity' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ManagementApi.GetManagementEntityByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "interface",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ManagementApi.GetManagementInterfaceList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'management.Interface' resource.",
										Long: `Read a 'management.Interface' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ManagementApi.GetManagementInterfaceByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "memory",

								Short: "Get or list Memory resource(s)",
								Long: `Get or list Memory resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "array",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.MemoryApi.GetMemoryArrayList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'memory.Array' resource.",
										Long: `Read a 'memory.Array' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.GetMemoryArrayByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "persistentmemoryconfigresult",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.MemoryApi.GetMemoryPersistentMemoryConfigResultList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'memory.PersistentMemoryConfigResult' resource.",
										Long: `Read a 'memory.PersistentMemoryConfigResult' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.GetMemoryPersistentMemoryConfigResultByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "persistentmemoryconfiguration",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.MemoryApi.GetMemoryPersistentMemoryConfigurationList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'memory.PersistentMemoryConfiguration' resource.",
										Long: `Read a 'memory.PersistentMemoryConfiguration' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.GetMemoryPersistentMemoryConfigurationByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "persistentmemorynamespace",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.MemoryApi.GetMemoryPersistentMemoryNamespaceList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'memory.PersistentMemoryNamespace' resource.",
										Long: `Read a 'memory.PersistentMemoryNamespace' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.GetMemoryPersistentMemoryNamespaceByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "persistentmemorynamespaceconfigresult",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.MemoryApi.GetMemoryPersistentMemoryNamespaceConfigResultList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'memory.PersistentMemoryNamespaceConfigResult' resource.",
										Long: `Read a 'memory.PersistentMemoryNamespaceConfigResult' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.GetMemoryPersistentMemoryNamespaceConfigResultByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "persistentmemorypolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.MemoryApi.GetMemoryPersistentMemoryPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'memory.PersistentMemoryPolicy' resource.",
										Long: `Read a 'memory.PersistentMemoryPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.GetMemoryPersistentMemoryPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "persistentmemoryregion",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.MemoryApi.GetMemoryPersistentMemoryRegionList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'memory.PersistentMemoryRegion' resource.",
										Long: `Read a 'memory.PersistentMemoryRegion' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.GetMemoryPersistentMemoryRegionByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "persistentmemoryunit",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.MemoryApi.GetMemoryPersistentMemoryUnitList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'memory.PersistentMemoryUnit' resource.",
										Long: `Read a 'memory.PersistentMemoryUnit' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.GetMemoryPersistentMemoryUnitByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "unit",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.MemoryApi.GetMemoryUnitList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'memory.Unit' resource.",
										Long: `Read a 'memory.Unit' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.GetMemoryUnitByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "meta",

								Short: "Get or list Meta resource(s)",
								Long: `Get or list Meta resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "definition",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.MetaApi.GetMetaDefinitionList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'meta.Definition' resource.",
										Long: `Read a 'meta.Definition' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MetaApi.GetMetaDefinitionByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "network",

								Short: "Get or list Network resource(s)",
								Long: `Get or list Network resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "element",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.NetworkApi.GetNetworkElementList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'network.Element' resource.",
										Long: `Read a 'network.Element' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NetworkApi.GetNetworkElementByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "elementsummary",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.NetworkApi.GetNetworkElementSummaryList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'network.ElementSummary' resource.",
										Long: `Read a 'network.ElementSummary' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NetworkApi.GetNetworkElementSummaryByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "networkconfig",

								Short: "Get or list Networkconfig resource(s)",
								Long: `Get or list Networkconfig resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "policy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.NetworkconfigApi.GetNetworkconfigPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'networkconfig.Policy' resource.",
										Long: `Read a 'networkconfig.Policy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NetworkconfigApi.GetNetworkconfigPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "niaapi",

								Short: "Get or list Niaapi resource(s)",
								Long: `Get or list Niaapi resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "apicccopost",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.NiaapiApi.GetNiaapiApicCcoPostList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'niaapi.ApicCcoPost' resource.",
										Long: `Read a 'niaapi.ApicCcoPost' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NiaapiApi.GetNiaapiApicCcoPostByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "apicfieldnotice",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.NiaapiApi.GetNiaapiApicFieldNoticeList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'niaapi.ApicFieldNotice' resource.",
										Long: `Read a 'niaapi.ApicFieldNotice' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NiaapiApi.GetNiaapiApicFieldNoticeByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "apichweol",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.NiaapiApi.GetNiaapiApicHweolList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'niaapi.ApicHweol' resource.",
										Long: `Read a 'niaapi.ApicHweol' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NiaapiApi.GetNiaapiApicHweolByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "apiclatestmaintainedrelease",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.NiaapiApi.GetNiaapiApicLatestMaintainedReleaseList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'niaapi.ApicLatestMaintainedRelease' resource.",
										Long: `Read a 'niaapi.ApicLatestMaintainedRelease' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NiaapiApi.GetNiaapiApicLatestMaintainedReleaseByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "apicreleaserecommend",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.NiaapiApi.GetNiaapiApicReleaseRecommendList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'niaapi.ApicReleaseRecommend' resource.",
										Long: `Read a 'niaapi.ApicReleaseRecommend' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NiaapiApi.GetNiaapiApicReleaseRecommendByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "apicsweol",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.NiaapiApi.GetNiaapiApicSweolList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'niaapi.ApicSweol' resource.",
										Long: `Read a 'niaapi.ApicSweol' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NiaapiApi.GetNiaapiApicSweolByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "dcnmccopost",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.NiaapiApi.GetNiaapiDcnmCcoPostList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'niaapi.DcnmCcoPost' resource.",
										Long: `Read a 'niaapi.DcnmCcoPost' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NiaapiApi.GetNiaapiDcnmCcoPostByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "dcnmfieldnotice",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.NiaapiApi.GetNiaapiDcnmFieldNoticeList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'niaapi.DcnmFieldNotice' resource.",
										Long: `Read a 'niaapi.DcnmFieldNotice' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NiaapiApi.GetNiaapiDcnmFieldNoticeByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "dcnmhweol",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.NiaapiApi.GetNiaapiDcnmHweolList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'niaapi.DcnmHweol' resource.",
										Long: `Read a 'niaapi.DcnmHweol' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NiaapiApi.GetNiaapiDcnmHweolByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "dcnmlatestmaintainedrelease",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.NiaapiApi.GetNiaapiDcnmLatestMaintainedReleaseList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'niaapi.DcnmLatestMaintainedRelease' resource.",
										Long: `Read a 'niaapi.DcnmLatestMaintainedRelease' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NiaapiApi.GetNiaapiDcnmLatestMaintainedReleaseByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "dcnmreleaserecommend",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.NiaapiApi.GetNiaapiDcnmReleaseRecommendList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'niaapi.DcnmReleaseRecommend' resource.",
										Long: `Read a 'niaapi.DcnmReleaseRecommend' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NiaapiApi.GetNiaapiDcnmReleaseRecommendByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "dcnmsweol",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.NiaapiApi.GetNiaapiDcnmSweolList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'niaapi.DcnmSweol' resource.",
										Long: `Read a 'niaapi.DcnmSweol' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NiaapiApi.GetNiaapiDcnmSweolByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "filedownloader",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.NiaapiApi.GetNiaapiFileDownloaderList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'niaapi.FileDownloader' resource.",
										Long: `Read a 'niaapi.FileDownloader' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NiaapiApi.GetNiaapiFileDownloaderByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "niametadata",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.NiaapiApi.GetNiaapiNiaMetadataList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'niaapi.NiaMetadata' resource.",
										Long: `Read a 'niaapi.NiaMetadata' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NiaapiApi.GetNiaapiNiaMetadataByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "versionregex",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.NiaapiApi.GetNiaapiVersionRegexList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'niaapi.VersionRegex' resource.",
										Long: `Read a 'niaapi.VersionRegex' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NiaapiApi.GetNiaapiVersionRegexByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "niatelemetry",

								Short: "Get or list Niatelemetry resource(s)",
								Long: `Get or list Niatelemetry resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "niainventory",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.NiatelemetryApi.GetNiatelemetryNiaInventoryList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'niatelemetry.NiaInventory' resource.",
										Long: `Read a 'niatelemetry.NiaInventory' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NiatelemetryApi.GetNiatelemetryNiaInventoryByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "nialicensestate",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.NiatelemetryApi.GetNiatelemetryNiaLicenseStateList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'niatelemetry.NiaLicenseState' resource.",
										Long: `Read a 'niatelemetry.NiaLicenseState' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NiatelemetryApi.GetNiatelemetryNiaLicenseStateByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "ntp",

								Short: "Get or list Ntp resource(s)",
								Long: `Get or list Ntp resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "policy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.NtpApi.GetNtpPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'ntp.Policy' resource.",
										Long: `Read a 'ntp.Policy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NtpApi.GetNtpPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "organization",

								Short: "Get or list Organization resource(s)",
								Long: `Get or list Organization resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "organization",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.OrganizationApi.GetOrganizationOrganizationList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'organization.Organization' resource.",
										Long: `Read a 'organization.Organization' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.OrganizationApi.GetOrganizationOrganizationByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "os",

								Short: "Get or list Os resource(s)",
								Long: `Get or list Os resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "catalog",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.OsApi.GetOsCatalogList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'os.Catalog' resource.",
										Long: `Read a 'os.Catalog' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.OsApi.GetOsCatalogByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "configurationfile",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.OsApi.GetOsConfigurationFileList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'os.ConfigurationFile' resource.",
										Long: `Read a 'os.ConfigurationFile' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.OsApi.GetOsConfigurationFileByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "install",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.OsApi.GetOsInstallList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'os.Install' resource.",
										Long: `Read a 'os.Install' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.OsApi.GetOsInstallByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "pci",

								Short: "Get or list Pci resource(s)",
								Long: `Get or list Pci resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "coprocessorcard",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.PciApi.GetPciCoprocessorCardList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'pci.CoprocessorCard' resource.",
										Long: `Read a 'pci.CoprocessorCard' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.PciApi.GetPciCoprocessorCardByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "device",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.PciApi.GetPciDeviceList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'pci.Device' resource.",
										Long: `Read a 'pci.Device' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.PciApi.GetPciDeviceByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "link",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.PciApi.GetPciLinkList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'pci.Link' resource.",
										Long: `Read a 'pci.Link' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.PciApi.GetPciLinkByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "switch",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.PciApi.GetPciSwitchList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'pci.Switch' resource.",
										Long: `Read a 'pci.Switch' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.PciApi.GetPciSwitchByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "port",

								Short: "Get or list Port resource(s)",
								Long: `Get or list Port resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "group",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.PortApi.GetPortGroupList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'port.Group' resource.",
										Long: `Read a 'port.Group' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.PortApi.GetPortGroupByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "subgroup",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.PortApi.GetPortSubGroupList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'port.SubGroup' resource.",
										Long: `Read a 'port.SubGroup' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.PortApi.GetPortSubGroupByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "processor",

								Short: "Get or list Processor resource(s)",
								Long: `Get or list Processor resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "unit",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ProcessorApi.GetProcessorUnitList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'processor.Unit' resource.",
										Long: `Read a 'processor.Unit' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ProcessorApi.GetProcessorUnitByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "recovery",

								Short: "Get or list Recovery resource(s)",
								Long: `Get or list Recovery resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "backupconfigpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.RecoveryApi.GetRecoveryBackupConfigPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'recovery.BackupConfigPolicy' resource.",
										Long: `Read a 'recovery.BackupConfigPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.RecoveryApi.GetRecoveryBackupConfigPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "backupprofile",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.RecoveryApi.GetRecoveryBackupProfileList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'recovery.BackupProfile' resource.",
										Long: `Read a 'recovery.BackupProfile' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.RecoveryApi.GetRecoveryBackupProfileByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "configresult",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.RecoveryApi.GetRecoveryConfigResultList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'recovery.ConfigResult' resource.",
										Long: `Read a 'recovery.ConfigResult' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.RecoveryApi.GetRecoveryConfigResultByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "configresultentry",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.RecoveryApi.GetRecoveryConfigResultEntryList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'recovery.ConfigResultEntry' resource.",
										Long: `Read a 'recovery.ConfigResultEntry' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.RecoveryApi.GetRecoveryConfigResultEntryByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "ondemandbackup",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.RecoveryApi.GetRecoveryOnDemandBackupList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'recovery.OnDemandBackup' resource.",
										Long: `Read a 'recovery.OnDemandBackup' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.RecoveryApi.GetRecoveryOnDemandBackupByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "restore",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.RecoveryApi.GetRecoveryRestoreList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'recovery.Restore' resource.",
										Long: `Read a 'recovery.Restore' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.RecoveryApi.GetRecoveryRestoreByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "scheduleconfigpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.RecoveryApi.GetRecoveryScheduleConfigPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'recovery.ScheduleConfigPolicy' resource.",
										Long: `Read a 'recovery.ScheduleConfigPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.RecoveryApi.GetRecoveryScheduleConfigPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "resource",

								Short: "Get or list Resource resource(s)",
								Long: `Get or list Resource resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "group",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ResourceApi.GetResourceGroupList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'resource.Group' resource.",
										Long: `Read a 'resource.Group' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ResourceApi.GetResourceGroupByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "groupmember",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ResourceApi.GetResourceGroupMemberList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'resource.GroupMember' resource.",
										Long: `Read a 'resource.GroupMember' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ResourceApi.GetResourceGroupMemberByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "licenseresourcecount",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ResourceApi.GetResourceLicenseResourceCountList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'resource.LicenseResourceCount' resource.",
										Long: `Read a 'resource.LicenseResourceCount' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ResourceApi.GetResourceLicenseResourceCountByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "membership",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ResourceApi.GetResourceMembershipList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'resource.Membership' resource.",
										Long: `Read a 'resource.Membership' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ResourceApi.GetResourceMembershipByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "membershipholder",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ResourceApi.GetResourceMembershipHolderList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'resource.MembershipHolder' resource.",
										Long: `Read a 'resource.MembershipHolder' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ResourceApi.GetResourceMembershipHolderByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "sdcard",

								Short: "Get or list Sdcard resource(s)",
								Long: `Get or list Sdcard resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "policy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SdcardApi.GetSdcardPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'sdcard.Policy' resource.",
										Long: `Read a 'sdcard.Policy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SdcardApi.GetSdcardPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "sdwan",

								Short: "Get or list Sdwan resource(s)",
								Long: `Get or list Sdwan resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "profile",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SdwanApi.GetSdwanProfileList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'sdwan.Profile' resource.",
										Long: `Read a 'sdwan.Profile' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SdwanApi.GetSdwanProfileByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "routernode",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SdwanApi.GetSdwanRouterNodeList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'sdwan.RouterNode' resource.",
										Long: `Read a 'sdwan.RouterNode' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SdwanApi.GetSdwanRouterNodeByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "routerpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SdwanApi.GetSdwanRouterPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'sdwan.RouterPolicy' resource.",
										Long: `Read a 'sdwan.RouterPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SdwanApi.GetSdwanRouterPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "vmanageaccountpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SdwanApi.GetSdwanVmanageAccountPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'sdwan.VmanageAccountPolicy' resource.",
										Long: `Read a 'sdwan.VmanageAccountPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SdwanApi.GetSdwanVmanageAccountPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "search",

								Short: "Get or list Search resource(s)",
								Long: `Get or list Search resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "searchitem",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SearchApi.GetSearchSearchItemList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'search.SearchItem' resource.",
										Long: `Read a 'search.SearchItem' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SearchApi.GetSearchSearchItemByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "tagitem",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SearchApi.GetSearchTagItemList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'search.TagItem' resource.",
										Long: `Read a 'search.TagItem' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SearchApi.GetSearchTagItemByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "security",

								Short: "Get or list Security resource(s)",
								Long: `Get or list Security resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "unit",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SecurityApi.GetSecurityUnitList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'security.Unit' resource.",
										Long: `Read a 'security.Unit' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SecurityApi.GetSecurityUnitByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "server",

								Short: "Get or list Server resource(s)",
								Long: `Get or list Server resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "configchangedetail",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ServerApi.GetServerConfigChangeDetailList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'server.ConfigChangeDetail' resource.",
										Long: `Read a 'server.ConfigChangeDetail' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ServerApi.GetServerConfigChangeDetailByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "configimport",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ServerApi.GetServerConfigImportList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'server.ConfigImport' resource.",
										Long: `Read a 'server.ConfigImport' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ServerApi.GetServerConfigImportByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "configresult",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ServerApi.GetServerConfigResultList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'server.ConfigResult' resource.",
										Long: `Read a 'server.ConfigResult' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ServerApi.GetServerConfigResultByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "configresultentry",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ServerApi.GetServerConfigResultEntryList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'server.ConfigResultEntry' resource.",
										Long: `Read a 'server.ConfigResultEntry' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ServerApi.GetServerConfigResultEntryByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "profile",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.ServerApi.GetServerProfileList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'server.Profile' resource.",
										Long: `Read a 'server.Profile' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ServerApi.GetServerProfileByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "smtp",

								Short: "Get or list Smtp resource(s)",
								Long: `Get or list Smtp resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "policy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SmtpApi.GetSmtpPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'smtp.Policy' resource.",
										Long: `Read a 'smtp.Policy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SmtpApi.GetSmtpPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "snmp",

								Short: "Get or list Snmp resource(s)",
								Long: `Get or list Snmp resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "policy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SnmpApi.GetSnmpPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'snmp.Policy' resource.",
										Long: `Read a 'snmp.Policy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SnmpApi.GetSnmpPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "software",

								Short: "Get or list Software resource(s)",
								Long: `Get or list Software resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "hclmeta",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SoftwareApi.GetSoftwareHclMetaList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'software.HclMeta' resource.",
										Long: `Read a 'software.HclMeta' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SoftwareApi.GetSoftwareHclMetaByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "hyperflexdistributable",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SoftwareApi.GetSoftwareHyperflexDistributableList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'software.HyperflexDistributable' resource.",
										Long: `Read a 'software.HyperflexDistributable' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SoftwareApi.GetSoftwareHyperflexDistributableByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "solutiondistributable",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SoftwareApi.GetSoftwareSolutionDistributableList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'software.SolutionDistributable' resource.",
										Long: `Read a 'software.SolutionDistributable' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SoftwareApi.GetSoftwareSolutionDistributableByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "softwarerepository",

								Short: "Get or list Softwarerepository resource(s)",
								Long: `Get or list Softwarerepository resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "authorization",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SoftwarerepositoryApi.GetSoftwarerepositoryAuthorizationList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'softwarerepository.Authorization' resource.",
										Long: `Read a 'softwarerepository.Authorization' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SoftwarerepositoryApi.GetSoftwarerepositoryAuthorizationByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "catalog",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SoftwarerepositoryApi.GetSoftwarerepositoryCatalogList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'softwarerepository.Catalog' resource.",
										Long: `Read a 'softwarerepository.Catalog' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SoftwarerepositoryApi.GetSoftwarerepositoryCatalogByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "operatingsystemfile",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SoftwarerepositoryApi.GetSoftwarerepositoryOperatingSystemFileList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'softwarerepository.OperatingSystemFile' resource.",
										Long: `Read a 'softwarerepository.OperatingSystemFile' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SoftwarerepositoryApi.GetSoftwarerepositoryOperatingSystemFileByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "sol",

								Short: "Get or list Sol resource(s)",
								Long: `Get or list Sol resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "policy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SolApi.GetSolPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'sol.Policy' resource.",
										Long: `Read a 'sol.Policy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SolApi.GetSolPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "ssh",

								Short: "Get or list Ssh resource(s)",
								Long: `Get or list Ssh resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "policy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SshApi.GetSshPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'ssh.Policy' resource.",
										Long: `Read a 'ssh.Policy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SshApi.GetSshPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "storage",

								Short: "Get or list Storage resource(s)",
								Long: `Get or list Storage resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "controller",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStorageControllerList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.Controller' resource.",
										Long: `Read a 'storage.Controller' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStorageControllerByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "diskgrouppolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStorageDiskGroupPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.DiskGroupPolicy' resource.",
										Long: `Read a 'storage.DiskGroupPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStorageDiskGroupPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "enclosure",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStorageEnclosureList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.Enclosure' resource.",
										Long: `Read a 'storage.Enclosure' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStorageEnclosureByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "enclosuredisk",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStorageEnclosureDiskList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.EnclosureDisk' resource.",
										Long: `Read a 'storage.EnclosureDisk' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStorageEnclosureDiskByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "enclosurediskslotep",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStorageEnclosureDiskSlotEpList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.EnclosureDiskSlotEp' resource.",
										Long: `Read a 'storage.EnclosureDiskSlotEp' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStorageEnclosureDiskSlotEpByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "flexflashcontroller",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStorageFlexFlashControllerList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.FlexFlashController' resource.",
										Long: `Read a 'storage.FlexFlashController' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStorageFlexFlashControllerByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "flexflashcontrollerprops",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStorageFlexFlashControllerPropsList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.FlexFlashControllerProps' resource.",
										Long: `Read a 'storage.FlexFlashControllerProps' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStorageFlexFlashControllerPropsByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "flexflashphysicaldrive",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStorageFlexFlashPhysicalDriveList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.FlexFlashPhysicalDrive' resource.",
										Long: `Read a 'storage.FlexFlashPhysicalDrive' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStorageFlexFlashPhysicalDriveByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "flexflashvirtualdrive",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStorageFlexFlashVirtualDriveList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.FlexFlashVirtualDrive' resource.",
										Long: `Read a 'storage.FlexFlashVirtualDrive' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStorageFlexFlashVirtualDriveByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "flexutilcontroller",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStorageFlexUtilControllerList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.FlexUtilController' resource.",
										Long: `Read a 'storage.FlexUtilController' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStorageFlexUtilControllerByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "flexutilphysicaldrive",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStorageFlexUtilPhysicalDriveList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.FlexUtilPhysicalDrive' resource.",
										Long: `Read a 'storage.FlexUtilPhysicalDrive' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStorageFlexUtilPhysicalDriveByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "flexutilvirtualdrive",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStorageFlexUtilVirtualDriveList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.FlexUtilVirtualDrive' resource.",
										Long: `Read a 'storage.FlexUtilVirtualDrive' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStorageFlexUtilVirtualDriveByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "physicaldisk",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStoragePhysicalDiskList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.PhysicalDisk' resource.",
										Long: `Read a 'storage.PhysicalDisk' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStoragePhysicalDiskByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "physicaldiskextension",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStoragePhysicalDiskExtensionList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.PhysicalDiskExtension' resource.",
										Long: `Read a 'storage.PhysicalDiskExtension' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStoragePhysicalDiskExtensionByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "physicaldiskusage",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStoragePhysicalDiskUsageList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.PhysicalDiskUsage' resource.",
										Long: `Read a 'storage.PhysicalDiskUsage' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStoragePhysicalDiskUsageByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "purearray",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStoragePureArrayList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.PureArray' resource.",
										Long: `Read a 'storage.PureArray' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStoragePureArrayByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "purecontroller",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStoragePureControllerList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.PureController' resource.",
										Long: `Read a 'storage.PureController' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStoragePureControllerByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "puredisk",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStoragePureDiskList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.PureDisk' resource.",
										Long: `Read a 'storage.PureDisk' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStoragePureDiskByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "purehost",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStoragePureHostList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.PureHost' resource.",
										Long: `Read a 'storage.PureHost' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStoragePureHostByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "purehostgroup",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStoragePureHostGroupList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.PureHostGroup' resource.",
										Long: `Read a 'storage.PureHostGroup' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStoragePureHostGroupByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "purehostlun",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStoragePureHostLunList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.PureHostLun' resource.",
										Long: `Read a 'storage.PureHostLun' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStoragePureHostLunByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "pureport",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStoragePurePortList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.PurePort' resource.",
										Long: `Read a 'storage.PurePort' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStoragePurePortByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "pureprotectiongroup",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStoragePureProtectionGroupList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.PureProtectionGroup' resource.",
										Long: `Read a 'storage.PureProtectionGroup' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStoragePureProtectionGroupByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "pureprotectiongroupsnapshot",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStoragePureProtectionGroupSnapshotList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.PureProtectionGroupSnapshot' resource.",
										Long: `Read a 'storage.PureProtectionGroupSnapshot' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStoragePureProtectionGroupSnapshotByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "purereplicationschedule",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStoragePureReplicationScheduleList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.PureReplicationSchedule' resource.",
										Long: `Read a 'storage.PureReplicationSchedule' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStoragePureReplicationScheduleByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "puresnapshotschedule",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStoragePureSnapshotScheduleList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.PureSnapshotSchedule' resource.",
										Long: `Read a 'storage.PureSnapshotSchedule' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStoragePureSnapshotScheduleByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "purevolume",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStoragePureVolumeList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.PureVolume' resource.",
										Long: `Read a 'storage.PureVolume' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStoragePureVolumeByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "purevolumesnapshot",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStoragePureVolumeSnapshotList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.PureVolumeSnapshot' resource.",
										Long: `Read a 'storage.PureVolumeSnapshot' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStoragePureVolumeSnapshotByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "sasexpander",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStorageSasExpanderList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.SasExpander' resource.",
										Long: `Read a 'storage.SasExpander' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStorageSasExpanderByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "sasport",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStorageSasPortList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.SasPort' resource.",
										Long: `Read a 'storage.SasPort' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStorageSasPortByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "storagepolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStorageStoragePolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.StoragePolicy' resource.",
										Long: `Read a 'storage.StoragePolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStorageStoragePolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "vdmemberep",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStorageVdMemberEpList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.VdMemberEp' resource.",
										Long: `Read a 'storage.VdMemberEp' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStorageVdMemberEpByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "virtualdrive",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStorageVirtualDriveList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.VirtualDrive' resource.",
										Long: `Read a 'storage.VirtualDrive' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStorageVirtualDriveByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "virtualdriveextension",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.StorageApi.GetStorageVirtualDriveExtensionList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'storage.VirtualDriveExtension' resource.",
										Long: `Read a 'storage.VirtualDriveExtension' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.GetStorageVirtualDriveExtensionByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "syslog",

								Short: "Get or list Syslog resource(s)",
								Long: `Get or list Syslog resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "policy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.SyslogApi.GetSyslogPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'syslog.Policy' resource.",
										Long: `Read a 'syslog.Policy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SyslogApi.GetSyslogPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "tam",

								Short: "Get or list Tam resource(s)",
								Long: `Get or list Tam resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "advisorycount",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.TamApi.GetTamAdvisoryCountList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'tam.AdvisoryCount' resource.",
										Long: `Read a 'tam.AdvisoryCount' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.TamApi.GetTamAdvisoryCountByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "advisoryinfo",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.TamApi.GetTamAdvisoryInfoList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'tam.AdvisoryInfo' resource.",
										Long: `Read a 'tam.AdvisoryInfo' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.TamApi.GetTamAdvisoryInfoByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "advisoryinstance",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.TamApi.GetTamAdvisoryInstanceList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'tam.AdvisoryInstance' resource.",
										Long: `Read a 'tam.AdvisoryInstance' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.TamApi.GetTamAdvisoryInstanceByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "securityadvisory",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.TamApi.GetTamSecurityAdvisoryList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'tam.SecurityAdvisory' resource.",
										Long: `Read a 'tam.SecurityAdvisory' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.TamApi.GetTamSecurityAdvisoryByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "terminal",

								Short: "Get or list Terminal resource(s)",
								Long: `Get or list Terminal resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "auditlog",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.TerminalApi.GetTerminalAuditLogList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'terminal.AuditLog' resource.",
										Long: `Read a 'terminal.AuditLog' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.TerminalApi.GetTerminalAuditLogByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "top",

								Short: "Get or list Top resource(s)",
								Long: `Get or list Top resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "system",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.TopApi.GetTopSystemList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'top.System' resource.",
										Long: `Read a 'top.System' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.TopApi.GetTopSystemByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "ucsd",

								Short: "Get or list Ucsd resource(s)",
								Long: `Get or list Ucsd resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "backupinfo",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.UcsdApi.GetUcsdBackupInfoList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'ucsd.BackupInfo' resource.",
										Long: `Read a 'ucsd.BackupInfo' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.UcsdApi.GetUcsdBackupInfoByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "virtualization",

								Short: "Get or list Virtualization resource(s)",
								Long: `Get or list Virtualization resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "vmwarecluster",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VirtualizationApi.GetVirtualizationVmwareClusterList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'virtualization.VmwareCluster' resource.",
										Long: `Read a 'virtualization.VmwareCluster' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VirtualizationApi.GetVirtualizationVmwareClusterByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "vmwaredatacenter",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VirtualizationApi.GetVirtualizationVmwareDatacenterList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'virtualization.VmwareDatacenter' resource.",
										Long: `Read a 'virtualization.VmwareDatacenter' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VirtualizationApi.GetVirtualizationVmwareDatacenterByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "vmwaredatastore",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VirtualizationApi.GetVirtualizationVmwareDatastoreList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'virtualization.VmwareDatastore' resource.",
										Long: `Read a 'virtualization.VmwareDatastore' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VirtualizationApi.GetVirtualizationVmwareDatastoreByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "vmwarehost",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VirtualizationApi.GetVirtualizationVmwareHostList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'virtualization.VmwareHost' resource.",
										Long: `Read a 'virtualization.VmwareHost' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VirtualizationApi.GetVirtualizationVmwareHostByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "vmwarevcenter",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VirtualizationApi.GetVirtualizationVmwareVcenterList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'virtualization.VmwareVcenter' resource.",
										Long: `Read a 'virtualization.VmwareVcenter' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VirtualizationApi.GetVirtualizationVmwareVcenterByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "vmwarevirtualmachine",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VirtualizationApi.GetVirtualizationVmwareVirtualMachineList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'virtualization.VmwareVirtualMachine' resource.",
										Long: `Read a 'virtualization.VmwareVirtualMachine' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VirtualizationApi.GetVirtualizationVmwareVirtualMachineByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "vmedia",

								Short: "Get or list Vmedia resource(s)",
								Long: `Get or list Vmedia resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "policy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VmediaApi.GetVmediaPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'vmedia.Policy' resource.",
										Long: `Read a 'vmedia.Policy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VmediaApi.GetVmediaPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "vnic",

								Short: "Get or list Vnic resource(s)",
								Long: `Get or list Vnic resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "ethadapterpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VnicApi.GetVnicEthAdapterPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'vnic.EthAdapterPolicy' resource.",
										Long: `Read a 'vnic.EthAdapterPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.GetVnicEthAdapterPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "ethif",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VnicApi.GetVnicEthIfList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'vnic.EthIf' resource.",
										Long: `Read a 'vnic.EthIf' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.GetVnicEthIfByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "ethnetworkpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VnicApi.GetVnicEthNetworkPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'vnic.EthNetworkPolicy' resource.",
										Long: `Read a 'vnic.EthNetworkPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.GetVnicEthNetworkPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "ethqospolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VnicApi.GetVnicEthQosPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'vnic.EthQosPolicy' resource.",
										Long: `Read a 'vnic.EthQosPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.GetVnicEthQosPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "fcadapterpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VnicApi.GetVnicFcAdapterPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'vnic.FcAdapterPolicy' resource.",
										Long: `Read a 'vnic.FcAdapterPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.GetVnicFcAdapterPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "fcif",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VnicApi.GetVnicFcIfList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'vnic.FcIf' resource.",
										Long: `Read a 'vnic.FcIf' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.GetVnicFcIfByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "fcnetworkpolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VnicApi.GetVnicFcNetworkPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'vnic.FcNetworkPolicy' resource.",
										Long: `Read a 'vnic.FcNetworkPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.GetVnicFcNetworkPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "fcqospolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VnicApi.GetVnicFcQosPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'vnic.FcQosPolicy' resource.",
										Long: `Read a 'vnic.FcQosPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.GetVnicFcQosPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "lanconnectivitypolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VnicApi.GetVnicLanConnectivityPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'vnic.LanConnectivityPolicy' resource.",
										Long: `Read a 'vnic.LanConnectivityPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.GetVnicLanConnectivityPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "sanconnectivitypolicy",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.VnicApi.GetVnicSanConnectivityPolicyList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'vnic.SanConnectivityPolicy' resource.",
										Long: `Read a 'vnic.SanConnectivityPolicy' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.GetVnicSanConnectivityPolicyByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "workflow",

								Short: "Get or list Workflow resource(s)",
								Long: `Get or list Workflow resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "batchapiexecutor",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.WorkflowApi.GetWorkflowBatchApiExecutorList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'workflow.BatchApiExecutor' resource.",
										Long: `Read a 'workflow.BatchApiExecutor' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.GetWorkflowBatchApiExecutorByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "buildtaskmeta",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.WorkflowApi.GetWorkflowBuildTaskMetaList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'workflow.BuildTaskMeta' resource.",
										Long: `Read a 'workflow.BuildTaskMeta' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.GetWorkflowBuildTaskMetaByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "buildtaskmetaowner",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.WorkflowApi.GetWorkflowBuildTaskMetaOwnerList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'workflow.BuildTaskMetaOwner' resource.",
										Long: `Read a 'workflow.BuildTaskMetaOwner' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.GetWorkflowBuildTaskMetaOwnerByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "catalog",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.WorkflowApi.GetWorkflowCatalogList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'workflow.Catalog' resource.",
										Long: `Read a 'workflow.Catalog' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.GetWorkflowCatalogByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "customdatatypedefinition",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.WorkflowApi.GetWorkflowCustomDataTypeDefinitionList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'workflow.CustomDataTypeDefinition' resource.",
										Long: `Read a 'workflow.CustomDataTypeDefinition' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.GetWorkflowCustomDataTypeDefinitionByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "pendingdynamicworkflowinfo",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.WorkflowApi.GetWorkflowPendingDynamicWorkflowInfoList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'workflow.PendingDynamicWorkflowInfo' resource.",
										Long: `Read a 'workflow.PendingDynamicWorkflowInfo' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.GetWorkflowPendingDynamicWorkflowInfoByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "taskdefinition",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.WorkflowApi.GetWorkflowTaskDefinitionList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'workflow.TaskDefinition' resource.",
										Long: `Read a 'workflow.TaskDefinition' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.GetWorkflowTaskDefinitionByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "taskinfo",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.WorkflowApi.GetWorkflowTaskInfoList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'workflow.TaskInfo' resource.",
										Long: `Read a 'workflow.TaskInfo' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.GetWorkflowTaskInfoByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "taskmeta",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.WorkflowApi.GetWorkflowTaskMetaList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'workflow.TaskMeta' resource.",
										Long: `Read a 'workflow.TaskMeta' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.GetWorkflowTaskMetaByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "workflowdefinition",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.WorkflowApi.GetWorkflowWorkflowDefinitionList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'workflow.WorkflowDefinition' resource.",
										Long: `Read a 'workflow.WorkflowDefinition' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.GetWorkflowWorkflowDefinitionByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "workflowinfo",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.WorkflowApi.GetWorkflowWorkflowInfoList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'workflow.WorkflowInfo' resource.",
										Long: `Read a 'workflow.WorkflowInfo' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.GetWorkflowWorkflowInfoByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									cmd := &cobra.Command{
										Use: "workflowmeta",

										Run: func(cmd *cobra.Command, args []string) {
											client.GetConfig().Debug = verbose

											req := client.WorkflowApi.GetWorkflowWorkflowMetaList(authCtx)

											if filter, err := cmd.Flags().GetString("filter"); err == nil {
												req = req.Filter(filter)
											}

											if name, err := cmd.Flags().GetString("name"); err == nil {
												req = req.Filter(fmt.Sprintf("Name eq '%s'", name))
											}

											res, httpResponse, err := req.Execute()
											resultHandler(res, httpResponse, err)

										},

										Short: "Read a 'workflow.WorkflowMeta' resource.",
										Long: `Read a 'workflow.WorkflowMeta' resource.
`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.GetWorkflowWorkflowMetaByMoid(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("filter", "", "Filter query (e.g. \"Name eq 'Bob'\" - note the inner quotes must be single-quotes)")
									cmd.Flags().String("name", "", "Filter by exact name (note: if both --filter and --name are supplied, --name takes precedence")

									return cmd
								}())

							return cmd
						}())

					return cmd
				}())

			cmd.AddCommand(
				func() *cobra.Command {

					cmd := &cobra.Command{
						Use: "update",

						Short: "Update resouce(s)",
						Long: `Update resouce(s)
`,
					}

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "adapter",

								Short: "Update Adapter resource(s)",
								Long: `Update Adapter resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var Settings with unknown data type []AdapterAdapterConfig

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "configpolicy",

										Short: "Update a 'adapter.ConfigPolicy' resource.",
										Long: `Update a 'adapter.ConfigPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.AdapterApi.PatchAdapterConfigPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "appliance",

								Short: "Update Appliance resource(s)",
								Long: `Update Appliance resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Filename string

									var Protocol string

									var RemoteHost string

									var RemotePath string

									//Skipping var RemotePort with unknown data type int64

									var Username string

									//Skipping var BackupTime with unknown data type time.Time

									var IsPasswordSet bool

									var ManualBackup bool

									var Password string

									//Skipping var Schedule with unknown data type OnpremSchedule

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "backuppolicy",

										Short: "Update a 'appliance.BackupPolicy' resource.",
										Long: `Update a 'appliance.BackupPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.PatchApplianceBackupPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Filename, "Filename", "", "Filename")

									cmd.Flags().StringVar(&Protocol, "Protocol", "", "Protocol")

									cmd.Flags().StringVar(&RemoteHost, "RemoteHost", "", "RemoteHost")

									cmd.Flags().StringVar(&RemotePath, "RemotePath", "", "RemotePath")

									cmd.Flags().StringVar(&Username, "Username", "", "Username")

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().BoolVar(&ManualBackup, "ManualBackup", false, "ManualBackup")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									//Skipping var Schedule with unknown data type OnpremSchedule
									if isMoRef(openapi.OnpremSchedule{}) {
										cmd.Flags().String("Schedule", "", "Schedule")
									}

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var Certificate with unknown data type IamCertificateRelationship

									cmd := &cobra.Command{
										Use: "certificatesetting",

										Short: "Update a 'appliance.CertificateSetting' resource.",
										Long: `Update a 'appliance.CertificateSetting' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.PatchApplianceCertificateSetting(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var Certificate with unknown data type IamCertificateRelationship
									if isMoRef(openapi.IamCertificateRelationship{}) {
										cmd.Flags().String("Certificate", "", "Certificate")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Enable bool

									var Name string

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var ParentConfig with unknown data type ApplianceDataExportPolicyRelationship

									//Skipping var SubConfigs with unknown data type []ApplianceDataExportPolicyRelationship

									cmd := &cobra.Command{
										Use: "dataexportpolicy",

										Short: "Update a 'appliance.DataExportPolicy' resource.",
										Long: `Update a 'appliance.DataExportPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.PatchApplianceDataExportPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&Enable, "Enable", false, "Enable")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var ParentConfig with unknown data type ApplianceDataExportPolicyRelationship
									if isMoRef(openapi.ApplianceDataExportPolicyRelationship{}) {
										cmd.Flags().String("ParentConfig", "", "ParentConfig")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var IsPasswordSet bool

									var Message string

									var Password string

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "diagsetting",

										Short: "Update a 'appliance.DiagSetting' resource.",
										Long: `Update a 'appliance.DiagSetting' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.PatchApplianceDiagSetting(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().StringVar(&Message, "Message", "", "Message")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var BuildType string

									//Skipping var Capabilities with unknown data type []ApplianceKeyValuePair

									var CloudUrl string

									//Skipping var EndTime with unknown data type time.Time

									var SetupStates []string

									//Skipping var StartTime with unknown data type time.Time

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "setupinfo",

										Short: "Update a 'appliance.SetupInfo' resource.",
										Long: `Update a 'appliance.SetupInfo' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.PatchApplianceSetupInfo(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&BuildType, "BuildType", "", "BuildType")

									cmd.Flags().StringVar(&CloudUrl, "CloudUrl", "", "CloudUrl")

									cmd.Flags().StringSliceVar(&SetupStates, "SetupStates", []string{}, "SetupStates")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Active bool

									var AutoCreated bool

									//Skipping var CompletedPhases with unknown data type []OnpremUpgradePhase

									//Skipping var CurrentPhase with unknown data type OnpremUpgradePhase

									var Description string

									//Skipping var ElapsedTime with unknown data type int64

									//Skipping var EndTime with unknown data type time.Time

									var Fingerprint string

									var Messages []string

									var Services []string

									//Skipping var StartTime with unknown data type time.Time

									var Status string

									//Skipping var TotalPhases with unknown data type int64

									var UiPackages []string

									var Version string

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var ImageBundle with unknown data type ApplianceImageBundleRelationship

									cmd := &cobra.Command{
										Use: "upgrade",

										Short: "Update a 'appliance.Upgrade' resource.",
										Long: `Update a 'appliance.Upgrade' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.PatchApplianceUpgrade(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&Active, "Active", false, "Active")

									cmd.Flags().BoolVar(&AutoCreated, "AutoCreated", false, "AutoCreated")

									//Skipping var CurrentPhase with unknown data type OnpremUpgradePhase
									if isMoRef(openapi.OnpremUpgradePhase{}) {
										cmd.Flags().String("CurrentPhase", "", "CurrentPhase")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Fingerprint, "Fingerprint", "", "Fingerprint")

									cmd.Flags().StringSliceVar(&Messages, "Messages", []string{}, "Messages")

									cmd.Flags().StringSliceVar(&Services, "Services", []string{}, "Services")

									cmd.Flags().StringVar(&Status, "Status", "", "Status")

									cmd.Flags().StringSliceVar(&UiPackages, "UiPackages", []string{}, "UiPackages")

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var ImageBundle with unknown data type ApplianceImageBundleRelationship
									if isMoRef(openapi.ApplianceImageBundleRelationship{}) {
										cmd.Flags().String("ImageBundle", "", "ImageBundle")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var AutoUpgrade bool

									var BlackoutDatesEnabled bool

									//Skipping var BlackoutEndDate with unknown data type time.Time

									//Skipping var BlackoutStartDate with unknown data type time.Time

									//Skipping var Schedule with unknown data type OnpremSchedule

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "upgradepolicy",

										Short: "Update a 'appliance.UpgradePolicy' resource.",
										Long: `Update a 'appliance.UpgradePolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ApplianceApi.PatchApplianceUpgradePolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&AutoUpgrade, "AutoUpgrade", false, "AutoUpgrade")

									cmd.Flags().BoolVar(&BlackoutDatesEnabled, "BlackoutDatesEnabled", false, "BlackoutDatesEnabled")

									//Skipping var Schedule with unknown data type OnpremSchedule
									if isMoRef(openapi.OnpremSchedule{}) {
										cmd.Flags().String("Schedule", "", "Schedule")
									}

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "asset",

								Short: "Update Asset resource(s)",
								Long: `Update Asset resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var LocalConfigurationLocked bool

									var LogLevel string

									//Skipping var Device with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "deviceconfiguration",

										Short: "Update a 'asset.DeviceConfiguration' resource.",
										Long: `Update a 'asset.DeviceConfiguration' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.AssetApi.PatchAssetDeviceConfiguration(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&LocalConfigurationLocked, "LocalConfigurationLocked", false, "LocalConfigurationLocked")

									cmd.Flags().StringVar(&LogLevel, "LogLevel", "", "LogLevel")

									//Skipping var Device with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("Device", "", "Device")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Contract with unknown data type AssetContractInformation

									var ContractStatus string

									var CoveredProductLineEndDate string

									var DeviceId string

									var DeviceType string

									//Skipping var EndCustomer with unknown data type AssetCustomerInformation

									//Skipping var EndUserGlobalUltimate with unknown data type AssetGlobalUltimate

									var IsValid bool

									var ItemType string

									var MaintenancePurchaseOrderNumber string

									var MaintenanceSalesOrderNumber string

									var PlatformType string

									//Skipping var Product with unknown data type AssetProductInformation

									var PurchaseOrderNumber string

									//Skipping var ResellerGlobalUltimate with unknown data type AssetGlobalUltimate

									var SalesOrderNumber string

									var ServiceDescription string

									//Skipping var ServiceEndDate with unknown data type time.Time

									var ServiceLevel string

									var ServiceSku string

									//Skipping var ServiceStartDate with unknown data type time.Time

									var StateContract string

									var WarrantyEndDate string

									var WarrantyType string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "devicecontractinformation",

										Short: "Update a 'asset.DeviceContractInformation' resource.",
										Long: `Update a 'asset.DeviceContractInformation' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.AssetApi.PatchAssetDeviceContractInformation(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Contract with unknown data type AssetContractInformation
									if isMoRef(openapi.AssetContractInformation{}) {
										cmd.Flags().String("Contract", "", "Contract")
									}

									cmd.Flags().StringVar(&ContractStatus, "ContractStatus", "", "ContractStatus")

									cmd.Flags().StringVar(&CoveredProductLineEndDate, "CoveredProductLineEndDate", "", "CoveredProductLineEndDate")

									cmd.Flags().StringVar(&DeviceId, "DeviceId", "", "DeviceId")

									cmd.Flags().StringVar(&DeviceType, "DeviceType", "", "DeviceType")

									//Skipping var EndCustomer with unknown data type AssetCustomerInformation
									if isMoRef(openapi.AssetCustomerInformation{}) {
										cmd.Flags().String("EndCustomer", "", "EndCustomer")
									}

									//Skipping var EndUserGlobalUltimate with unknown data type AssetGlobalUltimate
									if isMoRef(openapi.AssetGlobalUltimate{}) {
										cmd.Flags().String("EndUserGlobalUltimate", "", "EndUserGlobalUltimate")
									}

									cmd.Flags().BoolVar(&IsValid, "IsValid", false, "IsValid")

									cmd.Flags().StringVar(&ItemType, "ItemType", "", "ItemType")

									cmd.Flags().StringVar(&MaintenancePurchaseOrderNumber, "MaintenancePurchaseOrderNumber", "", "MaintenancePurchaseOrderNumber")

									cmd.Flags().StringVar(&MaintenanceSalesOrderNumber, "MaintenanceSalesOrderNumber", "", "MaintenanceSalesOrderNumber")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									//Skipping var Product with unknown data type AssetProductInformation
									if isMoRef(openapi.AssetProductInformation{}) {
										cmd.Flags().String("Product", "", "Product")
									}

									cmd.Flags().StringVar(&PurchaseOrderNumber, "PurchaseOrderNumber", "", "PurchaseOrderNumber")

									//Skipping var ResellerGlobalUltimate with unknown data type AssetGlobalUltimate
									if isMoRef(openapi.AssetGlobalUltimate{}) {
										cmd.Flags().String("ResellerGlobalUltimate", "", "ResellerGlobalUltimate")
									}

									cmd.Flags().StringVar(&SalesOrderNumber, "SalesOrderNumber", "", "SalesOrderNumber")

									cmd.Flags().StringVar(&ServiceDescription, "ServiceDescription", "", "ServiceDescription")

									cmd.Flags().StringVar(&ServiceLevel, "ServiceLevel", "", "ServiceLevel")

									cmd.Flags().StringVar(&ServiceSku, "ServiceSku", "", "ServiceSku")

									cmd.Flags().StringVar(&StateContract, "StateContract", "", "StateContract")

									cmd.Flags().StringVar(&WarrantyEndDate, "WarrantyEndDate", "", "WarrantyEndDate")

									cmd.Flags().StringVar(&WarrantyType, "WarrantyType", "", "WarrantyType")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var ApiVersion with unknown data type int64

									//Skipping var AppPartitionNumber with unknown data type int64

									var ConnectionId string

									var ConnectionReason string

									var ConnectionStatus string

									//Skipping var ConnectionStatusLastChangeTime with unknown data type time.Time

									var ConnectorVersion string

									var DeviceExternalIpAddress string

									var ProxyApp string

									var AccessKeyId string

									var ClaimedByUserName string

									//Skipping var ClaimedTime with unknown data type time.Time

									var DeviceHostname []string

									var DeviceIpAddress []string

									var ExecutionMode string

									//Skipping var ParentSignature with unknown data type AssetParentConnectionSignature

									var Pid []string

									var PlatformType string

									var PublicAccessKey string

									var ReadOnly bool

									var Serial []string

									var Vendor string

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var ClaimedByUser with unknown data type IamUserRelationship

									//Skipping var ClusterMembers with unknown data type []AssetClusterMemberRelationship

									//Skipping var DeviceClaim with unknown data type AssetDeviceClaimRelationship

									//Skipping var DeviceConfiguration with unknown data type AssetDeviceConfigurationRelationship

									//Skipping var DomainGroup with unknown data type IamDomainGroupRelationship

									//Skipping var ParentConnection with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "deviceregistration",

										Short: "Updates the resource representing the device connector. For example, this can be used to annotate the device connector resource with user-specified tags.",
										Long: `Updates the resource representing the device connector. For example, this can be used to annotate the device connector resource with user-specified tags.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.AssetApi.PatchAssetDeviceRegistration(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&ConnectionId, "ConnectionId", "", "ConnectionId")

									cmd.Flags().StringVar(&ConnectionReason, "ConnectionReason", "", "ConnectionReason")

									cmd.Flags().StringVar(&ConnectionStatus, "ConnectionStatus", "", "ConnectionStatus")

									cmd.Flags().StringVar(&ConnectorVersion, "ConnectorVersion", "", "ConnectorVersion")

									cmd.Flags().StringVar(&DeviceExternalIpAddress, "DeviceExternalIpAddress", "", "DeviceExternalIpAddress")

									cmd.Flags().StringVar(&ProxyApp, "ProxyApp", "", "ProxyApp")

									cmd.Flags().StringVar(&AccessKeyId, "AccessKeyId", "", "AccessKeyId")

									cmd.Flags().StringVar(&ClaimedByUserName, "ClaimedByUserName", "", "ClaimedByUserName")

									cmd.Flags().StringSliceVar(&DeviceHostname, "DeviceHostname", []string{}, "DeviceHostname")

									cmd.Flags().StringSliceVar(&DeviceIpAddress, "DeviceIpAddress", []string{}, "DeviceIpAddress")

									cmd.Flags().StringVar(&ExecutionMode, "ExecutionMode", "", "ExecutionMode")

									//Skipping var ParentSignature with unknown data type AssetParentConnectionSignature
									if isMoRef(openapi.AssetParentConnectionSignature{}) {
										cmd.Flags().String("ParentSignature", "", "ParentSignature")
									}

									cmd.Flags().StringSliceVar(&Pid, "Pid", []string{}, "Pid")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									cmd.Flags().StringVar(&PublicAccessKey, "PublicAccessKey", "", "PublicAccessKey")

									cmd.Flags().BoolVar(&ReadOnly, "ReadOnly", false, "ReadOnly")

									cmd.Flags().StringSliceVar(&Serial, "Serial", []string{}, "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var ClaimedByUser with unknown data type IamUserRelationship
									if isMoRef(openapi.IamUserRelationship{}) {
										cmd.Flags().String("ClaimedByUser", "", "ClaimedByUser")
									}

									//Skipping var DeviceClaim with unknown data type AssetDeviceClaimRelationship
									if isMoRef(openapi.AssetDeviceClaimRelationship{}) {
										cmd.Flags().String("DeviceClaim", "", "DeviceClaim")
									}

									//Skipping var DeviceConfiguration with unknown data type AssetDeviceConfigurationRelationship
									if isMoRef(openapi.AssetDeviceConfigurationRelationship{}) {
										cmd.Flags().String("DeviceConfiguration", "", "DeviceConfiguration")
									}

									//Skipping var DomainGroup with unknown data type IamDomainGroupRelationship
									if isMoRef(openapi.IamDomainGroupRelationship{}) {
										cmd.Flags().String("DomainGroup", "", "DomainGroup")
									}

									//Skipping var ParentConnection with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("ParentConnection", "", "ParentConnection")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Credential with unknown data type CommCredential

									var DeviceType string

									var IgnoreCert bool

									var IsEnabled bool

									var ManagementAddress string

									//Skipping var Port with unknown data type int64

									var Protocol string

									//Skipping var Status with unknown data type AssetManagedDeviceStatus

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var DeviceConnectorManager with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var WorkflowInfo with unknown data type WorkflowWorkflowInfoRelationship

									cmd := &cobra.Command{
										Use: "manageddevice",

										Short: "Update a 'asset.ManagedDevice' resource.",
										Long: `Update a 'asset.ManagedDevice' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.AssetApi.PatchAssetManagedDevice(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Credential with unknown data type CommCredential
									if isMoRef(openapi.CommCredential{}) {
										cmd.Flags().String("Credential", "", "Credential")
									}

									cmd.Flags().StringVar(&DeviceType, "DeviceType", "", "DeviceType")

									cmd.Flags().BoolVar(&IgnoreCert, "IgnoreCert", false, "IgnoreCert")

									cmd.Flags().BoolVar(&IsEnabled, "IsEnabled", false, "IsEnabled")

									cmd.Flags().StringVar(&ManagementAddress, "ManagementAddress", "", "ManagementAddress")

									cmd.Flags().StringVar(&Protocol, "Protocol", "", "Protocol")

									//Skipping var Status with unknown data type AssetManagedDeviceStatus
									if isMoRef(openapi.AssetManagedDeviceStatus{}) {
										cmd.Flags().String("Status", "", "Status")
									}

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var DeviceConnectorManager with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("DeviceConnectorManager", "", "DeviceConnectorManager")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var WorkflowInfo with unknown data type WorkflowWorkflowInfoRelationship
									if isMoRef(openapi.WorkflowWorkflowInfoRelationship{}) {
										cmd.Flags().String("WorkflowInfo", "", "WorkflowInfo")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "bios",

								Short: "Update Bios resource(s)",
								Long: `Update Bios resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var ActualBootMode string

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "bootmode",

										Short: "Update a 'bios.BootMode' resource.",
										Long: `Update a 'bios.BootMode' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.BiosApi.PatchBiosBootMode(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&ActualBootMode, "ActualBootMode", "", "ActualBootMode")

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("ComputeRackUnit", "", "ComputeRackUnit")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var AcsControlGpu1state string

									var AcsControlGpu2state string

									var AcsControlGpu3state string

									var AcsControlGpu4state string

									var AcsControlGpu5state string

									var AcsControlGpu6state string

									var AcsControlGpu7state string

									var AcsControlGpu8state string

									var AcsControlSlot11state string

									var AcsControlSlot12state string

									var AcsControlSlot13state string

									var AcsControlSlot14state string

									var AdjacentCacheLinePrefetch string

									var AllUsbDevices string

									var Altitude string

									var AspmSupport string

									var AssertNmiOnPerr string

									var AssertNmiOnSerr string

									var AutoCcState string

									var AutonumousCstateEnable string

									var BaudRate string

									var BmeDmaMitigation string

									var BootOptionNumRetry string

									var BootOptionReCoolDown string

									var BootOptionRetry string

									var BootPerformanceMode string

									var CbsCmnCpuCpb string

									var CbsCmnCpuGenDowncoreCtrl string

									var CbsCmnCpuGlobalCstateCtrl string

									var CbsCmnCpuL1streamHwPrefetcher string

									var CbsCmnCpuL2streamHwPrefetcher string

									var CbsCmnDeterminismSlider string

									var CbsCmnGnbNbIommu string

									var CbsCmnMemCtrlBankGroupSwapDdr4 string

									var CbsCmnMemMapBankInterleaveDdr4 string

									var CbsCmncTdpCtl string

									var CbsDfCmnMemIntlv string

									var CbsDfCmnMemIntlvSize string

									var CdnEnable string

									var CdnSupport string

									var ChannelInterLeave string

									var CiscoAdaptiveMemTraining string

									var CiscoDebugLevel string

									var CiscoOpromLaunchOptimization string

									var CkeLowPolicy string

									var ClosedLoopThermThrotl string

									var CmciEnable string

									var ConfigTdp string

									var ConsoleRedirection string

									var CoreMultiProcessing string

									var CpuEnergyPerformance string

									var CpuFrequencyFloor string

									var CpuPerformance string

									var CpuPowerManagement string

									var DcpmmFirmwareDowngrade string

									var DemandScrub string

									var DirectCacheAccess string

									var DramClockThrottling string

									var DramRefreshRate string

									var EnergyEfficientTurbo string

									var EngPerfTuning string

									var EnhancedIntelSpeedStepTech string

									var EppProfile string

									var ExecuteDisableBit string

									var ExtendedApic string

									var FlowControl string

									var Frb2enable string

									var HardwarePrefetch string

									var HwpmEnable string

									var ImcInterleave string

									var IntelHyperThreadingTech string

									var IntelSpeedSelect string

									var IntelTurboBoostTech string

									var IntelVirtualizationTechnology string

									var IntelVtForDirectedIo string

									var IntelVtdCoherencySupport string

									var IntelVtdInterruptRemapping string

									var IntelVtdPassThroughDmaSupport string

									var IntelVtdatsSupport string

									var IohErrorEnable string

									var IohResource string

									var IpPrefetch string

									var Ipv4pxe string

									var Ipv6pxe string

									var KtiPrefetch string

									var LegacyOsRedirection string

									var LegacyUsbSupport string

									var LlcPrefetch string

									var LomPort0state string

									var LomPort1state string

									var LomPort2state string

									var LomPort3state string

									var LomPortsAllState string

									var LvDdrMode string

									var MakeDeviceNonBootable string

									var MemoryInterLeave string

									var MemoryMappedIoAbove4gb string

									var MemorySizeLimit string

									var MirroringMode string

									var MmcfgBase string

									var NetworkStack string

									var NumaOptimized string

									var Onboard10gbitLom string

									var OnboardGbitLom string

									var OnboardScuStorageSupport string

									var OnboardScuStorageSwStack string

									var OsBootWatchdogTimer string

									var OsBootWatchdogTimerPolicy string

									var OsBootWatchdogTimerTimeout string

									var OutOfBandMgmtPort string

									var PackageCstateLimit string

									var PartialMirrorModeConfig string

									var PartialMirrorPercent string

									var PartialMirrorValue1 string

									var PartialMirrorValue2 string

									var PartialMirrorValue3 string

									var PartialMirrorValue4 string

									var PatrolScrub string

									var PatrolScrubDuration string

									var PcIeRasSupport string

									var PcIeSsdHotPlugSupport string

									var PchUsb30mode string

									var PciOptionRoMs string

									var PciRomClp string

									var PopSupport string

									var PostErrorPause string

									var ProcessorC1e string

									var ProcessorC3report string

									var ProcessorC6report string

									var ProcessorCstate string

									var Psata string

									var PstateCoordType string

									var PuttyKeyPad string

									var PwrPerfTuning string

									var QpiLinkFrequency string

									var QpiSnoopMode string

									var RankInterLeave string

									var RedirectionAfterPost string

									var SataModeSelect string

									var SelectMemoryRasConfiguration string

									var SelectPprType string

									var SerialPortAenable string

									var SinglePctlEnable string

									var Slot10linkSpeed string

									var Slot10state string

									var Slot11linkSpeed string

									var Slot11state string

									var Slot12linkSpeed string

									var Slot12state string

									var Slot13state string

									var Slot14state string

									var Slot1linkSpeed string

									var Slot1state string

									var Slot2linkSpeed string

									var Slot2state string

									var Slot3linkSpeed string

									var Slot3state string

									var Slot4linkSpeed string

									var Slot4state string

									var Slot5linkSpeed string

									var Slot5state string

									var Slot6linkSpeed string

									var Slot6state string

									var Slot7linkSpeed string

									var Slot7state string

									var Slot8linkSpeed string

									var Slot8state string

									var Slot9linkSpeed string

									var Slot9state string

									var SlotFlomLinkSpeed string

									var SlotFrontNvme1linkSpeed string

									var SlotFrontNvme2linkSpeed string

									var SlotFrontSlot5linkSpeed string

									var SlotFrontSlot6linkSpeed string

									var SlotGpu1state string

									var SlotGpu2state string

									var SlotGpu3state string

									var SlotGpu4state string

									var SlotGpu5state string

									var SlotGpu6state string

									var SlotGpu7state string

									var SlotGpu8state string

									var SlotHbaLinkSpeed string

									var SlotHbaState string

									var SlotLom1link string

									var SlotLom2link string

									var SlotMezzState string

									var SlotMlomLinkSpeed string

									var SlotMlomState string

									var SlotMraidLinkSpeed string

									var SlotMraidState string

									var SlotN10state string

									var SlotN11state string

									var SlotN12state string

									var SlotN13state string

									var SlotN14state string

									var SlotN15state string

									var SlotN16state string

									var SlotN17state string

									var SlotN18state string

									var SlotN19state string

									var SlotN1state string

									var SlotN20state string

									var SlotN21state string

									var SlotN22state string

									var SlotN23state string

									var SlotN24state string

									var SlotN2state string

									var SlotN3state string

									var SlotN4state string

									var SlotN5state string

									var SlotN6state string

									var SlotN7state string

									var SlotN8state string

									var SlotN9state string

									var SlotRaidLinkSpeed string

									var SlotRaidState string

									var SlotRearNvme1linkSpeed string

									var SlotRearNvme1state string

									var SlotRearNvme2linkSpeed string

									var SlotRearNvme2state string

									var SlotRearNvme3state string

									var SlotRearNvme4state string

									var SlotRearNvme5state string

									var SlotRearNvme6state string

									var SlotRearNvme7state string

									var SlotRearNvme8state string

									var SlotRiser1linkSpeed string

									var SlotRiser1slot1linkSpeed string

									var SlotRiser1slot2linkSpeed string

									var SlotRiser1slot3linkSpeed string

									var SlotRiser2linkSpeed string

									var SlotRiser2slot4linkSpeed string

									var SlotRiser2slot5linkSpeed string

									var SlotRiser2slot6linkSpeed string

									var SlotSasState string

									var SlotSsdSlot1linkSpeed string

									var SlotSsdSlot2linkSpeed string

									var Smee string

									var SmtMode string

									var Snc string

									var SparingMode string

									var SrIov string

									var StreamerPrefetch string

									var SvmMode string

									var TerminalType string

									var TpmControl string

									var TpmSupport string

									var TxtSupport string

									var UcsmBootOrderRule string

									var UsbEmul6064 string

									var UsbPortFront string

									var UsbPortInternal string

									var UsbPortKvm string

									var UsbPortRear string

									var UsbPortSdCard string

									var UsbPortVmedia string

									var UsbXhciSupport string

									var VgaPriority string

									var VmdEnable string

									var WorkLoadConfig string

									var XptPrefetch string

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "policy",

										Short: "Update a 'bios.Policy' resource.",
										Long: `Update a 'bios.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.BiosApi.PatchBiosPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&AcsControlGpu1state, "AcsControlGpu1state", "", "AcsControlGpu1state")

									cmd.Flags().StringVar(&AcsControlGpu2state, "AcsControlGpu2state", "", "AcsControlGpu2state")

									cmd.Flags().StringVar(&AcsControlGpu3state, "AcsControlGpu3state", "", "AcsControlGpu3state")

									cmd.Flags().StringVar(&AcsControlGpu4state, "AcsControlGpu4state", "", "AcsControlGpu4state")

									cmd.Flags().StringVar(&AcsControlGpu5state, "AcsControlGpu5state", "", "AcsControlGpu5state")

									cmd.Flags().StringVar(&AcsControlGpu6state, "AcsControlGpu6state", "", "AcsControlGpu6state")

									cmd.Flags().StringVar(&AcsControlGpu7state, "AcsControlGpu7state", "", "AcsControlGpu7state")

									cmd.Flags().StringVar(&AcsControlGpu8state, "AcsControlGpu8state", "", "AcsControlGpu8state")

									cmd.Flags().StringVar(&AcsControlSlot11state, "AcsControlSlot11state", "", "AcsControlSlot11state")

									cmd.Flags().StringVar(&AcsControlSlot12state, "AcsControlSlot12state", "", "AcsControlSlot12state")

									cmd.Flags().StringVar(&AcsControlSlot13state, "AcsControlSlot13state", "", "AcsControlSlot13state")

									cmd.Flags().StringVar(&AcsControlSlot14state, "AcsControlSlot14state", "", "AcsControlSlot14state")

									cmd.Flags().StringVar(&AdjacentCacheLinePrefetch, "AdjacentCacheLinePrefetch", "", "AdjacentCacheLinePrefetch")

									cmd.Flags().StringVar(&AllUsbDevices, "AllUsbDevices", "", "AllUsbDevices")

									cmd.Flags().StringVar(&Altitude, "Altitude", "", "Altitude")

									cmd.Flags().StringVar(&AspmSupport, "AspmSupport", "", "AspmSupport")

									cmd.Flags().StringVar(&AssertNmiOnPerr, "AssertNmiOnPerr", "", "AssertNmiOnPerr")

									cmd.Flags().StringVar(&AssertNmiOnSerr, "AssertNmiOnSerr", "", "AssertNmiOnSerr")

									cmd.Flags().StringVar(&AutoCcState, "AutoCcState", "", "AutoCcState")

									cmd.Flags().StringVar(&AutonumousCstateEnable, "AutonumousCstateEnable", "", "AutonumousCstateEnable")

									cmd.Flags().StringVar(&BaudRate, "BaudRate", "", "BaudRate")

									cmd.Flags().StringVar(&BmeDmaMitigation, "BmeDmaMitigation", "", "BmeDmaMitigation")

									cmd.Flags().StringVar(&BootOptionNumRetry, "BootOptionNumRetry", "", "BootOptionNumRetry")

									cmd.Flags().StringVar(&BootOptionReCoolDown, "BootOptionReCoolDown", "", "BootOptionReCoolDown")

									cmd.Flags().StringVar(&BootOptionRetry, "BootOptionRetry", "", "BootOptionRetry")

									cmd.Flags().StringVar(&BootPerformanceMode, "BootPerformanceMode", "", "BootPerformanceMode")

									cmd.Flags().StringVar(&CbsCmnCpuCpb, "CbsCmnCpuCpb", "", "CbsCmnCpuCpb")

									cmd.Flags().StringVar(&CbsCmnCpuGenDowncoreCtrl, "CbsCmnCpuGenDowncoreCtrl", "", "CbsCmnCpuGenDowncoreCtrl")

									cmd.Flags().StringVar(&CbsCmnCpuGlobalCstateCtrl, "CbsCmnCpuGlobalCstateCtrl", "", "CbsCmnCpuGlobalCstateCtrl")

									cmd.Flags().StringVar(&CbsCmnCpuL1streamHwPrefetcher, "CbsCmnCpuL1streamHwPrefetcher", "", "CbsCmnCpuL1streamHwPrefetcher")

									cmd.Flags().StringVar(&CbsCmnCpuL2streamHwPrefetcher, "CbsCmnCpuL2streamHwPrefetcher", "", "CbsCmnCpuL2streamHwPrefetcher")

									cmd.Flags().StringVar(&CbsCmnDeterminismSlider, "CbsCmnDeterminismSlider", "", "CbsCmnDeterminismSlider")

									cmd.Flags().StringVar(&CbsCmnGnbNbIommu, "CbsCmnGnbNbIommu", "", "CbsCmnGnbNbIommu")

									cmd.Flags().StringVar(&CbsCmnMemCtrlBankGroupSwapDdr4, "CbsCmnMemCtrlBankGroupSwapDdr4", "", "CbsCmnMemCtrlBankGroupSwapDdr4")

									cmd.Flags().StringVar(&CbsCmnMemMapBankInterleaveDdr4, "CbsCmnMemMapBankInterleaveDdr4", "", "CbsCmnMemMapBankInterleaveDdr4")

									cmd.Flags().StringVar(&CbsCmncTdpCtl, "CbsCmncTdpCtl", "", "CbsCmncTdpCtl")

									cmd.Flags().StringVar(&CbsDfCmnMemIntlv, "CbsDfCmnMemIntlv", "", "CbsDfCmnMemIntlv")

									cmd.Flags().StringVar(&CbsDfCmnMemIntlvSize, "CbsDfCmnMemIntlvSize", "", "CbsDfCmnMemIntlvSize")

									cmd.Flags().StringVar(&CdnEnable, "CdnEnable", "", "CdnEnable")

									cmd.Flags().StringVar(&CdnSupport, "CdnSupport", "", "CdnSupport")

									cmd.Flags().StringVar(&ChannelInterLeave, "ChannelInterLeave", "", "ChannelInterLeave")

									cmd.Flags().StringVar(&CiscoAdaptiveMemTraining, "CiscoAdaptiveMemTraining", "", "CiscoAdaptiveMemTraining")

									cmd.Flags().StringVar(&CiscoDebugLevel, "CiscoDebugLevel", "", "CiscoDebugLevel")

									cmd.Flags().StringVar(&CiscoOpromLaunchOptimization, "CiscoOpromLaunchOptimization", "", "CiscoOpromLaunchOptimization")

									cmd.Flags().StringVar(&CkeLowPolicy, "CkeLowPolicy", "", "CkeLowPolicy")

									cmd.Flags().StringVar(&ClosedLoopThermThrotl, "ClosedLoopThermThrotl", "", "ClosedLoopThermThrotl")

									cmd.Flags().StringVar(&CmciEnable, "CmciEnable", "", "CmciEnable")

									cmd.Flags().StringVar(&ConfigTdp, "ConfigTdp", "", "ConfigTdp")

									cmd.Flags().StringVar(&ConsoleRedirection, "ConsoleRedirection", "", "ConsoleRedirection")

									cmd.Flags().StringVar(&CoreMultiProcessing, "CoreMultiProcessing", "", "CoreMultiProcessing")

									cmd.Flags().StringVar(&CpuEnergyPerformance, "CpuEnergyPerformance", "", "CpuEnergyPerformance")

									cmd.Flags().StringVar(&CpuFrequencyFloor, "CpuFrequencyFloor", "", "CpuFrequencyFloor")

									cmd.Flags().StringVar(&CpuPerformance, "CpuPerformance", "", "CpuPerformance")

									cmd.Flags().StringVar(&CpuPowerManagement, "CpuPowerManagement", "", "CpuPowerManagement")

									cmd.Flags().StringVar(&DcpmmFirmwareDowngrade, "DcpmmFirmwareDowngrade", "", "DcpmmFirmwareDowngrade")

									cmd.Flags().StringVar(&DemandScrub, "DemandScrub", "", "DemandScrub")

									cmd.Flags().StringVar(&DirectCacheAccess, "DirectCacheAccess", "", "DirectCacheAccess")

									cmd.Flags().StringVar(&DramClockThrottling, "DramClockThrottling", "", "DramClockThrottling")

									cmd.Flags().StringVar(&DramRefreshRate, "DramRefreshRate", "", "DramRefreshRate")

									cmd.Flags().StringVar(&EnergyEfficientTurbo, "EnergyEfficientTurbo", "", "EnergyEfficientTurbo")

									cmd.Flags().StringVar(&EngPerfTuning, "EngPerfTuning", "", "EngPerfTuning")

									cmd.Flags().StringVar(&EnhancedIntelSpeedStepTech, "EnhancedIntelSpeedStepTech", "", "EnhancedIntelSpeedStepTech")

									cmd.Flags().StringVar(&EppProfile, "EppProfile", "", "EppProfile")

									cmd.Flags().StringVar(&ExecuteDisableBit, "ExecuteDisableBit", "", "ExecuteDisableBit")

									cmd.Flags().StringVar(&ExtendedApic, "ExtendedApic", "", "ExtendedApic")

									cmd.Flags().StringVar(&FlowControl, "FlowControl", "", "FlowControl")

									cmd.Flags().StringVar(&Frb2enable, "Frb2enable", "", "Frb2enable")

									cmd.Flags().StringVar(&HardwarePrefetch, "HardwarePrefetch", "", "HardwarePrefetch")

									cmd.Flags().StringVar(&HwpmEnable, "HwpmEnable", "", "HwpmEnable")

									cmd.Flags().StringVar(&ImcInterleave, "ImcInterleave", "", "ImcInterleave")

									cmd.Flags().StringVar(&IntelHyperThreadingTech, "IntelHyperThreadingTech", "", "IntelHyperThreadingTech")

									cmd.Flags().StringVar(&IntelSpeedSelect, "IntelSpeedSelect", "", "IntelSpeedSelect")

									cmd.Flags().StringVar(&IntelTurboBoostTech, "IntelTurboBoostTech", "", "IntelTurboBoostTech")

									cmd.Flags().StringVar(&IntelVirtualizationTechnology, "IntelVirtualizationTechnology", "", "IntelVirtualizationTechnology")

									cmd.Flags().StringVar(&IntelVtForDirectedIo, "IntelVtForDirectedIo", "", "IntelVtForDirectedIo")

									cmd.Flags().StringVar(&IntelVtdCoherencySupport, "IntelVtdCoherencySupport", "", "IntelVtdCoherencySupport")

									cmd.Flags().StringVar(&IntelVtdInterruptRemapping, "IntelVtdInterruptRemapping", "", "IntelVtdInterruptRemapping")

									cmd.Flags().StringVar(&IntelVtdPassThroughDmaSupport, "IntelVtdPassThroughDmaSupport", "", "IntelVtdPassThroughDmaSupport")

									cmd.Flags().StringVar(&IntelVtdatsSupport, "IntelVtdatsSupport", "", "IntelVtdatsSupport")

									cmd.Flags().StringVar(&IohErrorEnable, "IohErrorEnable", "", "IohErrorEnable")

									cmd.Flags().StringVar(&IohResource, "IohResource", "", "IohResource")

									cmd.Flags().StringVar(&IpPrefetch, "IpPrefetch", "", "IpPrefetch")

									cmd.Flags().StringVar(&Ipv4pxe, "Ipv4pxe", "", "Ipv4pxe")

									cmd.Flags().StringVar(&Ipv6pxe, "Ipv6pxe", "", "Ipv6pxe")

									cmd.Flags().StringVar(&KtiPrefetch, "KtiPrefetch", "", "KtiPrefetch")

									cmd.Flags().StringVar(&LegacyOsRedirection, "LegacyOsRedirection", "", "LegacyOsRedirection")

									cmd.Flags().StringVar(&LegacyUsbSupport, "LegacyUsbSupport", "", "LegacyUsbSupport")

									cmd.Flags().StringVar(&LlcPrefetch, "LlcPrefetch", "", "LlcPrefetch")

									cmd.Flags().StringVar(&LomPort0state, "LomPort0state", "", "LomPort0state")

									cmd.Flags().StringVar(&LomPort1state, "LomPort1state", "", "LomPort1state")

									cmd.Flags().StringVar(&LomPort2state, "LomPort2state", "", "LomPort2state")

									cmd.Flags().StringVar(&LomPort3state, "LomPort3state", "", "LomPort3state")

									cmd.Flags().StringVar(&LomPortsAllState, "LomPortsAllState", "", "LomPortsAllState")

									cmd.Flags().StringVar(&LvDdrMode, "LvDdrMode", "", "LvDdrMode")

									cmd.Flags().StringVar(&MakeDeviceNonBootable, "MakeDeviceNonBootable", "", "MakeDeviceNonBootable")

									cmd.Flags().StringVar(&MemoryInterLeave, "MemoryInterLeave", "", "MemoryInterLeave")

									cmd.Flags().StringVar(&MemoryMappedIoAbove4gb, "MemoryMappedIoAbove4gb", "", "MemoryMappedIoAbove4gb")

									cmd.Flags().StringVar(&MemorySizeLimit, "MemorySizeLimit", "", "MemorySizeLimit")

									cmd.Flags().StringVar(&MirroringMode, "MirroringMode", "", "MirroringMode")

									cmd.Flags().StringVar(&MmcfgBase, "MmcfgBase", "", "MmcfgBase")

									cmd.Flags().StringVar(&NetworkStack, "NetworkStack", "", "NetworkStack")

									cmd.Flags().StringVar(&NumaOptimized, "NumaOptimized", "", "NumaOptimized")

									cmd.Flags().StringVar(&Onboard10gbitLom, "Onboard10gbitLom", "", "Onboard10gbitLom")

									cmd.Flags().StringVar(&OnboardGbitLom, "OnboardGbitLom", "", "OnboardGbitLom")

									cmd.Flags().StringVar(&OnboardScuStorageSupport, "OnboardScuStorageSupport", "", "OnboardScuStorageSupport")

									cmd.Flags().StringVar(&OnboardScuStorageSwStack, "OnboardScuStorageSwStack", "", "OnboardScuStorageSwStack")

									cmd.Flags().StringVar(&OsBootWatchdogTimer, "OsBootWatchdogTimer", "", "OsBootWatchdogTimer")

									cmd.Flags().StringVar(&OsBootWatchdogTimerPolicy, "OsBootWatchdogTimerPolicy", "", "OsBootWatchdogTimerPolicy")

									cmd.Flags().StringVar(&OsBootWatchdogTimerTimeout, "OsBootWatchdogTimerTimeout", "", "OsBootWatchdogTimerTimeout")

									cmd.Flags().StringVar(&OutOfBandMgmtPort, "OutOfBandMgmtPort", "", "OutOfBandMgmtPort")

									cmd.Flags().StringVar(&PackageCstateLimit, "PackageCstateLimit", "", "PackageCstateLimit")

									cmd.Flags().StringVar(&PartialMirrorModeConfig, "PartialMirrorModeConfig", "", "PartialMirrorModeConfig")

									cmd.Flags().StringVar(&PartialMirrorPercent, "PartialMirrorPercent", "", "PartialMirrorPercent")

									cmd.Flags().StringVar(&PartialMirrorValue1, "PartialMirrorValue1", "", "PartialMirrorValue1")

									cmd.Flags().StringVar(&PartialMirrorValue2, "PartialMirrorValue2", "", "PartialMirrorValue2")

									cmd.Flags().StringVar(&PartialMirrorValue3, "PartialMirrorValue3", "", "PartialMirrorValue3")

									cmd.Flags().StringVar(&PartialMirrorValue4, "PartialMirrorValue4", "", "PartialMirrorValue4")

									cmd.Flags().StringVar(&PatrolScrub, "PatrolScrub", "", "PatrolScrub")

									cmd.Flags().StringVar(&PatrolScrubDuration, "PatrolScrubDuration", "", "PatrolScrubDuration")

									cmd.Flags().StringVar(&PcIeRasSupport, "PcIeRasSupport", "", "PcIeRasSupport")

									cmd.Flags().StringVar(&PcIeSsdHotPlugSupport, "PcIeSsdHotPlugSupport", "", "PcIeSsdHotPlugSupport")

									cmd.Flags().StringVar(&PchUsb30mode, "PchUsb30mode", "", "PchUsb30mode")

									cmd.Flags().StringVar(&PciOptionRoMs, "PciOptionRoMs", "", "PciOptionRoMs")

									cmd.Flags().StringVar(&PciRomClp, "PciRomClp", "", "PciRomClp")

									cmd.Flags().StringVar(&PopSupport, "PopSupport", "", "PopSupport")

									cmd.Flags().StringVar(&PostErrorPause, "PostErrorPause", "", "PostErrorPause")

									cmd.Flags().StringVar(&ProcessorC1e, "ProcessorC1e", "", "ProcessorC1e")

									cmd.Flags().StringVar(&ProcessorC3report, "ProcessorC3report", "", "ProcessorC3report")

									cmd.Flags().StringVar(&ProcessorC6report, "ProcessorC6report", "", "ProcessorC6report")

									cmd.Flags().StringVar(&ProcessorCstate, "ProcessorCstate", "", "ProcessorCstate")

									cmd.Flags().StringVar(&Psata, "Psata", "", "Psata")

									cmd.Flags().StringVar(&PstateCoordType, "PstateCoordType", "", "PstateCoordType")

									cmd.Flags().StringVar(&PuttyKeyPad, "PuttyKeyPad", "", "PuttyKeyPad")

									cmd.Flags().StringVar(&PwrPerfTuning, "PwrPerfTuning", "", "PwrPerfTuning")

									cmd.Flags().StringVar(&QpiLinkFrequency, "QpiLinkFrequency", "", "QpiLinkFrequency")

									cmd.Flags().StringVar(&QpiSnoopMode, "QpiSnoopMode", "", "QpiSnoopMode")

									cmd.Flags().StringVar(&RankInterLeave, "RankInterLeave", "", "RankInterLeave")

									cmd.Flags().StringVar(&RedirectionAfterPost, "RedirectionAfterPost", "", "RedirectionAfterPost")

									cmd.Flags().StringVar(&SataModeSelect, "SataModeSelect", "", "SataModeSelect")

									cmd.Flags().StringVar(&SelectMemoryRasConfiguration, "SelectMemoryRasConfiguration", "", "SelectMemoryRasConfiguration")

									cmd.Flags().StringVar(&SelectPprType, "SelectPprType", "", "SelectPprType")

									cmd.Flags().StringVar(&SerialPortAenable, "SerialPortAenable", "", "SerialPortAenable")

									cmd.Flags().StringVar(&SinglePctlEnable, "SinglePctlEnable", "", "SinglePctlEnable")

									cmd.Flags().StringVar(&Slot10linkSpeed, "Slot10linkSpeed", "", "Slot10linkSpeed")

									cmd.Flags().StringVar(&Slot10state, "Slot10state", "", "Slot10state")

									cmd.Flags().StringVar(&Slot11linkSpeed, "Slot11linkSpeed", "", "Slot11linkSpeed")

									cmd.Flags().StringVar(&Slot11state, "Slot11state", "", "Slot11state")

									cmd.Flags().StringVar(&Slot12linkSpeed, "Slot12linkSpeed", "", "Slot12linkSpeed")

									cmd.Flags().StringVar(&Slot12state, "Slot12state", "", "Slot12state")

									cmd.Flags().StringVar(&Slot13state, "Slot13state", "", "Slot13state")

									cmd.Flags().StringVar(&Slot14state, "Slot14state", "", "Slot14state")

									cmd.Flags().StringVar(&Slot1linkSpeed, "Slot1linkSpeed", "", "Slot1linkSpeed")

									cmd.Flags().StringVar(&Slot1state, "Slot1state", "", "Slot1state")

									cmd.Flags().StringVar(&Slot2linkSpeed, "Slot2linkSpeed", "", "Slot2linkSpeed")

									cmd.Flags().StringVar(&Slot2state, "Slot2state", "", "Slot2state")

									cmd.Flags().StringVar(&Slot3linkSpeed, "Slot3linkSpeed", "", "Slot3linkSpeed")

									cmd.Flags().StringVar(&Slot3state, "Slot3state", "", "Slot3state")

									cmd.Flags().StringVar(&Slot4linkSpeed, "Slot4linkSpeed", "", "Slot4linkSpeed")

									cmd.Flags().StringVar(&Slot4state, "Slot4state", "", "Slot4state")

									cmd.Flags().StringVar(&Slot5linkSpeed, "Slot5linkSpeed", "", "Slot5linkSpeed")

									cmd.Flags().StringVar(&Slot5state, "Slot5state", "", "Slot5state")

									cmd.Flags().StringVar(&Slot6linkSpeed, "Slot6linkSpeed", "", "Slot6linkSpeed")

									cmd.Flags().StringVar(&Slot6state, "Slot6state", "", "Slot6state")

									cmd.Flags().StringVar(&Slot7linkSpeed, "Slot7linkSpeed", "", "Slot7linkSpeed")

									cmd.Flags().StringVar(&Slot7state, "Slot7state", "", "Slot7state")

									cmd.Flags().StringVar(&Slot8linkSpeed, "Slot8linkSpeed", "", "Slot8linkSpeed")

									cmd.Flags().StringVar(&Slot8state, "Slot8state", "", "Slot8state")

									cmd.Flags().StringVar(&Slot9linkSpeed, "Slot9linkSpeed", "", "Slot9linkSpeed")

									cmd.Flags().StringVar(&Slot9state, "Slot9state", "", "Slot9state")

									cmd.Flags().StringVar(&SlotFlomLinkSpeed, "SlotFlomLinkSpeed", "", "SlotFlomLinkSpeed")

									cmd.Flags().StringVar(&SlotFrontNvme1linkSpeed, "SlotFrontNvme1linkSpeed", "", "SlotFrontNvme1linkSpeed")

									cmd.Flags().StringVar(&SlotFrontNvme2linkSpeed, "SlotFrontNvme2linkSpeed", "", "SlotFrontNvme2linkSpeed")

									cmd.Flags().StringVar(&SlotFrontSlot5linkSpeed, "SlotFrontSlot5linkSpeed", "", "SlotFrontSlot5linkSpeed")

									cmd.Flags().StringVar(&SlotFrontSlot6linkSpeed, "SlotFrontSlot6linkSpeed", "", "SlotFrontSlot6linkSpeed")

									cmd.Flags().StringVar(&SlotGpu1state, "SlotGpu1state", "", "SlotGpu1state")

									cmd.Flags().StringVar(&SlotGpu2state, "SlotGpu2state", "", "SlotGpu2state")

									cmd.Flags().StringVar(&SlotGpu3state, "SlotGpu3state", "", "SlotGpu3state")

									cmd.Flags().StringVar(&SlotGpu4state, "SlotGpu4state", "", "SlotGpu4state")

									cmd.Flags().StringVar(&SlotGpu5state, "SlotGpu5state", "", "SlotGpu5state")

									cmd.Flags().StringVar(&SlotGpu6state, "SlotGpu6state", "", "SlotGpu6state")

									cmd.Flags().StringVar(&SlotGpu7state, "SlotGpu7state", "", "SlotGpu7state")

									cmd.Flags().StringVar(&SlotGpu8state, "SlotGpu8state", "", "SlotGpu8state")

									cmd.Flags().StringVar(&SlotHbaLinkSpeed, "SlotHbaLinkSpeed", "", "SlotHbaLinkSpeed")

									cmd.Flags().StringVar(&SlotHbaState, "SlotHbaState", "", "SlotHbaState")

									cmd.Flags().StringVar(&SlotLom1link, "SlotLom1link", "", "SlotLom1link")

									cmd.Flags().StringVar(&SlotLom2link, "SlotLom2link", "", "SlotLom2link")

									cmd.Flags().StringVar(&SlotMezzState, "SlotMezzState", "", "SlotMezzState")

									cmd.Flags().StringVar(&SlotMlomLinkSpeed, "SlotMlomLinkSpeed", "", "SlotMlomLinkSpeed")

									cmd.Flags().StringVar(&SlotMlomState, "SlotMlomState", "", "SlotMlomState")

									cmd.Flags().StringVar(&SlotMraidLinkSpeed, "SlotMraidLinkSpeed", "", "SlotMraidLinkSpeed")

									cmd.Flags().StringVar(&SlotMraidState, "SlotMraidState", "", "SlotMraidState")

									cmd.Flags().StringVar(&SlotN10state, "SlotN10state", "", "SlotN10state")

									cmd.Flags().StringVar(&SlotN11state, "SlotN11state", "", "SlotN11state")

									cmd.Flags().StringVar(&SlotN12state, "SlotN12state", "", "SlotN12state")

									cmd.Flags().StringVar(&SlotN13state, "SlotN13state", "", "SlotN13state")

									cmd.Flags().StringVar(&SlotN14state, "SlotN14state", "", "SlotN14state")

									cmd.Flags().StringVar(&SlotN15state, "SlotN15state", "", "SlotN15state")

									cmd.Flags().StringVar(&SlotN16state, "SlotN16state", "", "SlotN16state")

									cmd.Flags().StringVar(&SlotN17state, "SlotN17state", "", "SlotN17state")

									cmd.Flags().StringVar(&SlotN18state, "SlotN18state", "", "SlotN18state")

									cmd.Flags().StringVar(&SlotN19state, "SlotN19state", "", "SlotN19state")

									cmd.Flags().StringVar(&SlotN1state, "SlotN1state", "", "SlotN1state")

									cmd.Flags().StringVar(&SlotN20state, "SlotN20state", "", "SlotN20state")

									cmd.Flags().StringVar(&SlotN21state, "SlotN21state", "", "SlotN21state")

									cmd.Flags().StringVar(&SlotN22state, "SlotN22state", "", "SlotN22state")

									cmd.Flags().StringVar(&SlotN23state, "SlotN23state", "", "SlotN23state")

									cmd.Flags().StringVar(&SlotN24state, "SlotN24state", "", "SlotN24state")

									cmd.Flags().StringVar(&SlotN2state, "SlotN2state", "", "SlotN2state")

									cmd.Flags().StringVar(&SlotN3state, "SlotN3state", "", "SlotN3state")

									cmd.Flags().StringVar(&SlotN4state, "SlotN4state", "", "SlotN4state")

									cmd.Flags().StringVar(&SlotN5state, "SlotN5state", "", "SlotN5state")

									cmd.Flags().StringVar(&SlotN6state, "SlotN6state", "", "SlotN6state")

									cmd.Flags().StringVar(&SlotN7state, "SlotN7state", "", "SlotN7state")

									cmd.Flags().StringVar(&SlotN8state, "SlotN8state", "", "SlotN8state")

									cmd.Flags().StringVar(&SlotN9state, "SlotN9state", "", "SlotN9state")

									cmd.Flags().StringVar(&SlotRaidLinkSpeed, "SlotRaidLinkSpeed", "", "SlotRaidLinkSpeed")

									cmd.Flags().StringVar(&SlotRaidState, "SlotRaidState", "", "SlotRaidState")

									cmd.Flags().StringVar(&SlotRearNvme1linkSpeed, "SlotRearNvme1linkSpeed", "", "SlotRearNvme1linkSpeed")

									cmd.Flags().StringVar(&SlotRearNvme1state, "SlotRearNvme1state", "", "SlotRearNvme1state")

									cmd.Flags().StringVar(&SlotRearNvme2linkSpeed, "SlotRearNvme2linkSpeed", "", "SlotRearNvme2linkSpeed")

									cmd.Flags().StringVar(&SlotRearNvme2state, "SlotRearNvme2state", "", "SlotRearNvme2state")

									cmd.Flags().StringVar(&SlotRearNvme3state, "SlotRearNvme3state", "", "SlotRearNvme3state")

									cmd.Flags().StringVar(&SlotRearNvme4state, "SlotRearNvme4state", "", "SlotRearNvme4state")

									cmd.Flags().StringVar(&SlotRearNvme5state, "SlotRearNvme5state", "", "SlotRearNvme5state")

									cmd.Flags().StringVar(&SlotRearNvme6state, "SlotRearNvme6state", "", "SlotRearNvme6state")

									cmd.Flags().StringVar(&SlotRearNvme7state, "SlotRearNvme7state", "", "SlotRearNvme7state")

									cmd.Flags().StringVar(&SlotRearNvme8state, "SlotRearNvme8state", "", "SlotRearNvme8state")

									cmd.Flags().StringVar(&SlotRiser1linkSpeed, "SlotRiser1linkSpeed", "", "SlotRiser1linkSpeed")

									cmd.Flags().StringVar(&SlotRiser1slot1linkSpeed, "SlotRiser1slot1linkSpeed", "", "SlotRiser1slot1linkSpeed")

									cmd.Flags().StringVar(&SlotRiser1slot2linkSpeed, "SlotRiser1slot2linkSpeed", "", "SlotRiser1slot2linkSpeed")

									cmd.Flags().StringVar(&SlotRiser1slot3linkSpeed, "SlotRiser1slot3linkSpeed", "", "SlotRiser1slot3linkSpeed")

									cmd.Flags().StringVar(&SlotRiser2linkSpeed, "SlotRiser2linkSpeed", "", "SlotRiser2linkSpeed")

									cmd.Flags().StringVar(&SlotRiser2slot4linkSpeed, "SlotRiser2slot4linkSpeed", "", "SlotRiser2slot4linkSpeed")

									cmd.Flags().StringVar(&SlotRiser2slot5linkSpeed, "SlotRiser2slot5linkSpeed", "", "SlotRiser2slot5linkSpeed")

									cmd.Flags().StringVar(&SlotRiser2slot6linkSpeed, "SlotRiser2slot6linkSpeed", "", "SlotRiser2slot6linkSpeed")

									cmd.Flags().StringVar(&SlotSasState, "SlotSasState", "", "SlotSasState")

									cmd.Flags().StringVar(&SlotSsdSlot1linkSpeed, "SlotSsdSlot1linkSpeed", "", "SlotSsdSlot1linkSpeed")

									cmd.Flags().StringVar(&SlotSsdSlot2linkSpeed, "SlotSsdSlot2linkSpeed", "", "SlotSsdSlot2linkSpeed")

									cmd.Flags().StringVar(&Smee, "Smee", "", "Smee")

									cmd.Flags().StringVar(&SmtMode, "SmtMode", "", "SmtMode")

									cmd.Flags().StringVar(&Snc, "Snc", "", "Snc")

									cmd.Flags().StringVar(&SparingMode, "SparingMode", "", "SparingMode")

									cmd.Flags().StringVar(&SrIov, "SrIov", "", "SrIov")

									cmd.Flags().StringVar(&StreamerPrefetch, "StreamerPrefetch", "", "StreamerPrefetch")

									cmd.Flags().StringVar(&SvmMode, "SvmMode", "", "SvmMode")

									cmd.Flags().StringVar(&TerminalType, "TerminalType", "", "TerminalType")

									cmd.Flags().StringVar(&TpmControl, "TpmControl", "", "TpmControl")

									cmd.Flags().StringVar(&TpmSupport, "TpmSupport", "", "TpmSupport")

									cmd.Flags().StringVar(&TxtSupport, "TxtSupport", "", "TxtSupport")

									cmd.Flags().StringVar(&UcsmBootOrderRule, "UcsmBootOrderRule", "", "UcsmBootOrderRule")

									cmd.Flags().StringVar(&UsbEmul6064, "UsbEmul6064", "", "UsbEmul6064")

									cmd.Flags().StringVar(&UsbPortFront, "UsbPortFront", "", "UsbPortFront")

									cmd.Flags().StringVar(&UsbPortInternal, "UsbPortInternal", "", "UsbPortInternal")

									cmd.Flags().StringVar(&UsbPortKvm, "UsbPortKvm", "", "UsbPortKvm")

									cmd.Flags().StringVar(&UsbPortRear, "UsbPortRear", "", "UsbPortRear")

									cmd.Flags().StringVar(&UsbPortSdCard, "UsbPortSdCard", "", "UsbPortSdCard")

									cmd.Flags().StringVar(&UsbPortVmedia, "UsbPortVmedia", "", "UsbPortVmedia")

									cmd.Flags().StringVar(&UsbXhciSupport, "UsbXhciSupport", "", "UsbXhciSupport")

									cmd.Flags().StringVar(&VgaPriority, "VgaPriority", "", "VgaPriority")

									cmd.Flags().StringVar(&VmdEnable, "VmdEnable", "", "VmdEnable")

									cmd.Flags().StringVar(&WorkLoadConfig, "WorkLoadConfig", "", "WorkLoadConfig")

									cmd.Flags().StringVar(&XptPrefetch, "XptPrefetch", "", "XptPrefetch")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var InitSeq string

									var InitTs string

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var RunningFirmware with unknown data type []FirmwareRunningFirmwareRelationship

									cmd := &cobra.Command{
										Use: "unit",

										Short: "Update a 'bios.Unit' resource.",
										Long: `Update a 'bios.Unit' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.BiosApi.PatchBiosUnit(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&InitSeq, "InitSeq", "", "InitSeq")

									cmd.Flags().StringVar(&InitTs, "InitTs", "", "InitTs")

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship
									if isMoRef(openapi.ComputeBladeRelationship{}) {
										cmd.Flags().String("ComputeBlade", "", "ComputeBlade")
									}

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("ComputeRackUnit", "", "ComputeRackUnit")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "boot",

								Short: "Update Boot resource(s)",
								Long: `Update Boot resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var ConfiguredBootMode string

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "devicebootmode",

										Short: "Update a 'boot.DeviceBootMode' resource.",
										Long: `Update a 'boot.DeviceBootMode' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.BootApi.PatchBootDeviceBootMode(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&ConfiguredBootMode, "ConfiguredBootMode", "", "ConfiguredBootMode")

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("ComputeRackUnit", "", "ComputeRackUnit")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var BootDevices with unknown data type []BootDeviceBase

									var ConfiguredBootMode string

									var EnforceUefiSecureBoot bool

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "precisionpolicy",

										Short: "Update a 'boot.PrecisionPolicy' resource.",
										Long: `Update a 'boot.PrecisionPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.BootApi.PatchBootPrecisionPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&ConfiguredBootMode, "ConfiguredBootMode", "", "ConfiguredBootMode")

									cmd.Flags().BoolVar(&EnforceUefiSecureBoot, "EnforceUefiSecureBoot", false, "EnforceUefiSecureBoot")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "compute",

								Short: "Update Compute resource(s)",
								Long: `Update Compute resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var AdminPowerState string

									var AssetTag string

									//Skipping var AvailableMemory with unknown data type int64

									//Skipping var FaultSummary with unknown data type int64

									//Skipping var KvmIpAddresses with unknown data type []ComputeIpAddress

									var MemorySpeed string

									var MgmtIpAddress string

									//Skipping var NumAdaptors with unknown data type int64

									//Skipping var NumCpuCores with unknown data type int64

									//Skipping var NumCpuCoresEnabled with unknown data type int64

									//Skipping var NumCpus with unknown data type int64

									//Skipping var NumEthHostInterfaces with unknown data type int64

									//Skipping var NumFcHostInterfaces with unknown data type int64

									//Skipping var NumThreads with unknown data type int64

									var OperPowerState string

									var OperState string

									var Operability string

									var PlatformType string

									var Presence string

									var ServiceProfile string

									//Skipping var TotalMemory with unknown data type int64

									var UserLabel string

									var Uuid string

									var ChassisId string

									var ScaledMode string

									//Skipping var SlotId with unknown data type int64

									//Skipping var Adapters with unknown data type []AdapterUnitRelationship

									//Skipping var BiosUnits with unknown data type []BiosUnitRelationship

									//Skipping var Bmc with unknown data type ManagementControllerRelationship

									//Skipping var Board with unknown data type ComputeBoardRelationship

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship

									//Skipping var EquipmentIoExpanders with unknown data type []EquipmentIoExpanderRelationship

									//Skipping var GenericInventoryHolders with unknown data type []InventoryGenericInventoryHolderRelationship

									//Skipping var LocatorLed with unknown data type EquipmentLocatorLedRelationship

									//Skipping var PciDevices with unknown data type []PciDeviceRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StorageEnclosures with unknown data type []StorageEnclosureRelationship

									//Skipping var TopSystem with unknown data type TopSystemRelationship

									cmd := &cobra.Command{
										Use: "blade",

										Short: "Update a 'compute.Blade' resource.",
										Long: `Update a 'compute.Blade' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ComputeApi.PatchComputeBlade(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&AdminPowerState, "AdminPowerState", "", "AdminPowerState")

									cmd.Flags().StringVar(&AssetTag, "AssetTag", "", "AssetTag")

									cmd.Flags().StringVar(&MemorySpeed, "MemorySpeed", "", "MemorySpeed")

									cmd.Flags().StringVar(&MgmtIpAddress, "MgmtIpAddress", "", "MgmtIpAddress")

									cmd.Flags().StringVar(&OperPowerState, "OperPowerState", "", "OperPowerState")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&Operability, "Operability", "", "Operability")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&ServiceProfile, "ServiceProfile", "", "ServiceProfile")

									cmd.Flags().StringVar(&UserLabel, "UserLabel", "", "UserLabel")

									cmd.Flags().StringVar(&Uuid, "Uuid", "", "Uuid")

									cmd.Flags().StringVar(&ChassisId, "ChassisId", "", "ChassisId")

									cmd.Flags().StringVar(&ScaledMode, "ScaledMode", "", "ScaledMode")

									//Skipping var Bmc with unknown data type ManagementControllerRelationship
									if isMoRef(openapi.ManagementControllerRelationship{}) {
										cmd.Flags().String("Bmc", "", "Bmc")
									}

									//Skipping var Board with unknown data type ComputeBoardRelationship
									if isMoRef(openapi.ComputeBoardRelationship{}) {
										cmd.Flags().String("Board", "", "Board")
									}

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship
									if isMoRef(openapi.EquipmentChassisRelationship{}) {
										cmd.Flags().String("EquipmentChassis", "", "EquipmentChassis")
									}

									//Skipping var LocatorLed with unknown data type EquipmentLocatorLedRelationship
									if isMoRef(openapi.EquipmentLocatorLedRelationship{}) {
										cmd.Flags().String("LocatorLed", "", "LocatorLed")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var TopSystem with unknown data type TopSystemRelationship
									if isMoRef(openapi.TopSystemRelationship{}) {
										cmd.Flags().String("TopSystem", "", "TopSystem")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									//Skipping var BoardId with unknown data type int64

									var CpuTypeController string

									var OperPowerState string

									var Presence string

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship

									//Skipping var EquipmentTpms with unknown data type []EquipmentTpmRelationship

									//Skipping var GraphicsCards with unknown data type []GraphicsCardRelationship

									//Skipping var MemoryArrays with unknown data type []MemoryArrayRelationship

									//Skipping var PciCoprocessorCards with unknown data type []PciCoprocessorCardRelationship

									//Skipping var PciSwitch with unknown data type []PciSwitchRelationship

									//Skipping var PersistentMemoryConfiguration with unknown data type MemoryPersistentMemoryConfigurationRelationship

									//Skipping var Processors with unknown data type []ProcessorUnitRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var SecurityUnits with unknown data type []SecurityUnitRelationship

									//Skipping var StorageControllers with unknown data type []StorageControllerRelationship

									//Skipping var StorageFlexFlashControllers with unknown data type []StorageFlexFlashControllerRelationship

									//Skipping var StorageFlexUtilControllers with unknown data type []StorageFlexUtilControllerRelationship

									cmd := &cobra.Command{
										Use: "board",

										Short: "Update a 'compute.Board' resource.",
										Long: `Update a 'compute.Board' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ComputeApi.PatchComputeBoard(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&CpuTypeController, "CpuTypeController", "", "CpuTypeController")

									cmd.Flags().StringVar(&OperPowerState, "OperPowerState", "", "OperPowerState")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship
									if isMoRef(openapi.ComputeBladeRelationship{}) {
										cmd.Flags().String("ComputeBlade", "", "ComputeBlade")
									}

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("ComputeRackUnit", "", "ComputeRackUnit")
									}

									//Skipping var PersistentMemoryConfiguration with unknown data type MemoryPersistentMemoryConfigurationRelationship
									if isMoRef(openapi.MemoryPersistentMemoryConfigurationRelationship{}) {
										cmd.Flags().String("PersistentMemoryConfiguration", "", "PersistentMemoryConfiguration")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var AdminPowerState string

									var AssetTag string

									//Skipping var AvailableMemory with unknown data type int64

									//Skipping var FaultSummary with unknown data type int64

									//Skipping var KvmIpAddresses with unknown data type []ComputeIpAddress

									var MemorySpeed string

									var MgmtIpAddress string

									//Skipping var NumAdaptors with unknown data type int64

									//Skipping var NumCpuCores with unknown data type int64

									//Skipping var NumCpuCoresEnabled with unknown data type int64

									//Skipping var NumCpus with unknown data type int64

									//Skipping var NumEthHostInterfaces with unknown data type int64

									//Skipping var NumFcHostInterfaces with unknown data type int64

									//Skipping var NumThreads with unknown data type int64

									var OperPowerState string

									var OperState string

									var Operability string

									var PlatformType string

									var Presence string

									var ServiceProfile string

									//Skipping var TotalMemory with unknown data type int64

									var UserLabel string

									var Uuid string

									//Skipping var ServerId with unknown data type int64

									//Skipping var Adapters with unknown data type []AdapterUnitRelationship

									//Skipping var BiosBootmode with unknown data type BiosBootModeRelationship

									//Skipping var Biosunits with unknown data type []BiosUnitRelationship

									//Skipping var Bmc with unknown data type ManagementControllerRelationship

									//Skipping var Board with unknown data type ComputeBoardRelationship

									//Skipping var BootDeviceBootmode with unknown data type BootDeviceBootModeRelationship

									//Skipping var Fanmodules with unknown data type []EquipmentFanModuleRelationship

									//Skipping var GenericInventoryHolders with unknown data type []InventoryGenericInventoryHolderRelationship

									//Skipping var LocatorLed with unknown data type EquipmentLocatorLedRelationship

									//Skipping var PciDevices with unknown data type []PciDeviceRelationship

									//Skipping var Psus with unknown data type []EquipmentPsuRelationship

									//Skipping var RackEnclosureSlot with unknown data type EquipmentRackEnclosureSlotRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var SasExpanders with unknown data type []StorageSasExpanderRelationship

									//Skipping var StorageEnclosures with unknown data type []StorageEnclosureRelationship

									//Skipping var TopSystem with unknown data type TopSystemRelationship

									cmd := &cobra.Command{
										Use: "rackunit",

										Short: "Update a 'compute.RackUnit' resource.",
										Long: `Update a 'compute.RackUnit' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ComputeApi.PatchComputeRackUnit(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&AdminPowerState, "AdminPowerState", "", "AdminPowerState")

									cmd.Flags().StringVar(&AssetTag, "AssetTag", "", "AssetTag")

									cmd.Flags().StringVar(&MemorySpeed, "MemorySpeed", "", "MemorySpeed")

									cmd.Flags().StringVar(&MgmtIpAddress, "MgmtIpAddress", "", "MgmtIpAddress")

									cmd.Flags().StringVar(&OperPowerState, "OperPowerState", "", "OperPowerState")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&Operability, "Operability", "", "Operability")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&ServiceProfile, "ServiceProfile", "", "ServiceProfile")

									cmd.Flags().StringVar(&UserLabel, "UserLabel", "", "UserLabel")

									cmd.Flags().StringVar(&Uuid, "Uuid", "", "Uuid")

									//Skipping var BiosBootmode with unknown data type BiosBootModeRelationship
									if isMoRef(openapi.BiosBootModeRelationship{}) {
										cmd.Flags().String("BiosBootmode", "", "BiosBootmode")
									}

									//Skipping var Bmc with unknown data type ManagementControllerRelationship
									if isMoRef(openapi.ManagementControllerRelationship{}) {
										cmd.Flags().String("Bmc", "", "Bmc")
									}

									//Skipping var Board with unknown data type ComputeBoardRelationship
									if isMoRef(openapi.ComputeBoardRelationship{}) {
										cmd.Flags().String("Board", "", "Board")
									}

									//Skipping var BootDeviceBootmode with unknown data type BootDeviceBootModeRelationship
									if isMoRef(openapi.BootDeviceBootModeRelationship{}) {
										cmd.Flags().String("BootDeviceBootmode", "", "BootDeviceBootmode")
									}

									//Skipping var LocatorLed with unknown data type EquipmentLocatorLedRelationship
									if isMoRef(openapi.EquipmentLocatorLedRelationship{}) {
										cmd.Flags().String("LocatorLed", "", "LocatorLed")
									}

									//Skipping var RackEnclosureSlot with unknown data type EquipmentRackEnclosureSlotRelationship
									if isMoRef(openapi.EquipmentRackEnclosureSlotRelationship{}) {
										cmd.Flags().String("RackEnclosureSlot", "", "RackEnclosureSlot")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var TopSystem with unknown data type TopSystemRelationship
									if isMoRef(openapi.TopSystemRelationship{}) {
										cmd.Flags().String("TopSystem", "", "TopSystem")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var AdminLocatorLedState string

									var AdminPowerState string

									var ConfigState string

									var OneTimeBootDevice string

									//Skipping var PersistentMemoryOperation with unknown data type ComputePersistentMemoryOperation

									//Skipping var ServerConfig with unknown data type ComputeServerConfig

									//Skipping var LocatorLed with unknown data type EquipmentLocatorLedRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var Server with unknown data type ComputeRackUnitRelationship

									cmd := &cobra.Command{
										Use: "serversetting",

										Short: "Update a 'compute.ServerSetting' resource.",
										Long: `Update a 'compute.ServerSetting' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ComputeApi.PatchComputeServerSetting(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&AdminLocatorLedState, "AdminLocatorLedState", "", "AdminLocatorLedState")

									cmd.Flags().StringVar(&AdminPowerState, "AdminPowerState", "", "AdminPowerState")

									cmd.Flags().StringVar(&ConfigState, "ConfigState", "", "ConfigState")

									cmd.Flags().StringVar(&OneTimeBootDevice, "OneTimeBootDevice", "", "OneTimeBootDevice")

									//Skipping var PersistentMemoryOperation with unknown data type ComputePersistentMemoryOperation
									if isMoRef(openapi.ComputePersistentMemoryOperation{}) {
										cmd.Flags().String("PersistentMemoryOperation", "", "PersistentMemoryOperation")
									}

									//Skipping var ServerConfig with unknown data type ComputeServerConfig
									if isMoRef(openapi.ComputeServerConfig{}) {
										cmd.Flags().String("ServerConfig", "", "ServerConfig")
									}

									//Skipping var LocatorLed with unknown data type EquipmentLocatorLedRelationship
									if isMoRef(openapi.EquipmentLocatorLedRelationship{}) {
										cmd.Flags().String("LocatorLed", "", "LocatorLed")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var Server with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("Server", "", "Server")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "deviceconnector",

								Short: "Update Deviceconnector resource(s)",
								Long: `Update Deviceconnector resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var LockoutEnabled bool

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "policy",

										Short: "Update a 'deviceconnector.Policy' resource.",
										Long: `Update a 'deviceconnector.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.DeviceconnectorApi.PatchDeviceconnectorPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&LockoutEnabled, "LockoutEnabled", false, "LockoutEnabled")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "equipment",

								Short: "Update Equipment resource(s)",
								Long: `Update Equipment resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									//Skipping var ChassisId with unknown data type int64

									var ConnectionPath string

									var ConnectionStatus string

									var Description string

									//Skipping var FaultSummary with unknown data type int64

									var Name string

									var OperState string

									var PartNumber string

									var Pid string

									var PlatformType string

									var ProductName string

									var Sku string

									var Vid string

									//Skipping var Blades with unknown data type []ComputeBladeRelationship

									//Skipping var Fanmodules with unknown data type []EquipmentFanModuleRelationship

									//Skipping var Ioms with unknown data type []EquipmentIoCardRelationship

									//Skipping var Psus with unknown data type []EquipmentPsuRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var Sasexpanders with unknown data type []StorageSasExpanderRelationship

									//Skipping var Siocs with unknown data type []EquipmentSystemIoControllerRelationship

									//Skipping var StorageEnclosures with unknown data type []StorageEnclosureRelationship

									cmd := &cobra.Command{
										Use: "chassis",

										Short: "Update a 'equipment.Chassis' resource.",
										Long: `Update a 'equipment.Chassis' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.PatchEquipmentChassis(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&ConnectionPath, "ConnectionPath", "", "ConnectionPath")

									cmd.Flags().StringVar(&ConnectionStatus, "ConnectionStatus", "", "ConnectionStatus")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&PartNumber, "PartNumber", "", "PartNumber")

									cmd.Flags().StringVar(&Pid, "Pid", "", "Pid")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									cmd.Flags().StringVar(&ProductName, "ProductName", "", "ProductName")

									cmd.Flags().StringVar(&Sku, "Sku", "", "Sku")

									cmd.Flags().StringVar(&Vid, "Vid", "", "Vid")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var Description string

									//Skipping var FanId with unknown data type int64

									//Skipping var FanModuleId with unknown data type int64

									//Skipping var ModuleId with unknown data type int64

									var OperState string

									var PartNumber string

									var Pid string

									var Presence string

									var Sku string

									//Skipping var TrayId with unknown data type int64

									var Vid string

									//Skipping var EquipmentFanModule with unknown data type EquipmentFanModuleRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "fan",

										Short: "Update a 'equipment.Fan' resource.",
										Long: `Update a 'equipment.Fan' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.PatchEquipmentFan(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&PartNumber, "PartNumber", "", "PartNumber")

									cmd.Flags().StringVar(&Pid, "Pid", "", "Pid")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&Sku, "Sku", "", "Sku")

									cmd.Flags().StringVar(&Vid, "Vid", "", "Vid")

									//Skipping var EquipmentFanModule with unknown data type EquipmentFanModuleRelationship
									if isMoRef(openapi.EquipmentFanModuleRelationship{}) {
										cmd.Flags().String("EquipmentFanModule", "", "EquipmentFanModule")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var Description string

									//Skipping var ModuleId with unknown data type int64

									var OperState string

									var PartNumber string

									var Pid string

									var Presence string

									var Sku string

									//Skipping var TrayId with unknown data type int64

									var Vid string

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship

									//Skipping var EquipmentRackEnclosure with unknown data type EquipmentRackEnclosureRelationship

									//Skipping var Fans with unknown data type []EquipmentFanRelationship

									//Skipping var NetworkElement with unknown data type NetworkElementRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "fanmodule",

										Short: "Update a 'equipment.FanModule' resource.",
										Long: `Update a 'equipment.FanModule' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.PatchEquipmentFanModule(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&PartNumber, "PartNumber", "", "PartNumber")

									cmd.Flags().StringVar(&Pid, "Pid", "", "Pid")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&Sku, "Sku", "", "Sku")

									cmd.Flags().StringVar(&Vid, "Vid", "", "Vid")

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("ComputeRackUnit", "", "ComputeRackUnit")
									}

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship
									if isMoRef(openapi.EquipmentChassisRelationship{}) {
										cmd.Flags().String("EquipmentChassis", "", "EquipmentChassis")
									}

									//Skipping var EquipmentRackEnclosure with unknown data type EquipmentRackEnclosureRelationship
									if isMoRef(openapi.EquipmentRackEnclosureRelationship{}) {
										cmd.Flags().String("EquipmentRackEnclosure", "", "EquipmentRackEnclosure")
									}

									//Skipping var NetworkElement with unknown data type NetworkElementRelationship
									if isMoRef(openapi.NetworkElementRelationship{}) {
										cmd.Flags().String("NetworkElement", "", "NetworkElement")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var OperState string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "fex",

										Short: "Update a 'equipment.Fex' resource.",
										Long: `Update a 'equipment.Fex' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.PatchEquipmentFex(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var OperState string

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "iocard",

										Short: "Update a 'equipment.IoCard' resource.",
										Long: `Update a 'equipment.IoCard' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.PatchEquipmentIoCard(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship
									if isMoRef(openapi.EquipmentChassisRelationship{}) {
										cmd.Flags().String("EquipmentChassis", "", "EquipmentChassis")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var OperState string

									var Presence string

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "ioexpander",

										Short: "Update a 'equipment.IoExpander' resource.",
										Long: `Update a 'equipment.IoExpander' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.PatchEquipmentIoExpander(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship
									if isMoRef(openapi.ComputeBladeRelationship{}) {
										cmd.Flags().String("ComputeBlade", "", "ComputeBlade")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Color string

									var OperState string

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StoragePhysicalDisk with unknown data type StoragePhysicalDiskRelationship

									cmd := &cobra.Command{
										Use: "locatorled",

										Short: "Update a 'equipment.LocatorLed' resource.",
										Long: `Update a 'equipment.LocatorLed' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.PatchEquipmentLocatorLed(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Color, "Color", "", "Color")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship
									if isMoRef(openapi.ComputeBladeRelationship{}) {
										cmd.Flags().String("ComputeBlade", "", "ComputeBlade")
									}

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("ComputeRackUnit", "", "ComputeRackUnit")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StoragePhysicalDisk with unknown data type StoragePhysicalDiskRelationship
									if isMoRef(openapi.StoragePhysicalDiskRelationship{}) {
										cmd.Flags().String("StoragePhysicalDisk", "", "StoragePhysicalDisk")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var Description string

									var OperState string

									var PartNumber string

									var Pid string

									var Presence string

									var PsuFwVersion string

									//Skipping var PsuId with unknown data type int64

									var PsuInputSrc string

									var PsuType string

									var PsuWattage string

									var Sku string

									var Vid string

									var Voltage string

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship

									//Skipping var EquipmentRackEnclosure with unknown data type EquipmentRackEnclosureRelationship

									//Skipping var NetworkElement with unknown data type NetworkElementRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "psu",

										Short: "Update a 'equipment.Psu' resource.",
										Long: `Update a 'equipment.Psu' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.PatchEquipmentPsu(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&PartNumber, "PartNumber", "", "PartNumber")

									cmd.Flags().StringVar(&Pid, "Pid", "", "Pid")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&PsuFwVersion, "PsuFwVersion", "", "PsuFwVersion")

									cmd.Flags().StringVar(&PsuInputSrc, "PsuInputSrc", "", "PsuInputSrc")

									cmd.Flags().StringVar(&PsuType, "PsuType", "", "PsuType")

									cmd.Flags().StringVar(&PsuWattage, "PsuWattage", "", "PsuWattage")

									cmd.Flags().StringVar(&Sku, "Sku", "", "Sku")

									cmd.Flags().StringVar(&Vid, "Vid", "", "Vid")

									cmd.Flags().StringVar(&Voltage, "Voltage", "", "Voltage")

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("ComputeRackUnit", "", "ComputeRackUnit")
									}

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship
									if isMoRef(openapi.EquipmentChassisRelationship{}) {
										cmd.Flags().String("EquipmentChassis", "", "EquipmentChassis")
									}

									//Skipping var EquipmentRackEnclosure with unknown data type EquipmentRackEnclosureRelationship
									if isMoRef(openapi.EquipmentRackEnclosureRelationship{}) {
										cmd.Flags().String("EquipmentRackEnclosure", "", "EquipmentRackEnclosure")
									}

									//Skipping var NetworkElement with unknown data type NetworkElementRelationship
									if isMoRef(openapi.NetworkElementRelationship{}) {
										cmd.Flags().String("NetworkElement", "", "NetworkElement")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									//Skipping var EnclosureId with unknown data type int64

									//Skipping var Fanmodules with unknown data type []EquipmentFanModuleRelationship

									//Skipping var Psus with unknown data type []EquipmentPsuRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var Slots with unknown data type []EquipmentRackEnclosureSlotRelationship

									cmd := &cobra.Command{
										Use: "rackenclosure",

										Short: "Update a 'equipment.RackEnclosure' resource.",
										Long: `Update a 'equipment.RackEnclosure' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.PatchEquipmentRackEnclosure(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									//Skipping var RackId with unknown data type int64

									var RackUnitDn string

									//Skipping var EquipmentRackEnclosure with unknown data type EquipmentRackEnclosureRelationship

									//Skipping var RackUnit with unknown data type ComputeRackUnitRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "rackenclosureslot",

										Short: "Update a 'equipment.RackEnclosureSlot' resource.",
										Long: `Update a 'equipment.RackEnclosureSlot' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.PatchEquipmentRackEnclosureSlot(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&RackUnitDn, "RackUnitDn", "", "RackUnitDn")

									//Skipping var EquipmentRackEnclosure with unknown data type EquipmentRackEnclosureRelationship
									if isMoRef(openapi.EquipmentRackEnclosureRelationship{}) {
										cmd.Flags().String("EquipmentRackEnclosure", "", "EquipmentRackEnclosure")
									}

									//Skipping var RackUnit with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("RackUnit", "", "RackUnit")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var ConfigState string

									var Discovery string

									var MacOfSharedIomAside string

									var MacOfSharedIomBside string

									var OperState string

									var PartNumber string

									var Reachability string

									var UsrLbl string

									var Vid string

									//Skipping var EquipmentSystemIoController with unknown data type EquipmentSystemIoControllerRelationship

									//Skipping var PortGroups with unknown data type []PortGroupRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "sharediomodule",

										Short: "Update a 'equipment.SharedIoModule' resource.",
										Long: `Update a 'equipment.SharedIoModule' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.PatchEquipmentSharedIoModule(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&ConfigState, "ConfigState", "", "ConfigState")

									cmd.Flags().StringVar(&Discovery, "Discovery", "", "Discovery")

									cmd.Flags().StringVar(&MacOfSharedIomAside, "MacOfSharedIomAside", "", "MacOfSharedIomAside")

									cmd.Flags().StringVar(&MacOfSharedIomBside, "MacOfSharedIomBside", "", "MacOfSharedIomBside")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&PartNumber, "PartNumber", "", "PartNumber")

									cmd.Flags().StringVar(&Reachability, "Reachability", "", "Reachability")

									cmd.Flags().StringVar(&UsrLbl, "UsrLbl", "", "UsrLbl")

									cmd.Flags().StringVar(&Vid, "Vid", "", "Vid")

									//Skipping var EquipmentSystemIoController with unknown data type EquipmentSystemIoControllerRelationship
									if isMoRef(openapi.EquipmentSystemIoControllerRelationship{}) {
										cmd.Flags().String("EquipmentSystemIoController", "", "EquipmentSystemIoController")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var Description string

									//Skipping var NumPorts with unknown data type int64

									var Presence string

									//Skipping var SlotId with unknown data type int64

									var State string

									//Skipping var NetworkElement with unknown data type NetworkElementRelationship

									//Skipping var PortGroups with unknown data type []PortGroupRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "switchcard",

										Short: "Update a 'equipment.SwitchCard' resource.",
										Long: `Update a 'equipment.SwitchCard' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.PatchEquipmentSwitchCard(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&State, "State", "", "State")

									//Skipping var NetworkElement with unknown data type NetworkElementRelationship
									if isMoRef(openapi.NetworkElementRelationship{}) {
										cmd.Flags().String("NetworkElement", "", "NetworkElement")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var ChassisId string

									var ConnectionPath string

									var ConnectionStatus string

									var Description string

									var ManagingInstance string

									var OperState string

									var PartNumber string

									var Pid string

									//Skipping var SystemIoControllerId with unknown data type int64

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var SharedIoModule with unknown data type EquipmentSharedIoModuleRelationship

									cmd := &cobra.Command{
										Use: "systemiocontroller",

										Short: "Update a 'equipment.SystemIoController' resource.",
										Long: `Update a 'equipment.SystemIoController' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.PatchEquipmentSystemIoController(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&ChassisId, "ChassisId", "", "ChassisId")

									cmd.Flags().StringVar(&ConnectionPath, "ConnectionPath", "", "ConnectionPath")

									cmd.Flags().StringVar(&ConnectionStatus, "ConnectionStatus", "", "ConnectionStatus")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&ManagingInstance, "ManagingInstance", "", "ManagingInstance")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&PartNumber, "PartNumber", "", "PartNumber")

									cmd.Flags().StringVar(&Pid, "Pid", "", "Pid")

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship
									if isMoRef(openapi.EquipmentChassisRelationship{}) {
										cmd.Flags().String("EquipmentChassis", "", "EquipmentChassis")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var SharedIoModule with unknown data type EquipmentSharedIoModuleRelationship
									if isMoRef(openapi.EquipmentSharedIoModuleRelationship{}) {
										cmd.Flags().String("SharedIoModule", "", "SharedIoModule")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var ActivationStatus string

									var AdminState string

									var Ownership string

									var Presence string

									//Skipping var TpmId with unknown data type int64

									var Version string

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "tpm",

										Short: "Update a 'equipment.Tpm' resource.",
										Long: `Update a 'equipment.Tpm' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EquipmentApi.PatchEquipmentTpm(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&ActivationStatus, "ActivationStatus", "", "ActivationStatus")

									cmd.Flags().StringVar(&AdminState, "AdminState", "", "AdminState")

									cmd.Flags().StringVar(&Ownership, "Ownership", "", "Ownership")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship
									if isMoRef(openapi.ComputeBoardRelationship{}) {
										cmd.Flags().String("ComputeBoard", "", "ComputeBoard")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "ether",

								Short: "Update Ether resource(s)",
								Long: `Update Ether resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var OperState string

									var Role string

									var MacAddress string

									var PeerDn string

									var TransceiverType string

									//Skipping var PortGroup with unknown data type PortGroupRelationship

									//Skipping var PortSubGroup with unknown data type PortSubGroupRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "physicalport",

										Short: "Update a 'ether.PhysicalPort' resource.",
										Long: `Update a 'ether.PhysicalPort' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.EtherApi.PatchEtherPhysicalPort(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&Role, "Role", "", "Role")

									cmd.Flags().StringVar(&MacAddress, "MacAddress", "", "MacAddress")

									cmd.Flags().StringVar(&PeerDn, "PeerDn", "", "PeerDn")

									cmd.Flags().StringVar(&TransceiverType, "TransceiverType", "", "TransceiverType")

									//Skipping var PortGroup with unknown data type PortGroupRelationship
									if isMoRef(openapi.PortGroupRelationship{}) {
										cmd.Flags().String("PortGroup", "", "PortGroup")
									}

									//Skipping var PortSubGroup with unknown data type PortSubGroupRelationship
									if isMoRef(openapi.PortSubGroupRelationship{}) {
										cmd.Flags().String("PortSubGroup", "", "PortSubGroup")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "externalsite",

								Short: "Update Externalsite resource(s)",
								Long: `Update Externalsite resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var IsPasswordSet bool

									var IsUserIdSet bool

									var Password string

									var RepositoryType string

									var UserId string

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "authorization",

										Short: "Update a 'externalsite.Authorization' resource.",
										Long: `Update a 'externalsite.Authorization' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ExternalsiteApi.PatchExternalsiteAuthorization(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().BoolVar(&IsUserIdSet, "IsUserIdSet", false, "IsUserIdSet")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									cmd.Flags().StringVar(&RepositoryType, "RepositoryType", "", "RepositoryType")

									cmd.Flags().StringVar(&UserId, "UserId", "", "UserId")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "fault",

								Short: "Update Fault resource(s)",
								Long: `Update Fault resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Acknowledged string

									var AffectedDn string

									var AffectedMoId string

									var AffectedMoType string

									var AncestorMoId string

									var AncestorMoType string

									var Code string

									var CreationTime string

									var Description string

									var LastTransitionTime string

									//Skipping var NumOccurrences with unknown data type int64

									var OriginalSeverity string

									var PreviousSeverity string

									var Rule string

									var Severity string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "instance",

										Short: "Update a 'fault.Instance' resource.",
										Long: `Update a 'fault.Instance' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.FaultApi.PatchFaultInstance(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Acknowledged, "Acknowledged", "", "Acknowledged")

									cmd.Flags().StringVar(&AffectedDn, "AffectedDn", "", "AffectedDn")

									cmd.Flags().StringVar(&AffectedMoId, "AffectedMoId", "", "AffectedMoId")

									cmd.Flags().StringVar(&AffectedMoType, "AffectedMoType", "", "AffectedMoType")

									cmd.Flags().StringVar(&AncestorMoId, "AncestorMoId", "", "AncestorMoId")

									cmd.Flags().StringVar(&AncestorMoType, "AncestorMoType", "", "AncestorMoType")

									cmd.Flags().StringVar(&Code, "Code", "", "Code")

									cmd.Flags().StringVar(&CreationTime, "CreationTime", "", "CreationTime")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&LastTransitionTime, "LastTransitionTime", "", "LastTransitionTime")

									cmd.Flags().StringVar(&OriginalSeverity, "OriginalSeverity", "", "OriginalSeverity")

									cmd.Flags().StringVar(&PreviousSeverity, "PreviousSeverity", "", "PreviousSeverity")

									cmd.Flags().StringVar(&Rule, "Rule", "", "Rule")

									cmd.Flags().StringVar(&Severity, "Severity", "", "Severity")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "fc",

								Short: "Update Fc resource(s)",
								Long: `Update Fc resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var OperState string

									var Role string

									var PeerDn string

									var TransceiverType string

									var Wwn string

									//Skipping var PortGroup with unknown data type PortGroupRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "physicalport",

										Short: "Update a 'fc.PhysicalPort' resource.",
										Long: `Update a 'fc.PhysicalPort' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.FcApi.PatchFcPhysicalPort(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&Role, "Role", "", "Role")

									cmd.Flags().StringVar(&PeerDn, "PeerDn", "", "PeerDn")

									cmd.Flags().StringVar(&TransceiverType, "TransceiverType", "", "TransceiverType")

									cmd.Flags().StringVar(&Wwn, "Wwn", "", "Wwn")

									//Skipping var PortGroup with unknown data type PortGroupRelationship
									if isMoRef(openapi.PortGroupRelationship{}) {
										cmd.Flags().String("PortGroup", "", "PortGroup")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "firmware",

								Short: "Update Firmware resource(s)",
								Long: `Update Firmware resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									//Skipping var DownloadCount with unknown data type int64

									var ImportAction string

									var ImportState string

									//Skipping var ImportedTime with unknown data type time.Time

									//Skipping var LastAccessTime with unknown data type time.Time

									var Md5sum string

									var Name string

									//Skipping var ReleaseDate with unknown data type time.Time

									var Sha512sum string

									//Skipping var Size with unknown data type int64

									var SoftwareAdvisoryUrl string

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer

									var Version string

									var BundleType string

									var Guid string

									var Mdfid string

									var Model string

									var PlatformType string

									var RecommendedBuild string

									var ReleaseNotesUrl string

									var SoftwareTypeId string

									var SupportedModels []string

									var Vendor string

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship

									cmd := &cobra.Command{
										Use: "distributable",

										Short: "Update a 'firmware.Distributable' resource.",
										Long: `Update a 'firmware.Distributable' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.FirmwareApi.PatchFirmwareDistributable(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&ImportAction, "ImportAction", "", "ImportAction")

									cmd.Flags().StringVar(&ImportState, "ImportState", "", "ImportState")

									cmd.Flags().StringVar(&Md5sum, "Md5sum", "", "Md5sum")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Sha512sum, "Sha512sum", "", "Sha512sum")

									cmd.Flags().StringVar(&SoftwareAdvisoryUrl, "SoftwareAdvisoryUrl", "", "SoftwareAdvisoryUrl")

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer
									if isMoRef(openapi.SoftwarerepositoryFileServer{}) {
										cmd.Flags().String("Source", "", "Source")
									}

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									cmd.Flags().StringVar(&BundleType, "BundleType", "", "BundleType")

									cmd.Flags().StringVar(&Guid, "Guid", "", "Guid")

									cmd.Flags().StringVar(&Mdfid, "Mdfid", "", "Mdfid")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									cmd.Flags().StringVar(&RecommendedBuild, "RecommendedBuild", "", "RecommendedBuild")

									cmd.Flags().StringVar(&ReleaseNotesUrl, "ReleaseNotesUrl", "", "ReleaseNotesUrl")

									cmd.Flags().StringVar(&SoftwareTypeId, "SoftwareTypeId", "", "SoftwareTypeId")

									cmd.Flags().StringSliceVar(&SupportedModels, "SupportedModels", []string{}, "SupportedModels")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship
									if isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									//Skipping var DownloadCount with unknown data type int64

									var ImportAction string

									var ImportState string

									//Skipping var ImportedTime with unknown data type time.Time

									//Skipping var LastAccessTime with unknown data type time.Time

									var Md5sum string

									var Name string

									//Skipping var ReleaseDate with unknown data type time.Time

									var Sha512sum string

									//Skipping var Size with unknown data type int64

									var SoftwareAdvisoryUrl string

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer

									var Version string

									var BundleType string

									var Guid string

									var Mdfid string

									var Model string

									var PlatformType string

									var RecommendedBuild string

									var ReleaseNotesUrl string

									var SoftwareTypeId string

									var SupportedModels []string

									var Vendor string

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship

									cmd := &cobra.Command{
										Use: "driverdistributable",

										Short: "Update a 'firmware.DriverDistributable' resource.",
										Long: `Update a 'firmware.DriverDistributable' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.FirmwareApi.PatchFirmwareDriverDistributable(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&ImportAction, "ImportAction", "", "ImportAction")

									cmd.Flags().StringVar(&ImportState, "ImportState", "", "ImportState")

									cmd.Flags().StringVar(&Md5sum, "Md5sum", "", "Md5sum")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Sha512sum, "Sha512sum", "", "Sha512sum")

									cmd.Flags().StringVar(&SoftwareAdvisoryUrl, "SoftwareAdvisoryUrl", "", "SoftwareAdvisoryUrl")

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer
									if isMoRef(openapi.SoftwarerepositoryFileServer{}) {
										cmd.Flags().String("Source", "", "Source")
									}

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									cmd.Flags().StringVar(&BundleType, "BundleType", "", "BundleType")

									cmd.Flags().StringVar(&Guid, "Guid", "", "Guid")

									cmd.Flags().StringVar(&Mdfid, "Mdfid", "", "Mdfid")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									cmd.Flags().StringVar(&RecommendedBuild, "RecommendedBuild", "", "RecommendedBuild")

									cmd.Flags().StringVar(&ReleaseNotesUrl, "ReleaseNotesUrl", "", "ReleaseNotesUrl")

									cmd.Flags().StringVar(&SoftwareTypeId, "SoftwareTypeId", "", "SoftwareTypeId")

									cmd.Flags().StringSliceVar(&SupportedModels, "SupportedModels", []string{}, "SupportedModels")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship
									if isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Component string

									var PackageVersion string

									var Type string

									var Version string

									//Skipping var BiosUnit with unknown data type BiosUnitRelationship

									//Skipping var ManagementController with unknown data type ManagementControllerRelationship

									//Skipping var NetworkElements with unknown data type []NetworkElementRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StorageController with unknown data type StorageControllerRelationship

									//Skipping var StoragePhysicalDisk with unknown data type StoragePhysicalDiskRelationship

									cmd := &cobra.Command{
										Use: "runningfirmware",

										Short: "Update a 'firmware.RunningFirmware' resource.",
										Long: `Update a 'firmware.RunningFirmware' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.FirmwareApi.PatchFirmwareRunningFirmware(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Component, "Component", "", "Component")

									cmd.Flags().StringVar(&PackageVersion, "PackageVersion", "", "PackageVersion")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									//Skipping var BiosUnit with unknown data type BiosUnitRelationship
									if isMoRef(openapi.BiosUnitRelationship{}) {
										cmd.Flags().String("BiosUnit", "", "BiosUnit")
									}

									//Skipping var ManagementController with unknown data type ManagementControllerRelationship
									if isMoRef(openapi.ManagementControllerRelationship{}) {
										cmd.Flags().String("ManagementController", "", "ManagementController")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageController with unknown data type StorageControllerRelationship
									if isMoRef(openapi.StorageControllerRelationship{}) {
										cmd.Flags().String("StorageController", "", "StorageController")
									}

									//Skipping var StoragePhysicalDisk with unknown data type StoragePhysicalDiskRelationship
									if isMoRef(openapi.StoragePhysicalDiskRelationship{}) {
										cmd.Flags().String("StoragePhysicalDisk", "", "StoragePhysicalDisk")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									//Skipping var DownloadCount with unknown data type int64

									var ImportAction string

									var ImportState string

									//Skipping var ImportedTime with unknown data type time.Time

									//Skipping var LastAccessTime with unknown data type time.Time

									var Md5sum string

									var Name string

									//Skipping var ReleaseDate with unknown data type time.Time

									var Sha512sum string

									//Skipping var Size with unknown data type int64

									var SoftwareAdvisoryUrl string

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer

									var Version string

									var BundleType string

									var Guid string

									var Mdfid string

									var Model string

									var PlatformType string

									var RecommendedBuild string

									var ReleaseNotesUrl string

									var SoftwareTypeId string

									var SupportedModels []string

									var Vendor string

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship

									cmd := &cobra.Command{
										Use: "serverconfigurationutilitydistributable",

										Short: "Update a 'firmware.ServerConfigurationUtilityDistributable' resource.",
										Long: `Update a 'firmware.ServerConfigurationUtilityDistributable' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.FirmwareApi.PatchFirmwareServerConfigurationUtilityDistributable(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&ImportAction, "ImportAction", "", "ImportAction")

									cmd.Flags().StringVar(&ImportState, "ImportState", "", "ImportState")

									cmd.Flags().StringVar(&Md5sum, "Md5sum", "", "Md5sum")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Sha512sum, "Sha512sum", "", "Sha512sum")

									cmd.Flags().StringVar(&SoftwareAdvisoryUrl, "SoftwareAdvisoryUrl", "", "SoftwareAdvisoryUrl")

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer
									if isMoRef(openapi.SoftwarerepositoryFileServer{}) {
										cmd.Flags().String("Source", "", "Source")
									}

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									cmd.Flags().StringVar(&BundleType, "BundleType", "", "BundleType")

									cmd.Flags().StringVar(&Guid, "Guid", "", "Guid")

									cmd.Flags().StringVar(&Mdfid, "Mdfid", "", "Mdfid")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									cmd.Flags().StringVar(&RecommendedBuild, "RecommendedBuild", "", "RecommendedBuild")

									cmd.Flags().StringVar(&ReleaseNotesUrl, "ReleaseNotesUrl", "", "ReleaseNotesUrl")

									cmd.Flags().StringVar(&SoftwareTypeId, "SoftwareTypeId", "", "SoftwareTypeId")

									cmd.Flags().StringSliceVar(&SupportedModels, "SupportedModels", []string{}, "SupportedModels")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship
									if isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "graphics",

								Short: "Update Graphics resource(s)",
								Long: `Update Graphics resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									//Skipping var CardId with unknown data type int64

									//Skipping var DeviceId with unknown data type int64

									var ExpanderSlot string

									var FirmwareVersion string

									var Mode string

									var NumGpus string

									var OperState string

									var PciAddress string

									var PciAddressList string

									var PciSlot string

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship

									//Skipping var GraphicsControllers with unknown data type []GraphicsControllerRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "card",

										Short: "Update a 'graphics.Card' resource.",
										Long: `Update a 'graphics.Card' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.GraphicsApi.PatchGraphicsCard(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&ExpanderSlot, "ExpanderSlot", "", "ExpanderSlot")

									cmd.Flags().StringVar(&FirmwareVersion, "FirmwareVersion", "", "FirmwareVersion")

									cmd.Flags().StringVar(&Mode, "Mode", "", "Mode")

									cmd.Flags().StringVar(&NumGpus, "NumGpus", "", "NumGpus")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&PciAddress, "PciAddress", "", "PciAddress")

									cmd.Flags().StringVar(&PciAddressList, "PciAddressList", "", "PciAddressList")

									cmd.Flags().StringVar(&PciSlot, "PciSlot", "", "PciSlot")

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship
									if isMoRef(openapi.ComputeBoardRelationship{}) {
										cmd.Flags().String("ComputeBoard", "", "ComputeBoard")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									//Skipping var ControllerId with unknown data type int64

									var PciAddr string

									var PciSlot string

									//Skipping var GraphicsCard with unknown data type GraphicsCardRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "controller",

										Short: "Update a 'graphics.Controller' resource.",
										Long: `Update a 'graphics.Controller' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.GraphicsApi.PatchGraphicsController(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&PciAddr, "PciAddr", "", "PciAddr")

									cmd.Flags().StringVar(&PciSlot, "PciSlot", "", "PciSlot")

									//Skipping var GraphicsCard with unknown data type GraphicsCardRelationship
									if isMoRef(openapi.GraphicsCardRelationship{}) {
										cmd.Flags().String("GraphicsCard", "", "GraphicsCard")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "hcl",

								Short: "Update Hcl resource(s)",
								Long: `Update Hcl resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Constraints with unknown data type []HclConstraint

									var HxdpVersion string

									var HypervisorType string

									var HypervisorVersion string

									var ServerFwVersion string

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship

									cmd := &cobra.Command{
										Use: "hyperflexsoftwarecompatibilityinfo",

										Short: "Update a 'hcl.HyperflexSoftwareCompatibilityInfo' resource.",
										Long: `Update a 'hcl.HyperflexSoftwareCompatibilityInfo' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HclApi.PatchHclHyperflexSoftwareCompatibilityInfo(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&HxdpVersion, "HxdpVersion", "", "HxdpVersion")

									cmd.Flags().StringVar(&HypervisorType, "HypervisorType", "", "HypervisorType")

									cmd.Flags().StringVar(&HypervisorVersion, "HypervisorVersion", "", "HypervisorVersion")

									cmd.Flags().StringVar(&ServerFwVersion, "ServerFwVersion", "", "ServerFwVersion")

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship
									if isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
										cmd.Flags().String("AppCatalog", "", "AppCatalog")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "hyperflex",

								Short: "Update Hyperflex resource(s)",
								Long: `Update Hyperflex resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Version string

									//Skipping var FeatureLimitExternal with unknown data type HyperflexFeatureLimitExternalRelationship

									//Skipping var FeatureLimitInternal with unknown data type HyperflexFeatureLimitInternalRelationship

									//Skipping var HxdpVersions with unknown data type []HyperflexHxdpVersionRelationship

									//Skipping var HyperflexCapabilityInfos with unknown data type []HyperflexCapabilityInfoRelationship

									//Skipping var HyperflexSoftwareCompatibilityInfos with unknown data type []HclHyperflexSoftwareCompatibilityInfoRelationship

									//Skipping var ServerFirmwareVersion with unknown data type HyperflexServerFirmwareVersionRelationship

									//Skipping var ServerModel with unknown data type HyperflexServerModelRelationship

									cmd := &cobra.Command{
										Use: "appcatalog",

										Short: "Update a 'hyperflex.AppCatalog' resource.",
										Long: `Update a 'hyperflex.AppCatalog' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.PatchHyperflexAppCatalog(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									//Skipping var FeatureLimitExternal with unknown data type HyperflexFeatureLimitExternalRelationship
									if isMoRef(openapi.HyperflexFeatureLimitExternalRelationship{}) {
										cmd.Flags().String("FeatureLimitExternal", "", "FeatureLimitExternal")
									}

									//Skipping var FeatureLimitInternal with unknown data type HyperflexFeatureLimitInternalRelationship
									if isMoRef(openapi.HyperflexFeatureLimitInternalRelationship{}) {
										cmd.Flags().String("FeatureLimitInternal", "", "FeatureLimitInternal")
									}

									//Skipping var ServerFirmwareVersion with unknown data type HyperflexServerFirmwareVersionRelationship
									if isMoRef(openapi.HyperflexServerFirmwareVersionRelationship{}) {
										cmd.Flags().String("ServerFirmwareVersion", "", "ServerFirmwareVersion")
									}

									//Skipping var ServerModel with unknown data type HyperflexServerModelRelationship
									if isMoRef(openapi.HyperflexServerModelRelationship{}) {
										cmd.Flags().String("ServerModel", "", "ServerModel")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var AdminState bool

									var ServiceTicketReceipient string

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "autosupportpolicy",

										Short: "Update a 'hyperflex.AutoSupportPolicy' resource.",
										Long: `Update a 'hyperflex.AutoSupportPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.PatchHyperflexAutoSupportPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&AdminState, "AdminState", false, "AdminState")

									cmd.Flags().StringVar(&ServiceTicketReceipient, "ServiceTicketReceipient", "", "ServiceTicketReceipient")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var CapabilityConstraints with unknown data type []HclConstraint

									var Name string

									var Value string

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship

									cmd := &cobra.Command{
										Use: "capabilityinfo",

										Short: "Update a 'hyperflex.CapabilityInfo' resource.",
										Long: `Update a 'hyperflex.CapabilityInfo' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.PatchHyperflexCapabilityInfo(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Value, "Value", "", "Value")

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship
									if isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
										cmd.Flags().String("AppCatalog", "", "AppCatalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var CapacityRunway with unknown data type int64

									var ClusterName string

									//Skipping var ClusterType with unknown data type int64

									var ClusterUuid string

									//Skipping var ComputeNodeCount with unknown data type int64

									//Skipping var ConvergedNodeCount with unknown data type int64

									var DeploymentType string

									var DeviceId string

									//Skipping var FltAggr with unknown data type int64

									var HxVersion string

									var HxdpBuildVersion string

									var HypervisorType string

									var HypervisorVersion string

									//Skipping var Summary with unknown data type HyperflexSummary

									//Skipping var UtilizationPercentage with unknown data type float32

									//Skipping var UtilizationTrendPercentage with unknown data type float32

									//Skipping var VmCount with unknown data type int64

									//Skipping var Alarm with unknown data type []HyperflexAlarmRelationship

									//Skipping var Health with unknown data type HyperflexHealthRelationship

									//Skipping var Nodes with unknown data type []HyperflexNodeRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "cluster",

										Short: "Update a 'hyperflex.Cluster' resource.",
										Long: `Update a 'hyperflex.Cluster' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.PatchHyperflexCluster(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&ClusterName, "ClusterName", "", "ClusterName")

									cmd.Flags().StringVar(&ClusterUuid, "ClusterUuid", "", "ClusterUuid")

									cmd.Flags().StringVar(&DeploymentType, "DeploymentType", "", "DeploymentType")

									cmd.Flags().StringVar(&DeviceId, "DeviceId", "", "DeviceId")

									cmd.Flags().StringVar(&HxVersion, "HxVersion", "", "HxVersion")

									cmd.Flags().StringVar(&HxdpBuildVersion, "HxdpBuildVersion", "", "HxdpBuildVersion")

									cmd.Flags().StringVar(&HypervisorType, "HypervisorType", "", "HypervisorType")

									cmd.Flags().StringVar(&HypervisorVersion, "HypervisorVersion", "", "HypervisorVersion")

									//Skipping var Summary with unknown data type HyperflexSummary
									if isMoRef(openapi.HyperflexSummary{}) {
										cmd.Flags().String("Summary", "", "Summary")
									}

									//Skipping var Health with unknown data type HyperflexHealthRelationship
									if isMoRef(openapi.HyperflexHealthRelationship{}) {
										cmd.Flags().String("Health", "", "Health")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var JumboFrame bool

									//Skipping var KvmIpRange with unknown data type HyperflexIpAddrRange

									//Skipping var MacPrefixRange with unknown data type HyperflexMacAddrPrefixRange

									//Skipping var MgmtVlan with unknown data type HyperflexNamedVlan

									var UplinkSpeed string

									//Skipping var VmMigrationVlan with unknown data type HyperflexNamedVlan

									//Skipping var VmNetworkVlans with unknown data type []HyperflexNamedVlan

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "clusternetworkpolicy",

										Short: "Update a 'hyperflex.ClusterNetworkPolicy' resource.",
										Long: `Update a 'hyperflex.ClusterNetworkPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.PatchHyperflexClusterNetworkPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&JumboFrame, "JumboFrame", false, "JumboFrame")

									//Skipping var KvmIpRange with unknown data type HyperflexIpAddrRange
									if isMoRef(openapi.HyperflexIpAddrRange{}) {
										cmd.Flags().String("KvmIpRange", "", "KvmIpRange")
									}

									//Skipping var MacPrefixRange with unknown data type HyperflexMacAddrPrefixRange
									if isMoRef(openapi.HyperflexMacAddrPrefixRange{}) {
										cmd.Flags().String("MacPrefixRange", "", "MacPrefixRange")
									}

									//Skipping var MgmtVlan with unknown data type HyperflexNamedVlan
									if isMoRef(openapi.HyperflexNamedVlan{}) {
										cmd.Flags().String("MgmtVlan", "", "MgmtVlan")
									}

									cmd.Flags().StringVar(&UplinkSpeed, "UplinkSpeed", "", "UplinkSpeed")

									//Skipping var VmMigrationVlan with unknown data type HyperflexNamedVlan
									if isMoRef(openapi.HyperflexNamedVlan{}) {
										cmd.Flags().String("VmMigrationVlan", "", "VmMigrationVlan")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Type string

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship

									var Action string

									//Skipping var ConfigContext with unknown data type PolicyConfigContext

									var DataIpAddress string

									var HypervisorType string

									var MacAddressPrefix string

									var MgmtIpAddress string

									var MgmtPlatform string

									//Skipping var Replication with unknown data type int64

									//Skipping var StorageDataVlan with unknown data type HyperflexNamedVlan

									var WwxnPrefix string

									//Skipping var AssociatedCluster with unknown data type HyperflexClusterRelationship

									//Skipping var AutoSupport with unknown data type HyperflexAutoSupportPolicyRelationship

									//Skipping var ClusterNetwork with unknown data type HyperflexClusterNetworkPolicyRelationship

									//Skipping var ClusterStorage with unknown data type HyperflexClusterStoragePolicyRelationship

									//Skipping var ConfigResult with unknown data type HyperflexConfigResultRelationship

									//Skipping var ExtFcStorage with unknown data type HyperflexExtFcStoragePolicyRelationship

									//Skipping var ExtIscsiStorage with unknown data type HyperflexExtIscsiStoragePolicyRelationship

									//Skipping var LocalCredential with unknown data type HyperflexLocalCredentialPolicyRelationship

									//Skipping var NodeConfig with unknown data type HyperflexNodeConfigPolicyRelationship

									//Skipping var NodeProfileConfig with unknown data type []HyperflexNodeProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var ProxySetting with unknown data type HyperflexProxySettingPolicyRelationship

									//Skipping var RunningWorkflows with unknown data type []WorkflowWorkflowInfoRelationship

									//Skipping var SoftwareVersion with unknown data type HyperflexSoftwareVersionPolicyRelationship

									//Skipping var SysConfig with unknown data type HyperflexSysConfigPolicyRelationship

									//Skipping var UcsmConfig with unknown data type HyperflexUcsmConfigPolicyRelationship

									//Skipping var VcenterConfig with unknown data type HyperflexVcenterConfigPolicyRelationship

									cmd := &cobra.Command{
										Use: "clusterprofile",

										Short: "Update a 'hyperflex.ClusterProfile' resource.",
										Long: `Update a 'hyperflex.ClusterProfile' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.PatchHyperflexClusterProfile(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship
									if isMoRef(openapi.PolicyAbstractProfileRelationship{}) {
										cmd.Flags().String("SrcTemplate", "", "SrcTemplate")
									}

									cmd.Flags().StringVar(&Action, "Action", "", "Action")

									//Skipping var ConfigContext with unknown data type PolicyConfigContext
									if isMoRef(openapi.PolicyConfigContext{}) {
										cmd.Flags().String("ConfigContext", "", "ConfigContext")
									}

									cmd.Flags().StringVar(&DataIpAddress, "DataIpAddress", "", "DataIpAddress")

									cmd.Flags().StringVar(&HypervisorType, "HypervisorType", "", "HypervisorType")

									cmd.Flags().StringVar(&MacAddressPrefix, "MacAddressPrefix", "", "MacAddressPrefix")

									cmd.Flags().StringVar(&MgmtIpAddress, "MgmtIpAddress", "", "MgmtIpAddress")

									cmd.Flags().StringVar(&MgmtPlatform, "MgmtPlatform", "", "MgmtPlatform")

									//Skipping var StorageDataVlan with unknown data type HyperflexNamedVlan
									if isMoRef(openapi.HyperflexNamedVlan{}) {
										cmd.Flags().String("StorageDataVlan", "", "StorageDataVlan")
									}

									cmd.Flags().StringVar(&WwxnPrefix, "WwxnPrefix", "", "WwxnPrefix")

									//Skipping var AssociatedCluster with unknown data type HyperflexClusterRelationship
									if isMoRef(openapi.HyperflexClusterRelationship{}) {
										cmd.Flags().String("AssociatedCluster", "", "AssociatedCluster")
									}

									//Skipping var AutoSupport with unknown data type HyperflexAutoSupportPolicyRelationship
									if isMoRef(openapi.HyperflexAutoSupportPolicyRelationship{}) {
										cmd.Flags().String("AutoSupport", "", "AutoSupport")
									}

									//Skipping var ClusterNetwork with unknown data type HyperflexClusterNetworkPolicyRelationship
									if isMoRef(openapi.HyperflexClusterNetworkPolicyRelationship{}) {
										cmd.Flags().String("ClusterNetwork", "", "ClusterNetwork")
									}

									//Skipping var ClusterStorage with unknown data type HyperflexClusterStoragePolicyRelationship
									if isMoRef(openapi.HyperflexClusterStoragePolicyRelationship{}) {
										cmd.Flags().String("ClusterStorage", "", "ClusterStorage")
									}

									//Skipping var ConfigResult with unknown data type HyperflexConfigResultRelationship
									if isMoRef(openapi.HyperflexConfigResultRelationship{}) {
										cmd.Flags().String("ConfigResult", "", "ConfigResult")
									}

									//Skipping var ExtFcStorage with unknown data type HyperflexExtFcStoragePolicyRelationship
									if isMoRef(openapi.HyperflexExtFcStoragePolicyRelationship{}) {
										cmd.Flags().String("ExtFcStorage", "", "ExtFcStorage")
									}

									//Skipping var ExtIscsiStorage with unknown data type HyperflexExtIscsiStoragePolicyRelationship
									if isMoRef(openapi.HyperflexExtIscsiStoragePolicyRelationship{}) {
										cmd.Flags().String("ExtIscsiStorage", "", "ExtIscsiStorage")
									}

									//Skipping var LocalCredential with unknown data type HyperflexLocalCredentialPolicyRelationship
									if isMoRef(openapi.HyperflexLocalCredentialPolicyRelationship{}) {
										cmd.Flags().String("LocalCredential", "", "LocalCredential")
									}

									//Skipping var NodeConfig with unknown data type HyperflexNodeConfigPolicyRelationship
									if isMoRef(openapi.HyperflexNodeConfigPolicyRelationship{}) {
										cmd.Flags().String("NodeConfig", "", "NodeConfig")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									//Skipping var ProxySetting with unknown data type HyperflexProxySettingPolicyRelationship
									if isMoRef(openapi.HyperflexProxySettingPolicyRelationship{}) {
										cmd.Flags().String("ProxySetting", "", "ProxySetting")
									}

									//Skipping var SoftwareVersion with unknown data type HyperflexSoftwareVersionPolicyRelationship
									if isMoRef(openapi.HyperflexSoftwareVersionPolicyRelationship{}) {
										cmd.Flags().String("SoftwareVersion", "", "SoftwareVersion")
									}

									//Skipping var SysConfig with unknown data type HyperflexSysConfigPolicyRelationship
									if isMoRef(openapi.HyperflexSysConfigPolicyRelationship{}) {
										cmd.Flags().String("SysConfig", "", "SysConfig")
									}

									//Skipping var UcsmConfig with unknown data type HyperflexUcsmConfigPolicyRelationship
									if isMoRef(openapi.HyperflexUcsmConfigPolicyRelationship{}) {
										cmd.Flags().String("UcsmConfig", "", "UcsmConfig")
									}

									//Skipping var VcenterConfig with unknown data type HyperflexVcenterConfigPolicyRelationship
									if isMoRef(openapi.HyperflexVcenterConfigPolicyRelationship{}) {
										cmd.Flags().String("VcenterConfig", "", "VcenterConfig")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var DiskPartitionCleanup bool

									//Skipping var LogicalAvalabilityZoneConfig with unknown data type HyperflexLogicalAvailabilityZone

									var VdiOptimization bool

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "clusterstoragepolicy",

										Short: "Update a 'hyperflex.ClusterStoragePolicy' resource.",
										Long: `Update a 'hyperflex.ClusterStoragePolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.PatchHyperflexClusterStoragePolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&DiskPartitionCleanup, "DiskPartitionCleanup", false, "DiskPartitionCleanup")

									//Skipping var LogicalAvalabilityZoneConfig with unknown data type HyperflexLogicalAvailabilityZone
									if isMoRef(openapi.HyperflexLogicalAvailabilityZone{}) {
										cmd.Flags().String("LogicalAvalabilityZoneConfig", "", "LogicalAvalabilityZoneConfig")
									}

									cmd.Flags().BoolVar(&VdiOptimization, "VdiOptimization", false, "VdiOptimization")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var AdminState bool

									//Skipping var ExtaTraffic with unknown data type HyperflexNamedVsan

									//Skipping var ExtbTraffic with unknown data type HyperflexNamedVsan

									//Skipping var WwxnPrefixRange with unknown data type HyperflexWwxnPrefixRange

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "extfcstoragepolicy",

										Short: "Update a 'hyperflex.ExtFcStoragePolicy' resource.",
										Long: `Update a 'hyperflex.ExtFcStoragePolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.PatchHyperflexExtFcStoragePolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&AdminState, "AdminState", false, "AdminState")

									//Skipping var ExtaTraffic with unknown data type HyperflexNamedVsan
									if isMoRef(openapi.HyperflexNamedVsan{}) {
										cmd.Flags().String("ExtaTraffic", "", "ExtaTraffic")
									}

									//Skipping var ExtbTraffic with unknown data type HyperflexNamedVsan
									if isMoRef(openapi.HyperflexNamedVsan{}) {
										cmd.Flags().String("ExtbTraffic", "", "ExtbTraffic")
									}

									//Skipping var WwxnPrefixRange with unknown data type HyperflexWwxnPrefixRange
									if isMoRef(openapi.HyperflexWwxnPrefixRange{}) {
										cmd.Flags().String("WwxnPrefixRange", "", "WwxnPrefixRange")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var AdminState bool

									//Skipping var ExtaTraffic with unknown data type HyperflexNamedVlan

									//Skipping var ExtbTraffic with unknown data type HyperflexNamedVlan

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "extiscsistoragepolicy",

										Short: "Update a 'hyperflex.ExtIscsiStoragePolicy' resource.",
										Long: `Update a 'hyperflex.ExtIscsiStoragePolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.PatchHyperflexExtIscsiStoragePolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&AdminState, "AdminState", false, "AdminState")

									//Skipping var ExtaTraffic with unknown data type HyperflexNamedVlan
									if isMoRef(openapi.HyperflexNamedVlan{}) {
										cmd.Flags().String("ExtaTraffic", "", "ExtaTraffic")
									}

									//Skipping var ExtbTraffic with unknown data type HyperflexNamedVlan
									if isMoRef(openapi.HyperflexNamedVlan{}) {
										cmd.Flags().String("ExtbTraffic", "", "ExtbTraffic")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var FeatureLimitEntries with unknown data type []HyperflexFeatureLimitEntry

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship

									cmd := &cobra.Command{
										Use: "featurelimitexternal",

										Short: "Update a 'hyperflex.FeatureLimitExternal' resource.",
										Long: `Update a 'hyperflex.FeatureLimitExternal' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.PatchHyperflexFeatureLimitExternal(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship
									if isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
										cmd.Flags().String("AppCatalog", "", "AppCatalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var FeatureLimitEntries with unknown data type []HyperflexFeatureLimitEntry

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship

									cmd := &cobra.Command{
										Use: "featurelimitinternal",

										Short: "Update a 'hyperflex.FeatureLimitInternal' resource.",
										Long: `Update a 'hyperflex.FeatureLimitInternal' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.PatchHyperflexFeatureLimitInternal(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship
									if isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
										cmd.Flags().String("AppCatalog", "", "AppCatalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Version string

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship

									cmd := &cobra.Command{
										Use: "hxdpversion",

										Short: "Update a 'hyperflex.HxdpVersion' resource.",
										Long: `Update a 'hyperflex.HxdpVersion' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.PatchHyperflexHxdpVersion(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship
									if isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
										cmd.Flags().String("AppCatalog", "", "AppCatalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var FactoryHypervisorPassword bool

									var HxdpRootPwd string

									var HypervisorAdmin string

									var HypervisorAdminPwd string

									var IsHxdpRootPwdSet bool

									var IsHypervisorAdminPwdSet bool

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "localcredentialpolicy",

										Short: "Update a 'hyperflex.LocalCredentialPolicy' resource.",
										Long: `Update a 'hyperflex.LocalCredentialPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.PatchHyperflexLocalCredentialPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&FactoryHypervisorPassword, "FactoryHypervisorPassword", false, "FactoryHypervisorPassword")

									cmd.Flags().StringVar(&HxdpRootPwd, "HxdpRootPwd", "", "HxdpRootPwd")

									cmd.Flags().StringVar(&HypervisorAdmin, "HypervisorAdmin", "", "HypervisorAdmin")

									cmd.Flags().StringVar(&HypervisorAdminPwd, "HypervisorAdminPwd", "", "HypervisorAdminPwd")

									cmd.Flags().BoolVar(&IsHxdpRootPwdSet, "IsHxdpRootPwdSet", false, "IsHxdpRootPwdSet")

									cmd.Flags().BoolVar(&IsHypervisorAdminPwdSet, "IsHypervisorAdminPwdSet", false, "IsHypervisorAdminPwdSet")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var DataIpRange with unknown data type HyperflexIpAddrRange

									//Skipping var HxdpIpRange with unknown data type HyperflexIpAddrRange

									//Skipping var MgmtIpRange with unknown data type HyperflexIpAddrRange

									var NodeNamePrefix string

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "nodeconfigpolicy",

										Short: "Update a 'hyperflex.NodeConfigPolicy' resource.",
										Long: `Update a 'hyperflex.NodeConfigPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.PatchHyperflexNodeConfigPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var DataIpRange with unknown data type HyperflexIpAddrRange
									if isMoRef(openapi.HyperflexIpAddrRange{}) {
										cmd.Flags().String("DataIpRange", "", "DataIpRange")
									}

									//Skipping var HxdpIpRange with unknown data type HyperflexIpAddrRange
									if isMoRef(openapi.HyperflexIpAddrRange{}) {
										cmd.Flags().String("HxdpIpRange", "", "HxdpIpRange")
									}

									//Skipping var MgmtIpRange with unknown data type HyperflexIpAddrRange
									if isMoRef(openapi.HyperflexIpAddrRange{}) {
										cmd.Flags().String("MgmtIpRange", "", "MgmtIpRange")
									}

									cmd.Flags().StringVar(&NodeNamePrefix, "NodeNamePrefix", "", "NodeNamePrefix")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Type string

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship

									var HxdpDataIp string

									var HxdpMgmtIp string

									var HypervisorDataIp string

									var HypervisorMgmtIp string

									//Skipping var AssignedServer with unknown data type ComputeRackUnitRelationship

									//Skipping var ClusterProfile with unknown data type HyperflexClusterProfileRelationship

									cmd := &cobra.Command{
										Use: "nodeprofile",

										Short: "Update a 'hyperflex.NodeProfile' resource.",
										Long: `Update a 'hyperflex.NodeProfile' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.PatchHyperflexNodeProfile(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship
									if isMoRef(openapi.PolicyAbstractProfileRelationship{}) {
										cmd.Flags().String("SrcTemplate", "", "SrcTemplate")
									}

									cmd.Flags().StringVar(&HxdpDataIp, "HxdpDataIp", "", "HxdpDataIp")

									cmd.Flags().StringVar(&HxdpMgmtIp, "HxdpMgmtIp", "", "HxdpMgmtIp")

									cmd.Flags().StringVar(&HypervisorDataIp, "HypervisorDataIp", "", "HypervisorDataIp")

									cmd.Flags().StringVar(&HypervisorMgmtIp, "HypervisorMgmtIp", "", "HypervisorMgmtIp")

									//Skipping var AssignedServer with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("AssignedServer", "", "AssignedServer")
									}

									//Skipping var ClusterProfile with unknown data type HyperflexClusterProfileRelationship
									if isMoRef(openapi.HyperflexClusterProfileRelationship{}) {
										cmd.Flags().String("ClusterProfile", "", "ClusterProfile")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Hostname string

									var IsPasswordSet bool

									var Password string

									//Skipping var Port with unknown data type int64

									var Username string

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "proxysettingpolicy",

										Short: "Update a 'hyperflex.ProxySettingPolicy' resource.",
										Long: `Update a 'hyperflex.ProxySettingPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.PatchHyperflexProxySettingPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Hostname, "Hostname", "", "Hostname")

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									cmd.Flags().StringVar(&Username, "Username", "", "Username")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var ServerFirmwareVersionEntries with unknown data type []HyperflexServerFirmwareVersionEntry

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship

									cmd := &cobra.Command{
										Use: "serverfirmwareversion",

										Short: "Update a 'hyperflex.ServerFirmwareVersion' resource.",
										Long: `Update a 'hyperflex.ServerFirmwareVersion' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.PatchHyperflexServerFirmwareVersion(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship
									if isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
										cmd.Flags().String("AppCatalog", "", "AppCatalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var ServerModelEntries with unknown data type []HyperflexServerModelEntry

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship

									cmd := &cobra.Command{
										Use: "servermodel",

										Short: "Update a 'hyperflex.ServerModel' resource.",
										Long: `Update a 'hyperflex.ServerModel' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.PatchHyperflexServerModel(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var AppCatalog with unknown data type HyperflexAppCatalogRelationship
									if isMoRef(openapi.HyperflexAppCatalogRelationship{}) {
										cmd.Flags().String("AppCatalog", "", "AppCatalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var HxdpVersion string

									var HypervisorVersion string

									var ServerFirmwareVersion string

									var UpgradeTypes []string

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var HxdpVersionInfo with unknown data type SoftwareHyperflexDistributableRelationship

									//Skipping var HypervisorVersionInfo with unknown data type SoftwareHyperflexDistributableRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var ServerFirmwareVersionInfo with unknown data type FirmwareDistributableRelationship

									cmd := &cobra.Command{
										Use: "softwareversionpolicy",

										Short: "Update a 'hyperflex.SoftwareVersionPolicy' resource.",
										Long: `Update a 'hyperflex.SoftwareVersionPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.PatchHyperflexSoftwareVersionPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&HxdpVersion, "HxdpVersion", "", "HxdpVersion")

									cmd.Flags().StringVar(&HypervisorVersion, "HypervisorVersion", "", "HypervisorVersion")

									cmd.Flags().StringVar(&ServerFirmwareVersion, "ServerFirmwareVersion", "", "ServerFirmwareVersion")

									cmd.Flags().StringSliceVar(&UpgradeTypes, "UpgradeTypes", []string{}, "UpgradeTypes")

									//Skipping var HxdpVersionInfo with unknown data type SoftwareHyperflexDistributableRelationship
									if isMoRef(openapi.SoftwareHyperflexDistributableRelationship{}) {
										cmd.Flags().String("HxdpVersionInfo", "", "HxdpVersionInfo")
									}

									//Skipping var HypervisorVersionInfo with unknown data type SoftwareHyperflexDistributableRelationship
									if isMoRef(openapi.SoftwareHyperflexDistributableRelationship{}) {
										cmd.Flags().String("HypervisorVersionInfo", "", "HypervisorVersionInfo")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									//Skipping var ServerFirmwareVersionInfo with unknown data type FirmwareDistributableRelationship
									if isMoRef(openapi.FirmwareDistributableRelationship{}) {
										cmd.Flags().String("ServerFirmwareVersionInfo", "", "ServerFirmwareVersionInfo")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var DnsDomainName string

									var DnsServers []string

									var NtpServers []string

									var Timezone string

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "sysconfigpolicy",

										Short: "Update a 'hyperflex.SysConfigPolicy' resource.",
										Long: `Update a 'hyperflex.SysConfigPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.PatchHyperflexSysConfigPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&DnsDomainName, "DnsDomainName", "", "DnsDomainName")

									cmd.Flags().StringSliceVar(&DnsServers, "DnsServers", []string{}, "DnsServers")

									cmd.Flags().StringSliceVar(&NtpServers, "NtpServers", []string{}, "NtpServers")

									cmd.Flags().StringVar(&Timezone, "Timezone", "", "Timezone")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var KvmIpRange with unknown data type HyperflexIpAddrRange

									//Skipping var MacPrefixRange with unknown data type HyperflexMacAddrPrefixRange

									var ServerFirmwareVersion string

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "ucsmconfigpolicy",

										Short: "Update a 'hyperflex.UcsmConfigPolicy' resource.",
										Long: `Update a 'hyperflex.UcsmConfigPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.PatchHyperflexUcsmConfigPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var KvmIpRange with unknown data type HyperflexIpAddrRange
									if isMoRef(openapi.HyperflexIpAddrRange{}) {
										cmd.Flags().String("KvmIpRange", "", "KvmIpRange")
									}

									//Skipping var MacPrefixRange with unknown data type HyperflexMacAddrPrefixRange
									if isMoRef(openapi.HyperflexMacAddrPrefixRange{}) {
										cmd.Flags().String("MacPrefixRange", "", "MacPrefixRange")
									}

									cmd.Flags().StringVar(&ServerFirmwareVersion, "ServerFirmwareVersion", "", "ServerFirmwareVersion")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var DataCenter string

									var Hostname string

									var IsPasswordSet bool

									var Password string

									var SsoUrl string

									var Username string

									//Skipping var ClusterProfiles with unknown data type []HyperflexClusterProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "vcenterconfigpolicy",

										Short: "Update a 'hyperflex.VcenterConfigPolicy' resource.",
										Long: `Update a 'hyperflex.VcenterConfigPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.HyperflexApi.PatchHyperflexVcenterConfigPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&DataCenter, "DataCenter", "", "DataCenter")

									cmd.Flags().StringVar(&Hostname, "Hostname", "", "Hostname")

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									cmd.Flags().StringVar(&SsoUrl, "SsoUrl", "", "SsoUrl")

									cmd.Flags().StringVar(&Username, "Username", "", "Username")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "iaas",

								Short: "Update Iaas resource(s)",
								Long: `Update Iaas resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceId string

									var Guid string

									var HostName string

									var Ip string

									//Skipping var LastBackup with unknown data type time.Time

									var NodeType string

									var ProductName string

									var ProductVendor string

									var ProductVersion string

									var Status string

									//Skipping var ConnectorPack with unknown data type []IaasConnectorPackRelationship

									//Skipping var DeviceStatus with unknown data type []IaasDeviceStatusRelationship

									//Skipping var LicenseInfo with unknown data type IaasLicenseInfoRelationship

									//Skipping var MostRunTasks with unknown data type []IaasMostRunTasksRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var UcsdManagedInfra with unknown data type IaasUcsdManagedInfraRelationship

									cmd := &cobra.Command{
										Use: "ucsdinfo",

										Short: "Update a 'iaas.UcsdInfo' resource.",
										Long: `Update a 'iaas.UcsdInfo' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IaasApi.PatchIaasUcsdInfo(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceId, "DeviceId", "", "DeviceId")

									cmd.Flags().StringVar(&Guid, "Guid", "", "Guid")

									cmd.Flags().StringVar(&HostName, "HostName", "", "HostName")

									cmd.Flags().StringVar(&Ip, "Ip", "", "Ip")

									cmd.Flags().StringVar(&NodeType, "NodeType", "", "NodeType")

									cmd.Flags().StringVar(&ProductName, "ProductName", "", "ProductName")

									cmd.Flags().StringVar(&ProductVendor, "ProductVendor", "", "ProductVendor")

									cmd.Flags().StringVar(&ProductVersion, "ProductVersion", "", "ProductVersion")

									cmd.Flags().StringVar(&Status, "Status", "", "Status")

									//Skipping var LicenseInfo with unknown data type IaasLicenseInfoRelationship
									if isMoRef(openapi.IaasLicenseInfoRelationship{}) {
										cmd.Flags().String("LicenseInfo", "", "LicenseInfo")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var UcsdManagedInfra with unknown data type IaasUcsdManagedInfraRelationship
									if isMoRef(openapi.IaasUcsdManagedInfraRelationship{}) {
										cmd.Flags().String("UcsdManagedInfra", "", "UcsdManagedInfra")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "iam",

								Short: "Update Iam resource(s)",
								Long: `Update Iam resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Name string

									var Status string

									//Skipping var AppRegistrations with unknown data type []IamAppRegistrationRelationship

									//Skipping var DomainGroups with unknown data type []IamDomainGroupRelationship

									//Skipping var EndPointRoles with unknown data type []IamEndPointRoleRelationship

									//Skipping var Idpreferences with unknown data type []IamIdpReferenceRelationship

									//Skipping var Idps with unknown data type []IamIdpRelationship

									//Skipping var Permissions with unknown data type []IamPermissionRelationship

									//Skipping var PrivilegeSets with unknown data type []IamPrivilegeSetRelationship

									//Skipping var Privileges with unknown data type []IamPrivilegeRelationship

									//Skipping var ResourceLimits with unknown data type IamResourceLimitsRelationship

									//Skipping var Roles with unknown data type []IamRoleRelationship

									//Skipping var SecurityHolder with unknown data type IamSecurityHolderRelationship

									//Skipping var SessionLimits with unknown data type IamSessionLimitsRelationship

									cmd := &cobra.Command{
										Use: "account",

										Short: "Update a 'iam.Account' resource.",
										Long: `Update a 'iam.Account' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.PatchIamAccount(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Status, "Status", "", "Status")

									//Skipping var ResourceLimits with unknown data type IamResourceLimitsRelationship
									if isMoRef(openapi.IamResourceLimitsRelationship{}) {
										cmd.Flags().String("ResourceLimits", "", "ResourceLimits")
									}

									//Skipping var SecurityHolder with unknown data type IamSecurityHolderRelationship
									if isMoRef(openapi.IamSecurityHolderRelationship{}) {
										cmd.Flags().String("SecurityHolder", "", "SecurityHolder")
									}

									//Skipping var SessionLimits with unknown data type IamSessionLimitsRelationship
									if isMoRef(openapi.IamSessionLimitsRelationship{}) {
										cmd.Flags().String("SessionLimits", "", "SessionLimits")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var HashAlgorithm string

									//Skipping var KeySpec with unknown data type PkixKeyGenerationSpec

									var PrivateKey string

									var Purpose string

									var SigningAlgorithm string

									//Skipping var Permission with unknown data type IamPermissionRelationship

									//Skipping var User with unknown data type IamUserRelationship

									cmd := &cobra.Command{
										Use: "apikey",

										Short: "Update a 'iam.ApiKey' resource.",
										Long: `Update a 'iam.ApiKey' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.PatchIamApiKey(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&HashAlgorithm, "HashAlgorithm", "", "HashAlgorithm")

									//Skipping var KeySpec with unknown data type PkixKeyGenerationSpec
									if isMoRef(openapi.PkixKeyGenerationSpec{}) {
										cmd.Flags().String("KeySpec", "", "KeySpec")
									}

									cmd.Flags().StringVar(&PrivateKey, "PrivateKey", "", "PrivateKey")

									cmd.Flags().StringVar(&Purpose, "Purpose", "", "Purpose")

									cmd.Flags().StringVar(&SigningAlgorithm, "SigningAlgorithm", "", "SigningAlgorithm")

									//Skipping var Permission with unknown data type IamPermissionRelationship
									if isMoRef(openapi.IamPermissionRelationship{}) {
										cmd.Flags().String("Permission", "", "Permission")
									}

									//Skipping var User with unknown data type IamUserRelationship
									if isMoRef(openapi.IamUserRelationship{}) {
										cmd.Flags().String("User", "", "User")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var ClientId string

									var ClientName string

									var ClientSecret string

									var ClientType string

									var Description string

									var GrantTypes []string

									var RedirectUris []string

									var RenewClientSecret bool

									var ResponseTypes []string

									//Skipping var RevocationTimestamp with unknown data type time.Time

									var Revoke bool

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var OauthTokens with unknown data type []IamOAuthTokenRelationship

									//Skipping var Permission with unknown data type IamPermissionRelationship

									//Skipping var Roles with unknown data type []IamRoleRelationship

									//Skipping var User with unknown data type IamUserRelationship

									cmd := &cobra.Command{
										Use: "appregistration",

										Short: "Update a 'iam.AppRegistration' resource.",
										Long: `Update a 'iam.AppRegistration' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.PatchIamAppRegistration(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&ClientId, "ClientId", "", "ClientId")

									cmd.Flags().StringVar(&ClientName, "ClientName", "", "ClientName")

									cmd.Flags().StringVar(&ClientSecret, "ClientSecret", "", "ClientSecret")

									cmd.Flags().StringVar(&ClientType, "ClientType", "", "ClientType")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringSliceVar(&GrantTypes, "GrantTypes", []string{}, "GrantTypes")

									cmd.Flags().StringSliceVar(&RedirectUris, "RedirectUris", []string{}, "RedirectUris")

									cmd.Flags().BoolVar(&RenewClientSecret, "RenewClientSecret", false, "RenewClientSecret")

									cmd.Flags().StringSliceVar(&ResponseTypes, "ResponseTypes", []string{}, "ResponseTypes")

									cmd.Flags().BoolVar(&Revoke, "Revoke", false, "Revoke")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var Permission with unknown data type IamPermissionRelationship
									if isMoRef(openapi.IamPermissionRelationship{}) {
										cmd.Flags().String("Permission", "", "Permission")
									}

									//Skipping var User with unknown data type IamUserRelationship
									if isMoRef(openapi.IamUserRelationship{}) {
										cmd.Flags().String("User", "", "User")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Certificate with unknown data type X509Certificate

									var Status string

									//Skipping var CertificateRequest with unknown data type IamCertificateRequestRelationship

									cmd := &cobra.Command{
										Use: "certificate",

										Short: "Update a 'iam.Certificate' resource.",
										Long: `Update a 'iam.Certificate' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.PatchIamCertificate(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Certificate with unknown data type X509Certificate
									if isMoRef(openapi.X509Certificate{}) {
										cmd.Flags().String("Certificate", "", "Certificate")
									}

									cmd.Flags().StringVar(&Status, "Status", "", "Status")

									//Skipping var CertificateRequest with unknown data type IamCertificateRequestRelationship
									if isMoRef(openapi.IamCertificateRequestRelationship{}) {
										cmd.Flags().String("CertificateRequest", "", "CertificateRequest")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var EmailAddress string

									var Name string

									var Request string

									var SelfSigned bool

									//Skipping var Subject with unknown data type PkixDistinguishedName

									//Skipping var SubjectAlternateName with unknown data type PkixSubjectAlternateName

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var Certificate with unknown data type IamCertificateRelationship

									//Skipping var PrivateKeySpec with unknown data type IamPrivateKeySpecRelationship

									cmd := &cobra.Command{
										Use: "certificaterequest",

										Short: "Update a 'iam.CertificateRequest' resource.",
										Long: `Update a 'iam.CertificateRequest' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.PatchIamCertificateRequest(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&EmailAddress, "EmailAddress", "", "EmailAddress")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Request, "Request", "", "Request")

									cmd.Flags().BoolVar(&SelfSigned, "SelfSigned", false, "SelfSigned")

									//Skipping var Subject with unknown data type PkixDistinguishedName
									if isMoRef(openapi.PkixDistinguishedName{}) {
										cmd.Flags().String("Subject", "", "Subject")
									}

									//Skipping var SubjectAlternateName with unknown data type PkixSubjectAlternateName
									if isMoRef(openapi.PkixSubjectAlternateName{}) {
										cmd.Flags().String("SubjectAlternateName", "", "SubjectAlternateName")
									}

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var Certificate with unknown data type IamCertificateRelationship
									if isMoRef(openapi.IamCertificateRelationship{}) {
										cmd.Flags().String("Certificate", "", "Certificate")
									}

									//Skipping var PrivateKeySpec with unknown data type IamPrivateKeySpecRelationship
									if isMoRef(openapi.IamPrivateKeySpecRelationship{}) {
										cmd.Flags().String("PrivateKeySpec", "", "PrivateKeySpec")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Name string

									//Skipping var EndPointUserRole with unknown data type []IamEndPointUserRoleRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "endpointuser",

										Short: "Update a 'iam.EndPointUser' resource.",
										Long: `Update a 'iam.EndPointUser' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.PatchIamEndPointUser(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var PasswordProperties with unknown data type IamEndPointPasswordProperties

									//Skipping var EndPointUserRoles with unknown data type []IamEndPointUserRoleRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "endpointuserpolicy",

										Short: "Update a 'iam.EndPointUserPolicy' resource.",
										Long: `Update a 'iam.EndPointUserPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.PatchIamEndPointUserPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var PasswordProperties with unknown data type IamEndPointPasswordProperties
									if isMoRef(openapi.IamEndPointPasswordProperties{}) {
										cmd.Flags().String("PasswordProperties", "", "PasswordProperties")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var ChangePassword bool

									var Enabled bool

									var IsPasswordSet bool

									var Password string

									//Skipping var EndPointRole with unknown data type []IamEndPointRoleRelationship

									//Skipping var EndPointUser with unknown data type IamEndPointUserRelationship

									//Skipping var EndPointUserPolicy with unknown data type IamEndPointUserPolicyRelationship

									cmd := &cobra.Command{
										Use: "endpointuserrole",

										Short: "Update a 'iam.EndPointUserRole' resource.",
										Long: `Update a 'iam.EndPointUserRole' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.PatchIamEndPointUserRole(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&ChangePassword, "ChangePassword", false, "ChangePassword")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									//Skipping var EndPointUser with unknown data type IamEndPointUserRelationship
									if isMoRef(openapi.IamEndPointUserRelationship{}) {
										cmd.Flags().String("EndPointUser", "", "EndPointUser")
									}

									//Skipping var EndPointUserPolicy with unknown data type IamEndPointUserPolicyRelationship
									if isMoRef(openapi.IamEndPointUserPolicyRelationship{}) {
										cmd.Flags().String("EndPointUserPolicy", "", "EndPointUserPolicy")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DomainName string

									var IdpEntityId string

									var Metadata string

									var Name string

									var Type string

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var LdapPolicy with unknown data type IamLdapPolicyRelationship

									//Skipping var System with unknown data type IamSystemRelationship

									//Skipping var UserPreferences with unknown data type []IamUserPreferenceRelationship

									//Skipping var Usergroups with unknown data type []IamUserGroupRelationship

									//Skipping var Users with unknown data type []IamUserRelationship

									cmd := &cobra.Command{
										Use: "idp",

										Short: "Update a 'iam.Idp' resource.",
										Long: `Update a 'iam.Idp' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.PatchIamIdp(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DomainName, "DomainName", "", "DomainName")

									cmd.Flags().StringVar(&IdpEntityId, "IdpEntityId", "", "IdpEntityId")

									cmd.Flags().StringVar(&Metadata, "Metadata", "", "Metadata")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var LdapPolicy with unknown data type IamLdapPolicyRelationship
									if isMoRef(openapi.IamLdapPolicyRelationship{}) {
										cmd.Flags().String("LdapPolicy", "", "LdapPolicy")
									}

									//Skipping var System with unknown data type IamSystemRelationship
									if isMoRef(openapi.IamSystemRelationship{}) {
										cmd.Flags().String("System", "", "System")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DomainName string

									var IdpEntityId string

									var MultiFactorAuthentication bool

									var Name string

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var Idp with unknown data type IamIdpRelationship

									//Skipping var UserPreferences with unknown data type []IamUserPreferenceRelationship

									//Skipping var Usergroups with unknown data type []IamUserGroupRelationship

									//Skipping var Users with unknown data type []IamUserRelationship

									cmd := &cobra.Command{
										Use: "idpreference",

										Short: "Update a 'iam.IdpReference' resource.",
										Long: `Update a 'iam.IdpReference' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.PatchIamIdpReference(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DomainName, "DomainName", "", "DomainName")

									cmd.Flags().StringVar(&IdpEntityId, "IdpEntityId", "", "IdpEntityId")

									cmd.Flags().BoolVar(&MultiFactorAuthentication, "MultiFactorAuthentication", false, "MultiFactorAuthentication")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var Idp with unknown data type IamIdpRelationship
									if isMoRef(openapi.IamIdpRelationship{}) {
										cmd.Flags().String("Idp", "", "Idp")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Domain string

									var Name string

									//Skipping var EndPointRole with unknown data type []IamEndPointRoleRelationship

									//Skipping var LdapPolicy with unknown data type IamLdapPolicyRelationship

									cmd := &cobra.Command{
										Use: "ldapgroup",

										Short: "Update a 'iam.LdapGroup' resource.",
										Long: `Update a 'iam.LdapGroup' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.PatchIamLdapGroup(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Domain, "Domain", "", "Domain")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var LdapPolicy with unknown data type IamLdapPolicyRelationship
									if isMoRef(openapi.IamLdapPolicyRelationship{}) {
										cmd.Flags().String("LdapPolicy", "", "LdapPolicy")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var BaseProperties with unknown data type IamLdapBaseProperties

									//Skipping var DnsParameters with unknown data type IamLdapDnsParameters

									var EnableDns bool

									var Enabled bool

									var UserSearchPrecedence string

									//Skipping var Var0Idp with unknown data type IamIdpRelationship

									//Skipping var ApplianceAccount with unknown data type IamAccountRelationship

									//Skipping var Groups with unknown data type []IamLdapGroupRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									//Skipping var Providers with unknown data type []IamLdapProviderRelationship

									cmd := &cobra.Command{
										Use: "ldappolicy",

										Short: "Update a 'iam.LdapPolicy' resource.",
										Long: `Update a 'iam.LdapPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.PatchIamLdapPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var BaseProperties with unknown data type IamLdapBaseProperties
									if isMoRef(openapi.IamLdapBaseProperties{}) {
										cmd.Flags().String("BaseProperties", "", "BaseProperties")
									}

									//Skipping var DnsParameters with unknown data type IamLdapDnsParameters
									if isMoRef(openapi.IamLdapDnsParameters{}) {
										cmd.Flags().String("DnsParameters", "", "DnsParameters")
									}

									cmd.Flags().BoolVar(&EnableDns, "EnableDns", false, "EnableDns")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									cmd.Flags().StringVar(&UserSearchPrecedence, "UserSearchPrecedence", "", "UserSearchPrecedence")

									//Skipping var Var0Idp with unknown data type IamIdpRelationship
									if isMoRef(openapi.IamIdpRelationship{}) {
										cmd.Flags().String("Var0Idp", "", "Var0Idp")
									}

									//Skipping var ApplianceAccount with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("ApplianceAccount", "", "ApplianceAccount")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Port with unknown data type int64

									var Server string

									//Skipping var LdapPolicy with unknown data type IamLdapPolicyRelationship

									cmd := &cobra.Command{
										Use: "ldapprovider",

										Short: "Update a 'iam.LdapProvider' resource.",
										Long: `Update a 'iam.LdapProvider' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.PatchIamLdapProvider(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Server, "Server", "", "Server")

									//Skipping var LdapPolicy with unknown data type IamLdapPolicyRelationship
									if isMoRef(openapi.IamLdapPolicyRelationship{}) {
										cmd.Flags().String("LdapPolicy", "", "LdapPolicy")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var CurrentPassword string

									var NewPassword string

									var Password string

									//Skipping var User with unknown data type IamUserRelationship

									cmd := &cobra.Command{
										Use: "localuserpassword",

										Short: "Update a 'iam.LocalUserPassword' resource.",
										Long: `Update a 'iam.LocalUserPassword' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.PatchIamLocalUserPassword(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&CurrentPassword, "CurrentPassword", "", "CurrentPassword")

									cmd.Flags().StringVar(&NewPassword, "NewPassword", "", "NewPassword")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									//Skipping var User with unknown data type IamUserRelationship
									if isMoRef(openapi.IamUserRelationship{}) {
										cmd.Flags().String("User", "", "User")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var EndPointRoles with unknown data type []IamEndPointRoleRelationship

									//Skipping var ResourceRoles with unknown data type []IamResourceRolesRelationship

									//Skipping var Roles with unknown data type []IamRoleRelationship

									//Skipping var SessionLimits with unknown data type IamSessionLimitsRelationship

									//Skipping var UserGroups with unknown data type []IamUserGroupRelationship

									//Skipping var Users with unknown data type []IamUserRelationship

									cmd := &cobra.Command{
										Use: "permission",

										Short: "Update a 'iam.Permission' resource.",
										Long: `Update a 'iam.Permission' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.PatchIamPermission(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var SessionLimits with unknown data type IamSessionLimitsRelationship
									if isMoRef(openapi.IamSessionLimitsRelationship{}) {
										cmd.Flags().String("SessionLimits", "", "SessionLimits")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Algorithm with unknown data type PkixKeyGenerationSpec

									//Skipping var CertificateRequest with unknown data type IamCertificateRequestRelationship

									cmd := &cobra.Command{
										Use: "privatekeyspec",

										Short: "Update a 'iam.PrivateKeySpec' resource.",
										Long: `Update a 'iam.PrivateKeySpec' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.PatchIamPrivateKeySpec(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Algorithm with unknown data type PkixKeyGenerationSpec
									if isMoRef(openapi.PkixKeyGenerationSpec{}) {
										cmd.Flags().String("Algorithm", "", "Algorithm")
									}

									//Skipping var CertificateRequest with unknown data type IamCertificateRequestRelationship
									if isMoRef(openapi.IamCertificateRequestRelationship{}) {
										cmd.Flags().String("CertificateRequest", "", "CertificateRequest")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Name string

									var Value []string

									//Skipping var Usergroup with unknown data type IamUserGroupRelationship

									cmd := &cobra.Command{
										Use: "qualifier",

										Short: "Update a 'iam.Qualifier' resource.",
										Long: `Update a 'iam.Qualifier' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.PatchIamQualifier(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringSliceVar(&Value, "Value", []string{}, "Value")

									//Skipping var Usergroup with unknown data type IamUserGroupRelationship
									if isMoRef(openapi.IamUserGroupRelationship{}) {
										cmd.Flags().String("Usergroup", "", "Usergroup")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var EndPointRoles with unknown data type []IamEndPointRoleRelationship

									//Skipping var Permission with unknown data type IamPermissionRelationship

									//Skipping var Resource with unknown data type MoBaseMoRelationship

									//Skipping var Roles with unknown data type []IamRoleRelationship

									cmd := &cobra.Command{
										Use: "resourceroles",

										Short: "Update a 'iam.ResourceRoles' resource.",
										Long: `Update a 'iam.ResourceRoles' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.PatchIamResourceRoles(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Permission with unknown data type IamPermissionRelationship
									if isMoRef(openapi.IamPermissionRelationship{}) {
										cmd.Flags().String("Permission", "", "Permission")
									}

									//Skipping var Resource with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Resource", "", "Resource")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var IdleTimeOut with unknown data type int64

									//Skipping var MaximumLimit with unknown data type int64

									//Skipping var PerUserLimit with unknown data type int64

									//Skipping var SessionTimeOut with unknown data type int64

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var Permission with unknown data type IamPermissionRelationship

									cmd := &cobra.Command{
										Use: "sessionlimits",

										Short: "Update a 'iam.SessionLimits' resource.",
										Long: `Update a 'iam.SessionLimits' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.PatchIamSessionLimits(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var Permission with unknown data type IamPermissionRelationship
									if isMoRef(openapi.IamPermissionRelationship{}) {
										cmd.Flags().String("Permission", "", "Permission")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var ClientIpAddress string

									var Email string

									var FirstName string

									//Skipping var LastLoginTime with unknown data type time.Time

									var LastName string

									var Name string

									var UserIdOrEmail string

									var UserType string

									//Skipping var ApiKeys with unknown data type []IamApiKeyRelationship

									//Skipping var AppRegistrations with unknown data type []IamAppRegistrationRelationship

									//Skipping var Idp with unknown data type IamIdpRelationship

									//Skipping var Idpreference with unknown data type IamIdpReferenceRelationship

									//Skipping var LocalUserPassword with unknown data type IamLocalUserPasswordRelationship

									//Skipping var OauthTokens with unknown data type []IamOAuthTokenRelationship

									//Skipping var Permissions with unknown data type []IamPermissionRelationship

									//Skipping var Sessions with unknown data type []IamSessionRelationship

									cmd := &cobra.Command{
										Use: "user",

										Short: "Update a 'iam.User' resource.",
										Long: `Update a 'iam.User' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.PatchIamUser(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&ClientIpAddress, "ClientIpAddress", "", "ClientIpAddress")

									cmd.Flags().StringVar(&Email, "Email", "", "Email")

									cmd.Flags().StringVar(&FirstName, "FirstName", "", "FirstName")

									cmd.Flags().StringVar(&LastName, "LastName", "", "LastName")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&UserIdOrEmail, "UserIdOrEmail", "", "UserIdOrEmail")

									cmd.Flags().StringVar(&UserType, "UserType", "", "UserType")

									//Skipping var Idp with unknown data type IamIdpRelationship
									if isMoRef(openapi.IamIdpRelationship{}) {
										cmd.Flags().String("Idp", "", "Idp")
									}

									//Skipping var Idpreference with unknown data type IamIdpReferenceRelationship
									if isMoRef(openapi.IamIdpReferenceRelationship{}) {
										cmd.Flags().String("Idpreference", "", "Idpreference")
									}

									//Skipping var LocalUserPassword with unknown data type IamLocalUserPasswordRelationship
									if isMoRef(openapi.IamLocalUserPasswordRelationship{}) {
										cmd.Flags().String("LocalUserPassword", "", "LocalUserPassword")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Name string

									//Skipping var Idp with unknown data type IamIdpRelationship

									//Skipping var Idpreference with unknown data type IamIdpReferenceRelationship

									//Skipping var Permissions with unknown data type []IamPermissionRelationship

									//Skipping var Qualifier with unknown data type IamQualifierRelationship

									//Skipping var Users with unknown data type []IamUserRelationship

									cmd := &cobra.Command{
										Use: "usergroup",

										Short: "Update a 'iam.UserGroup' resource.",
										Long: `Update a 'iam.UserGroup' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.PatchIamUserGroup(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Idp with unknown data type IamIdpRelationship
									if isMoRef(openapi.IamIdpRelationship{}) {
										cmd.Flags().String("Idp", "", "Idp")
									}

									//Skipping var Idpreference with unknown data type IamIdpReferenceRelationship
									if isMoRef(openapi.IamIdpReferenceRelationship{}) {
										cmd.Flags().String("Idpreference", "", "Idpreference")
									}

									//Skipping var Qualifier with unknown data type IamQualifierRelationship
									if isMoRef(openapi.IamQualifierRelationship{}) {
										cmd.Flags().String("Qualifier", "", "Qualifier")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Preference with unknown data type map[string]interface{}

									//Skipping var Idp with unknown data type IamIdpRelationship

									//Skipping var IdpReference with unknown data type IamIdpReferenceRelationship

									cmd := &cobra.Command{
										Use: "userpreference",

										Short: "Update a 'iam.UserPreference' resource.",
										Long: `Update a 'iam.UserPreference' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IamApi.PatchIamUserPreference(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Idp with unknown data type IamIdpRelationship
									if isMoRef(openapi.IamIdpRelationship{}) {
										cmd.Flags().String("Idp", "", "Idp")
									}

									//Skipping var IdpReference with unknown data type IamIdpReferenceRelationship
									if isMoRef(openapi.IamIdpReferenceRelationship{}) {
										cmd.Flags().String("IdpReference", "", "IdpReference")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "infra",

								Short: "Update Infra resource(s)",
								Long: `Update Infra resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Features with unknown data type []InfraFeatureDefinition

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "accountexperience",

										Short: "Update a 'infra.AccountExperience' resource.",
										Long: `Update a 'infra.AccountExperience' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.InfraApi.PatchInfraAccountExperience(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "inventory",

								Short: "Update Inventory resource(s)",
								Long: `Update Inventory resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Key string

									var Type string

									var Value string

									//Skipping var InventoryGenericInventoryHolder with unknown data type InventoryGenericInventoryHolderRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "genericinventory",

										Short: "Update a 'inventory.GenericInventory' resource.",
										Long: `Update a 'inventory.GenericInventory' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.InventoryApi.PatchInventoryGenericInventory(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Key, "Key", "", "Key")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									cmd.Flags().StringVar(&Value, "Value", "", "Value")

									//Skipping var InventoryGenericInventoryHolder with unknown data type InventoryGenericInventoryHolderRelationship
									if isMoRef(openapi.InventoryGenericInventoryHolderRelationship{}) {
										cmd.Flags().String("InventoryGenericInventoryHolder", "", "InventoryGenericInventoryHolder")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Endpoint string

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship

									//Skipping var GenericInventory with unknown data type []InventoryGenericInventoryRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "genericinventoryholder",

										Short: "Update a 'inventory.GenericInventoryHolder' resource.",
										Long: `Update a 'inventory.GenericInventoryHolder' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.InventoryApi.PatchInventoryGenericInventoryHolder(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Endpoint, "Endpoint", "", "Endpoint")

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship
									if isMoRef(openapi.ComputeBladeRelationship{}) {
										cmd.Flags().String("ComputeBlade", "", "ComputeBlade")
									}

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("ComputeRackUnit", "", "ComputeRackUnit")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "ipmioverlan",

								Short: "Update Ipmioverlan resource(s)",
								Long: `Update Ipmioverlan resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Enabled bool

									var EncryptionKey string

									var IsEncryptionKeySet bool

									var Privilege string

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "policy",

										Short: "Update a 'ipmioverlan.Policy' resource.",
										Long: `Update a 'ipmioverlan.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.IpmioverlanApi.PatchIpmioverlanPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									cmd.Flags().StringVar(&EncryptionKey, "EncryptionKey", "", "EncryptionKey")

									cmd.Flags().BoolVar(&IsEncryptionKeySet, "IsEncryptionKeySet", false, "IsEncryptionKeySet")

									cmd.Flags().StringVar(&Privilege, "Privilege", "", "Privilege")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "kvm",

								Short: "Update Kvm resource(s)",
								Long: `Update Kvm resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var EnableLocalServerVideo bool

									var EnableVideoEncryption bool

									var Enabled bool

									//Skipping var MaximumSessions with unknown data type int64

									//Skipping var RemotePort with unknown data type int64

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "policy",

										Short: "Update a 'kvm.Policy' resource.",
										Long: `Update a 'kvm.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.KvmApi.PatchKvmPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&EnableLocalServerVideo, "EnableLocalServerVideo", false, "EnableLocalServerVideo")

									cmd.Flags().BoolVar(&EnableVideoEncryption, "EnableVideoEncryption", false, "EnableVideoEncryption")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "license",

								Short: "Update License resource(s)",
								Long: `Update License resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var AccountId string

									var AgentData string

									var AuthExpireTime string

									var AuthInitialTime string

									var AuthNextTime string

									var Category string

									var DefaultLicenseType string

									var ErrorDesc string

									var Group string

									var HighestCompliantLicenseTier string

									//Skipping var LastSync with unknown data type time.Time

									//Skipping var LastUpdatedTime with unknown data type time.Time

									var LicenseState string

									var LicenseTechSupportInfo string

									var RegisterExpireTime string

									var RegisterInitialTime string

									var RegisterNextTime string

									var RegistrationStatus string

									var RenewFailureString string

									var SmartAccount string

									var SyncStatus string

									var VirtualAccount string

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var CustomerOp with unknown data type LicenseCustomerOpRelationship

									//Skipping var Licenseinfos with unknown data type []LicenseLicenseInfoRelationship

									//Skipping var SmartlicenseToken with unknown data type LicenseSmartlicenseTokenRelationship

									cmd := &cobra.Command{
										Use: "accountlicensedata",

										Short: "Update a 'license.AccountLicenseData' resource.",
										Long: `Update a 'license.AccountLicenseData' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.LicenseApi.PatchLicenseAccountLicenseData(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&AccountId, "AccountId", "", "AccountId")

									cmd.Flags().StringVar(&AgentData, "AgentData", "", "AgentData")

									cmd.Flags().StringVar(&AuthExpireTime, "AuthExpireTime", "", "AuthExpireTime")

									cmd.Flags().StringVar(&AuthInitialTime, "AuthInitialTime", "", "AuthInitialTime")

									cmd.Flags().StringVar(&AuthNextTime, "AuthNextTime", "", "AuthNextTime")

									cmd.Flags().StringVar(&Category, "Category", "", "Category")

									cmd.Flags().StringVar(&DefaultLicenseType, "DefaultLicenseType", "", "DefaultLicenseType")

									cmd.Flags().StringVar(&ErrorDesc, "ErrorDesc", "", "ErrorDesc")

									cmd.Flags().StringVar(&Group, "Group", "", "Group")

									cmd.Flags().StringVar(&HighestCompliantLicenseTier, "HighestCompliantLicenseTier", "", "HighestCompliantLicenseTier")

									cmd.Flags().StringVar(&LicenseState, "LicenseState", "", "LicenseState")

									cmd.Flags().StringVar(&LicenseTechSupportInfo, "LicenseTechSupportInfo", "", "LicenseTechSupportInfo")

									cmd.Flags().StringVar(&RegisterExpireTime, "RegisterExpireTime", "", "RegisterExpireTime")

									cmd.Flags().StringVar(&RegisterInitialTime, "RegisterInitialTime", "", "RegisterInitialTime")

									cmd.Flags().StringVar(&RegisterNextTime, "RegisterNextTime", "", "RegisterNextTime")

									cmd.Flags().StringVar(&RegistrationStatus, "RegistrationStatus", "", "RegistrationStatus")

									cmd.Flags().StringVar(&RenewFailureString, "RenewFailureString", "", "RenewFailureString")

									cmd.Flags().StringVar(&SmartAccount, "SmartAccount", "", "SmartAccount")

									cmd.Flags().StringVar(&SyncStatus, "SyncStatus", "", "SyncStatus")

									cmd.Flags().StringVar(&VirtualAccount, "VirtualAccount", "", "VirtualAccount")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var CustomerOp with unknown data type LicenseCustomerOpRelationship
									if isMoRef(openapi.LicenseCustomerOpRelationship{}) {
										cmd.Flags().String("CustomerOp", "", "CustomerOp")
									}

									//Skipping var SmartlicenseToken with unknown data type LicenseSmartlicenseTokenRelationship
									if isMoRef(openapi.LicenseSmartlicenseTokenRelationship{}) {
										cmd.Flags().String("SmartlicenseToken", "", "SmartlicenseToken")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var ActiveAdmin bool

									var DeregisterDevice bool

									var EnableTrial bool

									//Skipping var EvaluationPeriod with unknown data type int64

									//Skipping var ExtraEvaluation with unknown data type int64

									var RenewAuthorization bool

									var RenewIdCertificate bool

									var ShowAgentTechSupport bool

									//Skipping var AccountLicenseData with unknown data type LicenseAccountLicenseDataRelationship

									cmd := &cobra.Command{
										Use: "customerop",

										Short: "Update a 'license.CustomerOp' resource.",
										Long: `Update a 'license.CustomerOp' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.LicenseApi.PatchLicenseCustomerOp(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&ActiveAdmin, "ActiveAdmin", false, "ActiveAdmin")

									cmd.Flags().BoolVar(&DeregisterDevice, "DeregisterDevice", false, "DeregisterDevice")

									cmd.Flags().BoolVar(&EnableTrial, "EnableTrial", false, "EnableTrial")

									cmd.Flags().BoolVar(&RenewAuthorization, "RenewAuthorization", false, "RenewAuthorization")

									cmd.Flags().BoolVar(&RenewIdCertificate, "RenewIdCertificate", false, "RenewIdCertificate")

									cmd.Flags().BoolVar(&ShowAgentTechSupport, "ShowAgentTechSupport", false, "ShowAgentTechSupport")

									//Skipping var AccountLicenseData with unknown data type LicenseAccountLicenseDataRelationship
									if isMoRef(openapi.LicenseAccountLicenseDataRelationship{}) {
										cmd.Flags().String("AccountLicenseData", "", "AccountLicenseData")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var ActiveAdmin bool

									//Skipping var DaysLeft with unknown data type int64

									//Skipping var EndTime with unknown data type time.Time

									var EnforceMode string

									var ErrorDesc string

									//Skipping var EvaluationPeriod with unknown data type int64

									//Skipping var ExtraEvaluation with unknown data type int64

									//Skipping var LicenseCount with unknown data type int64

									var LicenseState string

									var LicenseType string

									//Skipping var StartTime with unknown data type time.Time

									var TrialAdmin bool

									//Skipping var AccountLicenseData with unknown data type LicenseAccountLicenseDataRelationship

									cmd := &cobra.Command{
										Use: "licenseinfo",

										Short: "Update a 'license.LicenseInfo' resource.",
										Long: `Update a 'license.LicenseInfo' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.LicenseApi.PatchLicenseLicenseInfo(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&ActiveAdmin, "ActiveAdmin", false, "ActiveAdmin")

									cmd.Flags().StringVar(&EnforceMode, "EnforceMode", "", "EnforceMode")

									cmd.Flags().StringVar(&ErrorDesc, "ErrorDesc", "", "ErrorDesc")

									cmd.Flags().StringVar(&LicenseState, "LicenseState", "", "LicenseState")

									cmd.Flags().StringVar(&LicenseType, "LicenseType", "", "LicenseType")

									cmd.Flags().BoolVar(&TrialAdmin, "TrialAdmin", false, "TrialAdmin")

									//Skipping var AccountLicenseData with unknown data type LicenseAccountLicenseDataRelationship
									if isMoRef(openapi.LicenseAccountLicenseDataRelationship{}) {
										cmd.Flags().String("AccountLicenseData", "", "AccountLicenseData")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Token string

									//Skipping var AccountLicenseData with unknown data type LicenseAccountLicenseDataRelationship

									cmd := &cobra.Command{
										Use: "smartlicensetoken",

										Short: "Update a 'license.SmartlicenseToken' resource.",
										Long: `Update a 'license.SmartlicenseToken' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.LicenseApi.PatchLicenseSmartlicenseToken(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Token, "Token", "", "Token")

									//Skipping var AccountLicenseData with unknown data type LicenseAccountLicenseDataRelationship
									if isMoRef(openapi.LicenseAccountLicenseDataRelationship{}) {
										cmd.Flags().String("AccountLicenseData", "", "AccountLicenseData")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "ls",

								Short: "Update Ls resource(s)",
								Long: `Update Ls resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var AssignState string

									var AssocState string

									var AssociatedServer string

									var ConfigState string

									var Name string

									var OperState string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "serviceprofile",

										Short: "Update a 'ls.ServiceProfile' resource.",
										Long: `Update a 'ls.ServiceProfile' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.LsApi.PatchLsServiceProfile(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&AssignState, "AssignState", "", "AssignState")

									cmd.Flags().StringVar(&AssocState, "AssocState", "", "AssocState")

									cmd.Flags().StringVar(&AssociatedServer, "AssociatedServer", "", "AssociatedServer")

									cmd.Flags().StringVar(&ConfigState, "ConfigState", "", "ConfigState")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "management",

								Short: "Update Management resource(s)",
								Long: `Update Management resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									//Skipping var AdapterUnit with unknown data type AdapterUnitRelationship

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship

									//Skipping var ManagementInterfaces with unknown data type []ManagementInterfaceRelationship

									//Skipping var NetworkElement with unknown data type NetworkElementRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var RunningFirmware with unknown data type []FirmwareRunningFirmwareRelationship

									//Skipping var StorageSasExpander with unknown data type StorageSasExpanderRelationship

									//Skipping var TopSystem with unknown data type TopSystemRelationship

									cmd := &cobra.Command{
										Use: "controller",

										Short: "Update a 'management.Controller' resource.",
										Long: `Update a 'management.Controller' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ManagementApi.PatchManagementController(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									//Skipping var AdapterUnit with unknown data type AdapterUnitRelationship
									if isMoRef(openapi.AdapterUnitRelationship{}) {
										cmd.Flags().String("AdapterUnit", "", "AdapterUnit")
									}

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship
									if isMoRef(openapi.ComputeBladeRelationship{}) {
										cmd.Flags().String("ComputeBlade", "", "ComputeBlade")
									}

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("ComputeRackUnit", "", "ComputeRackUnit")
									}

									//Skipping var NetworkElement with unknown data type NetworkElementRelationship
									if isMoRef(openapi.NetworkElementRelationship{}) {
										cmd.Flags().String("NetworkElement", "", "NetworkElement")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageSasExpander with unknown data type StorageSasExpanderRelationship
									if isMoRef(openapi.StorageSasExpanderRelationship{}) {
										cmd.Flags().String("StorageSasExpander", "", "StorageSasExpander")
									}

									//Skipping var TopSystem with unknown data type TopSystemRelationship
									if isMoRef(openapi.TopSystemRelationship{}) {
										cmd.Flags().String("TopSystem", "", "TopSystem")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var EntityId string

									var Leadership string

									//Skipping var NetworkElement with unknown data type NetworkElementRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "entity",

										Short: "Update a 'management.Entity' resource.",
										Long: `Update a 'management.Entity' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ManagementApi.PatchManagementEntity(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&EntityId, "EntityId", "", "EntityId")

									cmd.Flags().StringVar(&Leadership, "Leadership", "", "Leadership")

									//Skipping var NetworkElement with unknown data type NetworkElementRelationship
									if isMoRef(openapi.NetworkElementRelationship{}) {
										cmd.Flags().String("NetworkElement", "", "NetworkElement")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Gateway string

									var HostName string

									var IpAddress string

									var Ipv4Address string

									var Ipv4Gateway string

									var Ipv4Mask string

									var Ipv6Address string

									var Ipv6Gateway string

									//Skipping var Ipv6Prefix with unknown data type int64

									var MacAddress string

									var Mask string

									var SwitchId string

									var UemConnStatus string

									var VirtualHostName string

									//Skipping var ManagementController with unknown data type ManagementControllerRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "interface",

										Short: "Update a 'management.Interface' resource.",
										Long: `Update a 'management.Interface' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ManagementApi.PatchManagementInterface(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Gateway, "Gateway", "", "Gateway")

									cmd.Flags().StringVar(&HostName, "HostName", "", "HostName")

									cmd.Flags().StringVar(&IpAddress, "IpAddress", "", "IpAddress")

									cmd.Flags().StringVar(&Ipv4Address, "Ipv4Address", "", "Ipv4Address")

									cmd.Flags().StringVar(&Ipv4Gateway, "Ipv4Gateway", "", "Ipv4Gateway")

									cmd.Flags().StringVar(&Ipv4Mask, "Ipv4Mask", "", "Ipv4Mask")

									cmd.Flags().StringVar(&Ipv6Address, "Ipv6Address", "", "Ipv6Address")

									cmd.Flags().StringVar(&Ipv6Gateway, "Ipv6Gateway", "", "Ipv6Gateway")

									cmd.Flags().StringVar(&MacAddress, "MacAddress", "", "MacAddress")

									cmd.Flags().StringVar(&Mask, "Mask", "", "Mask")

									cmd.Flags().StringVar(&SwitchId, "SwitchId", "", "SwitchId")

									cmd.Flags().StringVar(&UemConnStatus, "UemConnStatus", "", "UemConnStatus")

									cmd.Flags().StringVar(&VirtualHostName, "VirtualHostName", "", "VirtualHostName")

									//Skipping var ManagementController with unknown data type ManagementControllerRelationship
									if isMoRef(openapi.ManagementControllerRelationship{}) {
										cmd.Flags().String("ManagementController", "", "ManagementController")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "memory",

								Short: "Update Memory resource(s)",
								Long: `Update Memory resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									//Skipping var ArrayId with unknown data type int64

									//Skipping var CpuId with unknown data type int64

									var CurrentCapacity string

									var ErrorCorrection string

									var MaxCapacity string

									var MaxDevices string

									var OperPowerState string

									var Presence string

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship

									//Skipping var PersistentMemoryUnits with unknown data type []MemoryPersistentMemoryUnitRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var Units with unknown data type []MemoryUnitRelationship

									cmd := &cobra.Command{
										Use: "array",

										Short: "Update a 'memory.Array' resource.",
										Long: `Update a 'memory.Array' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.PatchMemoryArray(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&CurrentCapacity, "CurrentCapacity", "", "CurrentCapacity")

									cmd.Flags().StringVar(&ErrorCorrection, "ErrorCorrection", "", "ErrorCorrection")

									cmd.Flags().StringVar(&MaxCapacity, "MaxCapacity", "", "MaxCapacity")

									cmd.Flags().StringVar(&MaxDevices, "MaxDevices", "", "MaxDevices")

									cmd.Flags().StringVar(&OperPowerState, "OperPowerState", "", "OperPowerState")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship
									if isMoRef(openapi.ComputeBoardRelationship{}) {
										cmd.Flags().String("ComputeBoard", "", "ComputeBoard")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var ConfigErrorDesc string

									var ConfigResult string

									//Skipping var ConfigSequenceNo with unknown data type int64

									var ConfigState string

									//Skipping var MemoryPersistentMemoryConfiguration with unknown data type MemoryPersistentMemoryConfigurationRelationship

									//Skipping var PersistentMemoryNamespaceConfigResults with unknown data type []MemoryPersistentMemoryNamespaceConfigResultRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "persistentmemoryconfigresult",

										Short: "Update a 'memory.PersistentMemoryConfigResult' resource.",
										Long: `Update a 'memory.PersistentMemoryConfigResult' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.PatchMemoryPersistentMemoryConfigResult(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&ConfigErrorDesc, "ConfigErrorDesc", "", "ConfigErrorDesc")

									cmd.Flags().StringVar(&ConfigResult, "ConfigResult", "", "ConfigResult")

									cmd.Flags().StringVar(&ConfigState, "ConfigState", "", "ConfigState")

									//Skipping var MemoryPersistentMemoryConfiguration with unknown data type MemoryPersistentMemoryConfigurationRelationship
									if isMoRef(openapi.MemoryPersistentMemoryConfigurationRelationship{}) {
										cmd.Flags().String("MemoryPersistentMemoryConfiguration", "", "MemoryPersistentMemoryConfiguration")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var MemoryCapacity string

									var NumOfModules string

									var NumOfRegions string

									var PersistentMemoryCapacity string

									var ReservedCapacity string

									var SecurityState string

									var TotalCapacity string

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship

									//Skipping var PersistentMemoryConfigResult with unknown data type MemoryPersistentMemoryConfigResultRelationship

									//Skipping var PersistentMemoryRegions with unknown data type []MemoryPersistentMemoryRegionRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "persistentmemoryconfiguration",

										Short: "Update a 'memory.PersistentMemoryConfiguration' resource.",
										Long: `Update a 'memory.PersistentMemoryConfiguration' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.PatchMemoryPersistentMemoryConfiguration(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&MemoryCapacity, "MemoryCapacity", "", "MemoryCapacity")

									cmd.Flags().StringVar(&NumOfModules, "NumOfModules", "", "NumOfModules")

									cmd.Flags().StringVar(&NumOfRegions, "NumOfRegions", "", "NumOfRegions")

									cmd.Flags().StringVar(&PersistentMemoryCapacity, "PersistentMemoryCapacity", "", "PersistentMemoryCapacity")

									cmd.Flags().StringVar(&ReservedCapacity, "ReservedCapacity", "", "ReservedCapacity")

									cmd.Flags().StringVar(&SecurityState, "SecurityState", "", "SecurityState")

									cmd.Flags().StringVar(&TotalCapacity, "TotalCapacity", "", "TotalCapacity")

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship
									if isMoRef(openapi.ComputeBoardRelationship{}) {
										cmd.Flags().String("ComputeBoard", "", "ComputeBoard")
									}

									//Skipping var PersistentMemoryConfigResult with unknown data type MemoryPersistentMemoryConfigResultRelationship
									if isMoRef(openapi.MemoryPersistentMemoryConfigResultRelationship{}) {
										cmd.Flags().String("PersistentMemoryConfigResult", "", "PersistentMemoryConfigResult")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Capacity string

									var HealthState string

									var LabelVersion string

									var Mode string

									var Name string

									var Uuid string

									//Skipping var MemoryPersistentMemoryRegion with unknown data type MemoryPersistentMemoryRegionRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "persistentmemorynamespace",

										Short: "Update a 'memory.PersistentMemoryNamespace' resource.",
										Long: `Update a 'memory.PersistentMemoryNamespace' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.PatchMemoryPersistentMemoryNamespace(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Capacity, "Capacity", "", "Capacity")

									cmd.Flags().StringVar(&HealthState, "HealthState", "", "HealthState")

									cmd.Flags().StringVar(&LabelVersion, "LabelVersion", "", "LabelVersion")

									cmd.Flags().StringVar(&Mode, "Mode", "", "Mode")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Uuid, "Uuid", "", "Uuid")

									//Skipping var MemoryPersistentMemoryRegion with unknown data type MemoryPersistentMemoryRegionRelationship
									if isMoRef(openapi.MemoryPersistentMemoryRegionRelationship{}) {
										cmd.Flags().String("MemoryPersistentMemoryRegion", "", "MemoryPersistentMemoryRegion")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var ConfigStatus string

									var Name string

									var SocketId string

									var SocketMemoryId string

									//Skipping var MemoryPersistentMemoryConfigResult with unknown data type MemoryPersistentMemoryConfigResultRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "persistentmemorynamespaceconfigresult",

										Short: "Update a 'memory.PersistentMemoryNamespaceConfigResult' resource.",
										Long: `Update a 'memory.PersistentMemoryNamespaceConfigResult' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.PatchMemoryPersistentMemoryNamespaceConfigResult(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&ConfigStatus, "ConfigStatus", "", "ConfigStatus")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&SocketId, "SocketId", "", "SocketId")

									cmd.Flags().StringVar(&SocketMemoryId, "SocketMemoryId", "", "SocketMemoryId")

									//Skipping var MemoryPersistentMemoryConfigResult with unknown data type MemoryPersistentMemoryConfigResultRelationship
									if isMoRef(openapi.MemoryPersistentMemoryConfigResultRelationship{}) {
										cmd.Flags().String("MemoryPersistentMemoryConfigResult", "", "MemoryPersistentMemoryConfigResult")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var Goals with unknown data type []MemoryPersistentMemoryGoal

									//Skipping var LocalSecurity with unknown data type MemoryPersistentMemoryLocalSecurity

									//Skipping var LogicalNamespaces with unknown data type []MemoryPersistentMemoryLogicalNamespace

									var ManagementMode string

									var RetainNamespaces bool

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "persistentmemorypolicy",

										Short: "Update a 'memory.PersistentMemoryPolicy' resource.",
										Long: `Update a 'memory.PersistentMemoryPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.PatchMemoryPersistentMemoryPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var LocalSecurity with unknown data type MemoryPersistentMemoryLocalSecurity
									if isMoRef(openapi.MemoryPersistentMemoryLocalSecurity{}) {
										cmd.Flags().String("LocalSecurity", "", "LocalSecurity")
									}

									cmd.Flags().StringVar(&ManagementMode, "ManagementMode", "", "ManagementMode")

									cmd.Flags().BoolVar(&RetainNamespaces, "RetainNamespaces", false, "RetainNamespaces")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var FreeCapacity string

									var HealthState string

									var InterleavedSetId string

									var LocaterIds string

									var PersistentMemoryType string

									var RegionId string

									var SocketId string

									var SocketMemoryId string

									var TotalCapacity string

									//Skipping var MemoryPersistentMemoryConfiguration with unknown data type MemoryPersistentMemoryConfigurationRelationship

									//Skipping var PersistentMemoryNamespaces with unknown data type []MemoryPersistentMemoryNamespaceRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "persistentmemoryregion",

										Short: "Update a 'memory.PersistentMemoryRegion' resource.",
										Long: `Update a 'memory.PersistentMemoryRegion' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.PatchMemoryPersistentMemoryRegion(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&FreeCapacity, "FreeCapacity", "", "FreeCapacity")

									cmd.Flags().StringVar(&HealthState, "HealthState", "", "HealthState")

									cmd.Flags().StringVar(&InterleavedSetId, "InterleavedSetId", "", "InterleavedSetId")

									cmd.Flags().StringVar(&LocaterIds, "LocaterIds", "", "LocaterIds")

									cmd.Flags().StringVar(&PersistentMemoryType, "PersistentMemoryType", "", "PersistentMemoryType")

									cmd.Flags().StringVar(&RegionId, "RegionId", "", "RegionId")

									cmd.Flags().StringVar(&SocketId, "SocketId", "", "SocketId")

									cmd.Flags().StringVar(&SocketMemoryId, "SocketMemoryId", "", "SocketMemoryId")

									cmd.Flags().StringVar(&TotalCapacity, "TotalCapacity", "", "TotalCapacity")

									//Skipping var MemoryPersistentMemoryConfiguration with unknown data type MemoryPersistentMemoryConfigurationRelationship
									if isMoRef(openapi.MemoryPersistentMemoryConfigurationRelationship{}) {
										cmd.Flags().String("MemoryPersistentMemoryConfiguration", "", "MemoryPersistentMemoryConfiguration")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var AdminState string

									//Skipping var ArrayId with unknown data type int64

									//Skipping var Bank with unknown data type int64

									var Capacity string

									var Clock string

									var FormFactor string

									var Latency string

									var Location string

									var OperPowerState string

									var OperState string

									var Operability string

									var Presence string

									//Skipping var Set with unknown data type int64

									var Speed string

									var Thermal string

									var Type string

									var Visibility string

									var Width string

									var AppDirectCapacity string

									var CountStatus string

									var FirmwareVersion string

									var FrozenStatus string

									var HealthState string

									var LockStatus string

									var MemoryCapacity string

									//Skipping var MemoryId with unknown data type int64

									var PersistentMemoryCapacity string

									var ReservedCapacity string

									var SecurityStatus string

									var SocketId string

									var SocketMemoryId string

									var TotalCapacity string

									var Uid string

									//Skipping var MemoryArray with unknown data type MemoryArrayRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "persistentmemoryunit",

										Short: "Update a 'memory.PersistentMemoryUnit' resource.",
										Long: `Update a 'memory.PersistentMemoryUnit' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.PatchMemoryPersistentMemoryUnit(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&AdminState, "AdminState", "", "AdminState")

									cmd.Flags().StringVar(&Capacity, "Capacity", "", "Capacity")

									cmd.Flags().StringVar(&Clock, "Clock", "", "Clock")

									cmd.Flags().StringVar(&FormFactor, "FormFactor", "", "FormFactor")

									cmd.Flags().StringVar(&Latency, "Latency", "", "Latency")

									cmd.Flags().StringVar(&Location, "Location", "", "Location")

									cmd.Flags().StringVar(&OperPowerState, "OperPowerState", "", "OperPowerState")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&Operability, "Operability", "", "Operability")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&Speed, "Speed", "", "Speed")

									cmd.Flags().StringVar(&Thermal, "Thermal", "", "Thermal")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									cmd.Flags().StringVar(&Visibility, "Visibility", "", "Visibility")

									cmd.Flags().StringVar(&Width, "Width", "", "Width")

									cmd.Flags().StringVar(&AppDirectCapacity, "AppDirectCapacity", "", "AppDirectCapacity")

									cmd.Flags().StringVar(&CountStatus, "CountStatus", "", "CountStatus")

									cmd.Flags().StringVar(&FirmwareVersion, "FirmwareVersion", "", "FirmwareVersion")

									cmd.Flags().StringVar(&FrozenStatus, "FrozenStatus", "", "FrozenStatus")

									cmd.Flags().StringVar(&HealthState, "HealthState", "", "HealthState")

									cmd.Flags().StringVar(&LockStatus, "LockStatus", "", "LockStatus")

									cmd.Flags().StringVar(&MemoryCapacity, "MemoryCapacity", "", "MemoryCapacity")

									cmd.Flags().StringVar(&PersistentMemoryCapacity, "PersistentMemoryCapacity", "", "PersistentMemoryCapacity")

									cmd.Flags().StringVar(&ReservedCapacity, "ReservedCapacity", "", "ReservedCapacity")

									cmd.Flags().StringVar(&SecurityStatus, "SecurityStatus", "", "SecurityStatus")

									cmd.Flags().StringVar(&SocketId, "SocketId", "", "SocketId")

									cmd.Flags().StringVar(&SocketMemoryId, "SocketMemoryId", "", "SocketMemoryId")

									cmd.Flags().StringVar(&TotalCapacity, "TotalCapacity", "", "TotalCapacity")

									cmd.Flags().StringVar(&Uid, "Uid", "", "Uid")

									//Skipping var MemoryArray with unknown data type MemoryArrayRelationship
									if isMoRef(openapi.MemoryArrayRelationship{}) {
										cmd.Flags().String("MemoryArray", "", "MemoryArray")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var AdminState string

									//Skipping var ArrayId with unknown data type int64

									//Skipping var Bank with unknown data type int64

									var Capacity string

									var Clock string

									var FormFactor string

									var Latency string

									var Location string

									var OperPowerState string

									var OperState string

									var Operability string

									var Presence string

									//Skipping var Set with unknown data type int64

									var Speed string

									var Thermal string

									var Type string

									var Visibility string

									var Width string

									//Skipping var MemoryId with unknown data type int64

									//Skipping var MemoryArray with unknown data type MemoryArrayRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "unit",

										Short: "Update a 'memory.Unit' resource.",
										Long: `Update a 'memory.Unit' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.MemoryApi.PatchMemoryUnit(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&AdminState, "AdminState", "", "AdminState")

									cmd.Flags().StringVar(&Capacity, "Capacity", "", "Capacity")

									cmd.Flags().StringVar(&Clock, "Clock", "", "Clock")

									cmd.Flags().StringVar(&FormFactor, "FormFactor", "", "FormFactor")

									cmd.Flags().StringVar(&Latency, "Latency", "", "Latency")

									cmd.Flags().StringVar(&Location, "Location", "", "Location")

									cmd.Flags().StringVar(&OperPowerState, "OperPowerState", "", "OperPowerState")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&Operability, "Operability", "", "Operability")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&Speed, "Speed", "", "Speed")

									cmd.Flags().StringVar(&Thermal, "Thermal", "", "Thermal")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									cmd.Flags().StringVar(&Visibility, "Visibility", "", "Visibility")

									cmd.Flags().StringVar(&Width, "Width", "", "Width")

									//Skipping var MemoryArray with unknown data type MemoryArrayRelationship
									if isMoRef(openapi.MemoryArrayRelationship{}) {
										cmd.Flags().String("MemoryArray", "", "MemoryArray")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "network",

								Short: "Update Network resource(s)",
								Long: `Update Network resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var AdminInbandInterfaceState string

									//Skipping var FaultSummary with unknown data type int64

									var InbandIpAddress string

									var InbandIpGateway string

									var InbandIpMask string

									//Skipping var InbandVlan with unknown data type int64

									var OutOfBandIpAddress string

									var OutOfBandIpGateway string

									var OutOfBandIpMask string

									var OutOfBandIpv4Address string

									var OutOfBandIpv4Gateway string

									var OutOfBandIpv4Mask string

									var OutOfBandIpv6Address string

									var OutOfBandIpv6Gateway string

									var OutOfBandIpv6Prefix string

									var OutOfBandMac string

									var SwitchId string

									//Skipping var Cards with unknown data type []EquipmentSwitchCardRelationship

									//Skipping var Fanmodules with unknown data type []EquipmentFanModuleRelationship

									//Skipping var ManagementContoller with unknown data type ManagementControllerRelationship

									//Skipping var ManagementEntity with unknown data type ManagementEntityRelationship

									//Skipping var Psus with unknown data type []EquipmentPsuRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var TopSystem with unknown data type TopSystemRelationship

									//Skipping var UcsmRunningFirmware with unknown data type FirmwareRunningFirmwareRelationship

									cmd := &cobra.Command{
										Use: "element",

										Short: "Update a 'network.Element' resource.",
										Long: `Update a 'network.Element' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NetworkApi.PatchNetworkElement(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&AdminInbandInterfaceState, "AdminInbandInterfaceState", "", "AdminInbandInterfaceState")

									cmd.Flags().StringVar(&InbandIpAddress, "InbandIpAddress", "", "InbandIpAddress")

									cmd.Flags().StringVar(&InbandIpGateway, "InbandIpGateway", "", "InbandIpGateway")

									cmd.Flags().StringVar(&InbandIpMask, "InbandIpMask", "", "InbandIpMask")

									cmd.Flags().StringVar(&OutOfBandIpAddress, "OutOfBandIpAddress", "", "OutOfBandIpAddress")

									cmd.Flags().StringVar(&OutOfBandIpGateway, "OutOfBandIpGateway", "", "OutOfBandIpGateway")

									cmd.Flags().StringVar(&OutOfBandIpMask, "OutOfBandIpMask", "", "OutOfBandIpMask")

									cmd.Flags().StringVar(&OutOfBandIpv4Address, "OutOfBandIpv4Address", "", "OutOfBandIpv4Address")

									cmd.Flags().StringVar(&OutOfBandIpv4Gateway, "OutOfBandIpv4Gateway", "", "OutOfBandIpv4Gateway")

									cmd.Flags().StringVar(&OutOfBandIpv4Mask, "OutOfBandIpv4Mask", "", "OutOfBandIpv4Mask")

									cmd.Flags().StringVar(&OutOfBandIpv6Address, "OutOfBandIpv6Address", "", "OutOfBandIpv6Address")

									cmd.Flags().StringVar(&OutOfBandIpv6Gateway, "OutOfBandIpv6Gateway", "", "OutOfBandIpv6Gateway")

									cmd.Flags().StringVar(&OutOfBandIpv6Prefix, "OutOfBandIpv6Prefix", "", "OutOfBandIpv6Prefix")

									cmd.Flags().StringVar(&OutOfBandMac, "OutOfBandMac", "", "OutOfBandMac")

									cmd.Flags().StringVar(&SwitchId, "SwitchId", "", "SwitchId")

									//Skipping var ManagementContoller with unknown data type ManagementControllerRelationship
									if isMoRef(openapi.ManagementControllerRelationship{}) {
										cmd.Flags().String("ManagementContoller", "", "ManagementContoller")
									}

									//Skipping var ManagementEntity with unknown data type ManagementEntityRelationship
									if isMoRef(openapi.ManagementEntityRelationship{}) {
										cmd.Flags().String("ManagementEntity", "", "ManagementEntity")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var TopSystem with unknown data type TopSystemRelationship
									if isMoRef(openapi.TopSystemRelationship{}) {
										cmd.Flags().String("TopSystem", "", "TopSystem")
									}

									//Skipping var UcsmRunningFirmware with unknown data type FirmwareRunningFirmwareRelationship
									if isMoRef(openapi.FirmwareRunningFirmwareRelationship{}) {
										cmd.Flags().String("UcsmRunningFirmware", "", "UcsmRunningFirmware")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "networkconfig",

								Short: "Update Networkconfig resource(s)",
								Long: `Update Networkconfig resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var AlternateIpv4dnsServer string

									var AlternateIpv6dnsServer string

									var DynamicDnsDomain string

									var EnableDynamicDns bool

									var EnableIpv4dnsFromDhcp bool

									var EnableIpv6 bool

									var EnableIpv6dnsFromDhcp bool

									var PreferredIpv4dnsServer string

									var PreferredIpv6dnsServer string

									//Skipping var ApplianceAccount with unknown data type IamAccountRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "policy",

										Short: "Update a 'networkconfig.Policy' resource.",
										Long: `Update a 'networkconfig.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NetworkconfigApi.PatchNetworkconfigPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&AlternateIpv4dnsServer, "AlternateIpv4dnsServer", "", "AlternateIpv4dnsServer")

									cmd.Flags().StringVar(&AlternateIpv6dnsServer, "AlternateIpv6dnsServer", "", "AlternateIpv6dnsServer")

									cmd.Flags().StringVar(&DynamicDnsDomain, "DynamicDnsDomain", "", "DynamicDnsDomain")

									cmd.Flags().BoolVar(&EnableDynamicDns, "EnableDynamicDns", false, "EnableDynamicDns")

									cmd.Flags().BoolVar(&EnableIpv4dnsFromDhcp, "EnableIpv4dnsFromDhcp", false, "EnableIpv4dnsFromDhcp")

									cmd.Flags().BoolVar(&EnableIpv6, "EnableIpv6", false, "EnableIpv6")

									cmd.Flags().BoolVar(&EnableIpv6dnsFromDhcp, "EnableIpv6dnsFromDhcp", false, "EnableIpv6dnsFromDhcp")

									cmd.Flags().StringVar(&PreferredIpv4dnsServer, "PreferredIpv4dnsServer", "", "PreferredIpv4dnsServer")

									cmd.Flags().StringVar(&PreferredIpv6dnsServer, "PreferredIpv6dnsServer", "", "PreferredIpv6dnsServer")

									//Skipping var ApplianceAccount with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("ApplianceAccount", "", "ApplianceAccount")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "ntp",

								Short: "Update Ntp resource(s)",
								Long: `Update Ntp resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Enabled bool

									var NtpServers []string

									//Skipping var ApplianceAccount with unknown data type IamAccountRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "policy",

										Short: "Update a 'ntp.Policy' resource.",
										Long: `Update a 'ntp.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.NtpApi.PatchNtpPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									cmd.Flags().StringSliceVar(&NtpServers, "NtpServers", []string{}, "NtpServers")

									//Skipping var ApplianceAccount with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("ApplianceAccount", "", "ApplianceAccount")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "organization",

								Short: "Update Organization resource(s)",
								Long: `Update Organization resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var ResourceGroups with unknown data type []ResourceGroupRelationship

									cmd := &cobra.Command{
										Use: "organization",

										Short: "Update a 'organization.Organization' resource.",
										Long: `Update a 'organization.Organization' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.OrganizationApi.PatchOrganizationOrganization(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "pci",

								Short: "Update Pci resource(s)",
								Long: `Update Pci resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var FirmwareVersion string

									var Pid string

									var SlotId string

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "device",

										Short: "Update a 'pci.Device' resource.",
										Long: `Update a 'pci.Device' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.PciApi.PatchPciDevice(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&FirmwareVersion, "FirmwareVersion", "", "FirmwareVersion")

									cmd.Flags().StringVar(&Pid, "Pid", "", "Pid")

									cmd.Flags().StringVar(&SlotId, "SlotId", "", "SlotId")

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship
									if isMoRef(openapi.ComputeBladeRelationship{}) {
										cmd.Flags().String("ComputeBlade", "", "ComputeBlade")
									}

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("ComputeRackUnit", "", "ComputeRackUnit")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var Adapter string

									var LinkSpeed string

									var LinkStatus string

									var LinkWidth string

									var PciSlot string

									var SlotStatus string

									//Skipping var PciSwitch with unknown data type PciSwitchRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "link",

										Short: "Update a 'pci.Link' resource.",
										Long: `Update a 'pci.Link' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.PciApi.PatchPciLink(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&Adapter, "Adapter", "", "Adapter")

									cmd.Flags().StringVar(&LinkSpeed, "LinkSpeed", "", "LinkSpeed")

									cmd.Flags().StringVar(&LinkStatus, "LinkStatus", "", "LinkStatus")

									cmd.Flags().StringVar(&LinkWidth, "LinkWidth", "", "LinkWidth")

									cmd.Flags().StringVar(&PciSlot, "PciSlot", "", "PciSlot")

									cmd.Flags().StringVar(&SlotStatus, "SlotStatus", "", "SlotStatus")

									//Skipping var PciSwitch with unknown data type PciSwitchRelationship
									if isMoRef(openapi.PciSwitchRelationship{}) {
										cmd.Flags().String("PciSwitch", "", "PciSwitch")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var DeviceId string

									var Health string

									var NumOfAdaptors string

									var PciAddress string

									var PciSlot string

									var ProductName string

									var ProductRevision string

									var SubDeviceId string

									var SubVendorId string

									var Temperature string

									var Type string

									var VendorId string

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship

									//Skipping var Links with unknown data type []PciLinkRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "switch",

										Short: "Update a 'pci.Switch' resource.",
										Long: `Update a 'pci.Switch' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.PciApi.PatchPciSwitch(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&DeviceId, "DeviceId", "", "DeviceId")

									cmd.Flags().StringVar(&Health, "Health", "", "Health")

									cmd.Flags().StringVar(&NumOfAdaptors, "NumOfAdaptors", "", "NumOfAdaptors")

									cmd.Flags().StringVar(&PciAddress, "PciAddress", "", "PciAddress")

									cmd.Flags().StringVar(&PciSlot, "PciSlot", "", "PciSlot")

									cmd.Flags().StringVar(&ProductName, "ProductName", "", "ProductName")

									cmd.Flags().StringVar(&ProductRevision, "ProductRevision", "", "ProductRevision")

									cmd.Flags().StringVar(&SubDeviceId, "SubDeviceId", "", "SubDeviceId")

									cmd.Flags().StringVar(&SubVendorId, "SubVendorId", "", "SubVendorId")

									cmd.Flags().StringVar(&Temperature, "Temperature", "", "Temperature")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									cmd.Flags().StringVar(&VendorId, "VendorId", "", "VendorId")

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship
									if isMoRef(openapi.ComputeBoardRelationship{}) {
										cmd.Flags().String("ComputeBoard", "", "ComputeBoard")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "port",

								Short: "Update Port resource(s)",
								Long: `Update Port resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Transport string

									//Skipping var EquipmentSharedIoModule with unknown data type EquipmentSharedIoModuleRelationship

									//Skipping var EquipmentSwitchCard with unknown data type EquipmentSwitchCardRelationship

									//Skipping var EthernetPorts with unknown data type []EtherPhysicalPortRelationship

									//Skipping var FcPorts with unknown data type []FcPhysicalPortRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var SubGroups with unknown data type []PortSubGroupRelationship

									cmd := &cobra.Command{
										Use: "group",

										Short: "Update a 'port.Group' resource.",
										Long: `Update a 'port.Group' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.PortApi.PatchPortGroup(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Transport, "Transport", "", "Transport")

									//Skipping var EquipmentSharedIoModule with unknown data type EquipmentSharedIoModuleRelationship
									if isMoRef(openapi.EquipmentSharedIoModuleRelationship{}) {
										cmd.Flags().String("EquipmentSharedIoModule", "", "EquipmentSharedIoModule")
									}

									//Skipping var EquipmentSwitchCard with unknown data type EquipmentSwitchCardRelationship
									if isMoRef(openapi.EquipmentSwitchCardRelationship{}) {
										cmd.Flags().String("EquipmentSwitchCard", "", "EquipmentSwitchCard")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Transport string

									//Skipping var EthernetPorts with unknown data type []EtherPhysicalPortRelationship

									//Skipping var PortGroup with unknown data type PortGroupRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "subgroup",

										Short: "Update a 'port.SubGroup' resource.",
										Long: `Update a 'port.SubGroup' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.PortApi.PatchPortSubGroup(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Transport, "Transport", "", "Transport")

									//Skipping var PortGroup with unknown data type PortGroupRelationship
									if isMoRef(openapi.PortGroupRelationship{}) {
										cmd.Flags().String("PortGroup", "", "PortGroup")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "processor",

								Short: "Update Processor resource(s)",
								Long: `Update Processor resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var Architecture string

									//Skipping var NumCores with unknown data type int64

									var NumCoresEnabled string

									var NumThreads string

									var OperPowerState string

									var OperState string

									var Operability string

									var Presence string

									//Skipping var ProcessorId with unknown data type int64

									var SocketDesignation string

									//Skipping var Speed with unknown data type float32

									var Stepping string

									var Thermal string

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "unit",

										Short: "Update a 'processor.Unit' resource.",
										Long: `Update a 'processor.Unit' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ProcessorApi.PatchProcessorUnit(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&Architecture, "Architecture", "", "Architecture")

									cmd.Flags().StringVar(&NumCoresEnabled, "NumCoresEnabled", "", "NumCoresEnabled")

									cmd.Flags().StringVar(&NumThreads, "NumThreads", "", "NumThreads")

									cmd.Flags().StringVar(&OperPowerState, "OperPowerState", "", "OperPowerState")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&Operability, "Operability", "", "Operability")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&SocketDesignation, "SocketDesignation", "", "SocketDesignation")

									cmd.Flags().StringVar(&Stepping, "Stepping", "", "Stepping")

									cmd.Flags().StringVar(&Thermal, "Thermal", "", "Thermal")

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship
									if isMoRef(openapi.ComputeBoardRelationship{}) {
										cmd.Flags().String("ComputeBoard", "", "ComputeBoard")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "recovery",

								Short: "Update Recovery resource(s)",
								Long: `Update Recovery resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var FileNamePrefix string

									var IsPasswordSet bool

									var LocationType string

									var Password string

									var Path string

									var Protocol string

									//Skipping var RetentionCount with unknown data type int64

									var UserName string

									//Skipping var BackupProfiles with unknown data type []RecoveryBackupProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "backupconfigpolicy",

										Short: "Update a 'recovery.BackupConfigPolicy' resource.",
										Long: `Update a 'recovery.BackupConfigPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.RecoveryApi.PatchRecoveryBackupConfigPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&FileNamePrefix, "FileNamePrefix", "", "FileNamePrefix")

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().StringVar(&LocationType, "LocationType", "", "LocationType")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									cmd.Flags().StringVar(&Path, "Path", "", "Path")

									cmd.Flags().StringVar(&Protocol, "Protocol", "", "Protocol")

									cmd.Flags().StringVar(&UserName, "UserName", "", "UserName")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Type string

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship

									var Action string

									//Skipping var ConfigContext with unknown data type PolicyConfigContext

									var Enabled bool

									//Skipping var BackupConfig with unknown data type RecoveryBackupConfigPolicyRelationship

									//Skipping var ConfigResult with unknown data type RecoveryConfigResultRelationship

									//Skipping var DeviceId with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var ScheduleConfig with unknown data type RecoveryScheduleConfigPolicyRelationship

									cmd := &cobra.Command{
										Use: "backupprofile",

										Short: "Update a 'recovery.BackupProfile' resource.",
										Long: `Update a 'recovery.BackupProfile' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.RecoveryApi.PatchRecoveryBackupProfile(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship
									if isMoRef(openapi.PolicyAbstractProfileRelationship{}) {
										cmd.Flags().String("SrcTemplate", "", "SrcTemplate")
									}

									cmd.Flags().StringVar(&Action, "Action", "", "Action")

									//Skipping var ConfigContext with unknown data type PolicyConfigContext
									if isMoRef(openapi.PolicyConfigContext{}) {
										cmd.Flags().String("ConfigContext", "", "ConfigContext")
									}

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									//Skipping var BackupConfig with unknown data type RecoveryBackupConfigPolicyRelationship
									if isMoRef(openapi.RecoveryBackupConfigPolicyRelationship{}) {
										cmd.Flags().String("BackupConfig", "", "BackupConfig")
									}

									//Skipping var ConfigResult with unknown data type RecoveryConfigResultRelationship
									if isMoRef(openapi.RecoveryConfigResultRelationship{}) {
										cmd.Flags().String("ConfigResult", "", "ConfigResult")
									}

									//Skipping var DeviceId with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("DeviceId", "", "DeviceId")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									//Skipping var ScheduleConfig with unknown data type RecoveryScheduleConfigPolicyRelationship
									if isMoRef(openapi.RecoveryScheduleConfigPolicyRelationship{}) {
										cmd.Flags().String("ScheduleConfig", "", "ScheduleConfig")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var FileNamePrefix string

									var IsPasswordSet bool

									var LocationType string

									var Password string

									var Path string

									var Protocol string

									//Skipping var RetentionCount with unknown data type int64

									var UserName string

									//Skipping var ConfigResult with unknown data type RecoveryConfigResultRelationship

									//Skipping var DeviceId with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "ondemandbackup",

										Short: "Update a 'recovery.OnDemandBackup' resource.",
										Long: `Update a 'recovery.OnDemandBackup' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.RecoveryApi.PatchRecoveryOnDemandBackup(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&FileNamePrefix, "FileNamePrefix", "", "FileNamePrefix")

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().StringVar(&LocationType, "LocationType", "", "LocationType")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									cmd.Flags().StringVar(&Path, "Path", "", "Path")

									cmd.Flags().StringVar(&Protocol, "Protocol", "", "Protocol")

									cmd.Flags().StringVar(&UserName, "UserName", "", "UserName")

									//Skipping var ConfigResult with unknown data type RecoveryConfigResultRelationship
									if isMoRef(openapi.RecoveryConfigResultRelationship{}) {
										cmd.Flags().String("ConfigResult", "", "ConfigResult")
									}

									//Skipping var DeviceId with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("DeviceId", "", "DeviceId")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var Schedule with unknown data type RecoveryBackupSchedule

									//Skipping var BackupProfiles with unknown data type []RecoveryBackupProfileRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "scheduleconfigpolicy",

										Short: "Update a 'recovery.ScheduleConfigPolicy' resource.",
										Long: `Update a 'recovery.ScheduleConfigPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.RecoveryApi.PatchRecoveryScheduleConfigPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Schedule with unknown data type RecoveryBackupSchedule
									if isMoRef(openapi.RecoveryBackupSchedule{}) {
										cmd.Flags().String("Schedule", "", "Schedule")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "resource",

								Short: "Update Resource resource(s)",
								Long: `Update Resource resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Name string

									//Skipping var PerTypeCombinedSelector with unknown data type []ResourcePerTypeCombinedSelector

									var Qualifier string

									//Skipping var Selectors with unknown data type []ResourceSelector

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var Organizations with unknown data type []OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "group",

										Short: "Update a 'resource.Group' resource.",
										Long: `Update a 'resource.Group' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ResourceApi.PatchResourceGroup(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Qualifier, "Qualifier", "", "Qualifier")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "sdcard",

								Short: "Update Sdcard resource(s)",
								Long: `Update Sdcard resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var Partitions with unknown data type []SdcardPartition

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "policy",

										Short: "Update a 'sdcard.Policy' resource.",
										Long: `Update a 'sdcard.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SdcardApi.PatchSdcardPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "sdwan",

								Short: "Update Sdwan resource(s)",
								Long: `Update Sdwan resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Type string

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship

									var Action string

									//Skipping var ConfigContext with unknown data type PolicyConfigContext

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var RouterNodes with unknown data type []SdwanRouterNodeRelationship

									//Skipping var RouterPolicy with unknown data type SdwanRouterPolicyRelationship

									//Skipping var VmanageAccount with unknown data type SdwanVmanageAccountPolicyRelationship

									cmd := &cobra.Command{
										Use: "profile",

										Short: "Update a 'sdwan.Profile' resource.",
										Long: `Update a 'sdwan.Profile' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SdwanApi.PatchSdwanProfile(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship
									if isMoRef(openapi.PolicyAbstractProfileRelationship{}) {
										cmd.Flags().String("SrcTemplate", "", "SrcTemplate")
									}

									cmd.Flags().StringVar(&Action, "Action", "", "Action")

									//Skipping var ConfigContext with unknown data type PolicyConfigContext
									if isMoRef(openapi.PolicyConfigContext{}) {
										cmd.Flags().String("ConfigContext", "", "ConfigContext")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									//Skipping var RouterPolicy with unknown data type SdwanRouterPolicyRelationship
									if isMoRef(openapi.SdwanRouterPolicyRelationship{}) {
										cmd.Flags().String("RouterPolicy", "", "RouterPolicy")
									}

									//Skipping var VmanageAccount with unknown data type SdwanVmanageAccountPolicyRelationship
									if isMoRef(openapi.SdwanVmanageAccountPolicyRelationship{}) {
										cmd.Flags().String("VmanageAccount", "", "VmanageAccount")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceTemplate string

									var Name string

									//Skipping var NetworkConfiguration with unknown data type []SdwanNetworkConfigurationType

									//Skipping var TemplateInputs with unknown data type []SdwanTemplateInputsType

									var Uuid string

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profile with unknown data type SdwanProfileRelationship

									//Skipping var ServerNode with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "routernode",

										Short: "Update a 'sdwan.RouterNode' resource.",
										Long: `Update a 'sdwan.RouterNode' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SdwanApi.PatchSdwanRouterNode(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceTemplate, "DeviceTemplate", "", "DeviceTemplate")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Uuid, "Uuid", "", "Uuid")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									//Skipping var Profile with unknown data type SdwanProfileRelationship
									if isMoRef(openapi.SdwanProfileRelationship{}) {
										cmd.Flags().String("Profile", "", "Profile")
									}

									//Skipping var ServerNode with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("ServerNode", "", "ServerNode")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var DeploymentSize string

									//Skipping var WanCount with unknown data type int64

									var WanTerminationType string

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []SdwanProfileRelationship

									//Skipping var SolutionImage with unknown data type SoftwareSolutionDistributableRelationship

									cmd := &cobra.Command{
										Use: "routerpolicy",

										Short: "Update a 'sdwan.RouterPolicy' resource.",
										Long: `Update a 'sdwan.RouterPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SdwanApi.PatchSdwanRouterPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&DeploymentSize, "DeploymentSize", "", "DeploymentSize")

									cmd.Flags().StringVar(&WanTerminationType, "WanTerminationType", "", "WanTerminationType")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									//Skipping var SolutionImage with unknown data type SoftwareSolutionDistributableRelationship
									if isMoRef(openapi.SoftwareSolutionDistributableRelationship{}) {
										cmd.Flags().String("SolutionImage", "", "SolutionImage")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var EndpointAddress string

									var IsPasswordSet bool

									var Password string

									//Skipping var Port with unknown data type int64

									var Username string

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []SdwanProfileRelationship

									cmd := &cobra.Command{
										Use: "vmanageaccountpolicy",

										Short: "Update a 'sdwan.VmanageAccountPolicy' resource.",
										Long: `Update a 'sdwan.VmanageAccountPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SdwanApi.PatchSdwanVmanageAccountPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&EndpointAddress, "EndpointAddress", "", "EndpointAddress")

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									cmd.Flags().StringVar(&Username, "Username", "", "Username")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "security",

								Short: "Update Security resource(s)",
								Long: `Update Security resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var OperState string

									var Operability string

									var PartNumber string

									var PciSlot string

									var Power string

									var Presence string

									var Thermal string

									//Skipping var UnitId with unknown data type int64

									var Vid string

									var Voltage string

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "unit",

										Short: "Update a 'security.Unit' resource.",
										Long: `Update a 'security.Unit' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SecurityApi.PatchSecurityUnit(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&Operability, "Operability", "", "Operability")

									cmd.Flags().StringVar(&PartNumber, "PartNumber", "", "PartNumber")

									cmd.Flags().StringVar(&PciSlot, "PciSlot", "", "PciSlot")

									cmd.Flags().StringVar(&Power, "Power", "", "Power")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&Thermal, "Thermal", "", "Thermal")

									cmd.Flags().StringVar(&Vid, "Vid", "", "Vid")

									cmd.Flags().StringVar(&Voltage, "Voltage", "", "Voltage")

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship
									if isMoRef(openapi.ComputeBoardRelationship{}) {
										cmd.Flags().String("ComputeBoard", "", "ComputeBoard")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "server",

								Short: "Update Server resource(s)",
								Long: `Update Server resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Type string

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship

									var Action string

									//Skipping var ConfigContext with unknown data type PolicyConfigContext

									//Skipping var ConfigChanges with unknown data type PolicyConfigChange

									var IsPmcDeployedSecurePassphraseSet bool

									var PmcDeployedSecurePassphrase string

									//Skipping var AssignedServer with unknown data type ComputeRackUnitRelationship

									//Skipping var AssociatedServer with unknown data type ComputeRackUnitRelationship

									//Skipping var ConfigChangeDetails with unknown data type []ServerConfigChangeDetailRelationship

									//Skipping var ConfigResult with unknown data type ServerConfigResultRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var RunningWorkflows with unknown data type []WorkflowWorkflowInfoRelationship

									cmd := &cobra.Command{
										Use: "profile",

										Short: "Update a 'server.Profile' resource.",
										Long: `Update a 'server.Profile' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.ServerApi.PatchServerProfile(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									//Skipping var SrcTemplate with unknown data type PolicyAbstractProfileRelationship
									if isMoRef(openapi.PolicyAbstractProfileRelationship{}) {
										cmd.Flags().String("SrcTemplate", "", "SrcTemplate")
									}

									cmd.Flags().StringVar(&Action, "Action", "", "Action")

									//Skipping var ConfigContext with unknown data type PolicyConfigContext
									if isMoRef(openapi.PolicyConfigContext{}) {
										cmd.Flags().String("ConfigContext", "", "ConfigContext")
									}

									//Skipping var ConfigChanges with unknown data type PolicyConfigChange
									if isMoRef(openapi.PolicyConfigChange{}) {
										cmd.Flags().String("ConfigChanges", "", "ConfigChanges")
									}

									cmd.Flags().BoolVar(&IsPmcDeployedSecurePassphraseSet, "IsPmcDeployedSecurePassphraseSet", false, "IsPmcDeployedSecurePassphraseSet")

									cmd.Flags().StringVar(&PmcDeployedSecurePassphrase, "PmcDeployedSecurePassphrase", "", "PmcDeployedSecurePassphrase")

									//Skipping var AssignedServer with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("AssignedServer", "", "AssignedServer")
									}

									//Skipping var AssociatedServer with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("AssociatedServer", "", "AssociatedServer")
									}

									//Skipping var ConfigResult with unknown data type ServerConfigResultRelationship
									if isMoRef(openapi.ServerConfigResultRelationship{}) {
										cmd.Flags().String("ConfigResult", "", "ConfigResult")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "smtp",

								Short: "Update Smtp resource(s)",
								Long: `Update Smtp resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Enabled bool

									var MinSeverity string

									var SenderEmail string

									//Skipping var SmtpPort with unknown data type int64

									var SmtpRecipients []string

									var SmtpServer string

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "policy",

										Short: "Update a 'smtp.Policy' resource.",
										Long: `Update a 'smtp.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SmtpApi.PatchSmtpPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									cmd.Flags().StringVar(&MinSeverity, "MinSeverity", "", "MinSeverity")

									cmd.Flags().StringVar(&SenderEmail, "SenderEmail", "", "SenderEmail")

									cmd.Flags().StringSliceVar(&SmtpRecipients, "SmtpRecipients", []string{}, "SmtpRecipients")

									cmd.Flags().StringVar(&SmtpServer, "SmtpServer", "", "SmtpServer")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "snmp",

								Short: "Update Snmp resource(s)",
								Long: `Update Snmp resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var AccessCommunityString string

									var CommunityAccess string

									var Enabled bool

									var EngineId string

									//Skipping var SnmpPort with unknown data type int64

									//Skipping var SnmpTraps with unknown data type []SnmpTrap

									//Skipping var SnmpUsers with unknown data type []SnmpUser

									var SysContact string

									var SysLocation string

									var TrapCommunity string

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "policy",

										Short: "Update a 'snmp.Policy' resource.",
										Long: `Update a 'snmp.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SnmpApi.PatchSnmpPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&AccessCommunityString, "AccessCommunityString", "", "AccessCommunityString")

									cmd.Flags().StringVar(&CommunityAccess, "CommunityAccess", "", "CommunityAccess")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									cmd.Flags().StringVar(&EngineId, "EngineId", "", "EngineId")

									cmd.Flags().StringVar(&SysContact, "SysContact", "", "SysContact")

									cmd.Flags().StringVar(&SysLocation, "SysLocation", "", "SysLocation")

									cmd.Flags().StringVar(&TrapCommunity, "TrapCommunity", "", "TrapCommunity")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "software",

								Short: "Update Software resource(s)",
								Long: `Update Software resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									//Skipping var DownloadCount with unknown data type int64

									var ImportAction string

									var ImportState string

									//Skipping var ImportedTime with unknown data type time.Time

									//Skipping var LastAccessTime with unknown data type time.Time

									var Md5sum string

									var Name string

									//Skipping var ReleaseDate with unknown data type time.Time

									var Sha512sum string

									//Skipping var Size with unknown data type int64

									var SoftwareAdvisoryUrl string

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer

									var Version string

									var BundleType string

									var Guid string

									var Mdfid string

									var Model string

									var PlatformType string

									var RecommendedBuild string

									var ReleaseNotesUrl string

									var SoftwareTypeId string

									var SupportedModels []string

									var Vendor string

									var ContentType string

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship

									cmd := &cobra.Command{
										Use: "hclmeta",

										Short: "Update a 'software.HclMeta' resource.",
										Long: `Update a 'software.HclMeta' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SoftwareApi.PatchSoftwareHclMeta(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&ImportAction, "ImportAction", "", "ImportAction")

									cmd.Flags().StringVar(&ImportState, "ImportState", "", "ImportState")

									cmd.Flags().StringVar(&Md5sum, "Md5sum", "", "Md5sum")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Sha512sum, "Sha512sum", "", "Sha512sum")

									cmd.Flags().StringVar(&SoftwareAdvisoryUrl, "SoftwareAdvisoryUrl", "", "SoftwareAdvisoryUrl")

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer
									if isMoRef(openapi.SoftwarerepositoryFileServer{}) {
										cmd.Flags().String("Source", "", "Source")
									}

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									cmd.Flags().StringVar(&BundleType, "BundleType", "", "BundleType")

									cmd.Flags().StringVar(&Guid, "Guid", "", "Guid")

									cmd.Flags().StringVar(&Mdfid, "Mdfid", "", "Mdfid")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									cmd.Flags().StringVar(&RecommendedBuild, "RecommendedBuild", "", "RecommendedBuild")

									cmd.Flags().StringVar(&ReleaseNotesUrl, "ReleaseNotesUrl", "", "ReleaseNotesUrl")

									cmd.Flags().StringVar(&SoftwareTypeId, "SoftwareTypeId", "", "SoftwareTypeId")

									cmd.Flags().StringSliceVar(&SupportedModels, "SupportedModels", []string{}, "SupportedModels")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&ContentType, "ContentType", "", "ContentType")

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship
									if isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									//Skipping var DownloadCount with unknown data type int64

									var ImportAction string

									var ImportState string

									//Skipping var ImportedTime with unknown data type time.Time

									//Skipping var LastAccessTime with unknown data type time.Time

									var Md5sum string

									var Name string

									//Skipping var ReleaseDate with unknown data type time.Time

									var Sha512sum string

									//Skipping var Size with unknown data type int64

									var SoftwareAdvisoryUrl string

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer

									var Version string

									var BundleType string

									var Guid string

									var Mdfid string

									var Model string

									var PlatformType string

									var RecommendedBuild string

									var ReleaseNotesUrl string

									var SoftwareTypeId string

									var SupportedModels []string

									var Vendor string

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship

									cmd := &cobra.Command{
										Use: "hyperflexdistributable",

										Short: "Update a 'software.HyperflexDistributable' resource.",
										Long: `Update a 'software.HyperflexDistributable' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SoftwareApi.PatchSoftwareHyperflexDistributable(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&ImportAction, "ImportAction", "", "ImportAction")

									cmd.Flags().StringVar(&ImportState, "ImportState", "", "ImportState")

									cmd.Flags().StringVar(&Md5sum, "Md5sum", "", "Md5sum")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Sha512sum, "Sha512sum", "", "Sha512sum")

									cmd.Flags().StringVar(&SoftwareAdvisoryUrl, "SoftwareAdvisoryUrl", "", "SoftwareAdvisoryUrl")

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer
									if isMoRef(openapi.SoftwarerepositoryFileServer{}) {
										cmd.Flags().String("Source", "", "Source")
									}

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									cmd.Flags().StringVar(&BundleType, "BundleType", "", "BundleType")

									cmd.Flags().StringVar(&Guid, "Guid", "", "Guid")

									cmd.Flags().StringVar(&Mdfid, "Mdfid", "", "Mdfid")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									cmd.Flags().StringVar(&RecommendedBuild, "RecommendedBuild", "", "RecommendedBuild")

									cmd.Flags().StringVar(&ReleaseNotesUrl, "ReleaseNotesUrl", "", "ReleaseNotesUrl")

									cmd.Flags().StringVar(&SoftwareTypeId, "SoftwareTypeId", "", "SoftwareTypeId")

									cmd.Flags().StringSliceVar(&SupportedModels, "SupportedModels", []string{}, "SupportedModels")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship
									if isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									//Skipping var DownloadCount with unknown data type int64

									var ImportAction string

									var ImportState string

									//Skipping var ImportedTime with unknown data type time.Time

									//Skipping var LastAccessTime with unknown data type time.Time

									var Md5sum string

									var Name string

									//Skipping var ReleaseDate with unknown data type time.Time

									var Sha512sum string

									//Skipping var Size with unknown data type int64

									var SoftwareAdvisoryUrl string

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer

									var Version string

									var BundleType string

									var Guid string

									var Mdfid string

									var Model string

									var PlatformType string

									var RecommendedBuild string

									var ReleaseNotesUrl string

									var SoftwareTypeId string

									var SupportedModels []string

									var Vendor string

									var FilePath string

									var SolutionName string

									var SubType string

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship

									cmd := &cobra.Command{
										Use: "solutiondistributable",

										Short: "Update a 'software.SolutionDistributable' resource.",
										Long: `Update a 'software.SolutionDistributable' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SoftwareApi.PatchSoftwareSolutionDistributable(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&ImportAction, "ImportAction", "", "ImportAction")

									cmd.Flags().StringVar(&ImportState, "ImportState", "", "ImportState")

									cmd.Flags().StringVar(&Md5sum, "Md5sum", "", "Md5sum")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Sha512sum, "Sha512sum", "", "Sha512sum")

									cmd.Flags().StringVar(&SoftwareAdvisoryUrl, "SoftwareAdvisoryUrl", "", "SoftwareAdvisoryUrl")

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer
									if isMoRef(openapi.SoftwarerepositoryFileServer{}) {
										cmd.Flags().String("Source", "", "Source")
									}

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									cmd.Flags().StringVar(&BundleType, "BundleType", "", "BundleType")

									cmd.Flags().StringVar(&Guid, "Guid", "", "Guid")

									cmd.Flags().StringVar(&Mdfid, "Mdfid", "", "Mdfid")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&PlatformType, "PlatformType", "", "PlatformType")

									cmd.Flags().StringVar(&RecommendedBuild, "RecommendedBuild", "", "RecommendedBuild")

									cmd.Flags().StringVar(&ReleaseNotesUrl, "ReleaseNotesUrl", "", "ReleaseNotesUrl")

									cmd.Flags().StringVar(&SoftwareTypeId, "SoftwareTypeId", "", "SoftwareTypeId")

									cmd.Flags().StringSliceVar(&SupportedModels, "SupportedModels", []string{}, "SupportedModels")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&FilePath, "FilePath", "", "FilePath")

									cmd.Flags().StringVar(&SolutionName, "SolutionName", "", "SolutionName")

									cmd.Flags().StringVar(&SubType, "SubType", "", "SubType")

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship
									if isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "softwarerepository",

								Short: "Update Softwarerepository resource(s)",
								Long: `Update Softwarerepository resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var IsPasswordSet bool

									var IsUserIdSet bool

									var Password string

									var RepositoryType string

									var UserId string

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "authorization",

										Short: "Update a 'softwarerepository.Authorization' resource.",
										Long: `Update a 'softwarerepository.Authorization' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SoftwarerepositoryApi.PatchSoftwarerepositoryAuthorization(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&IsPasswordSet, "IsPasswordSet", false, "IsPasswordSet")

									cmd.Flags().BoolVar(&IsUserIdSet, "IsUserIdSet", false, "IsUserIdSet")

									cmd.Flags().StringVar(&Password, "Password", "", "Password")

									cmd.Flags().StringVar(&RepositoryType, "RepositoryType", "", "RepositoryType")

									cmd.Flags().StringVar(&UserId, "UserId", "", "UserId")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									//Skipping var DownloadCount with unknown data type int64

									var ImportAction string

									var ImportState string

									//Skipping var ImportedTime with unknown data type time.Time

									//Skipping var LastAccessTime with unknown data type time.Time

									var Md5sum string

									var Name string

									//Skipping var ReleaseDate with unknown data type time.Time

									var Sha512sum string

									//Skipping var Size with unknown data type int64

									var SoftwareAdvisoryUrl string

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer

									var Version string

									var Vendor string

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship

									cmd := &cobra.Command{
										Use: "operatingsystemfile",

										Short: "Update a 'softwarerepository.OperatingSystemFile' resource.",
										Long: `Update a 'softwarerepository.OperatingSystemFile' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SoftwarerepositoryApi.PatchSoftwarerepositoryOperatingSystemFile(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&ImportAction, "ImportAction", "", "ImportAction")

									cmd.Flags().StringVar(&ImportState, "ImportState", "", "ImportState")

									cmd.Flags().StringVar(&Md5sum, "Md5sum", "", "Md5sum")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Sha512sum, "Sha512sum", "", "Sha512sum")

									cmd.Flags().StringVar(&SoftwareAdvisoryUrl, "SoftwareAdvisoryUrl", "", "SoftwareAdvisoryUrl")

									//Skipping var Source with unknown data type SoftwarerepositoryFileServer
									if isMoRef(openapi.SoftwarerepositoryFileServer{}) {
										cmd.Flags().String("Source", "", "Source")
									}

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									//Skipping var Catalog with unknown data type SoftwarerepositoryCatalogRelationship
									if isMoRef(openapi.SoftwarerepositoryCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "sol",

								Short: "Update Sol resource(s)",
								Long: `Update Sol resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var BaudRate with unknown data type int32

									var ComPort string

									var Enabled bool

									//Skipping var SshPort with unknown data type int64

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "policy",

										Short: "Update a 'sol.Policy' resource.",
										Long: `Update a 'sol.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SolApi.PatchSolPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&ComPort, "ComPort", "", "ComPort")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "ssh",

								Short: "Update Ssh resource(s)",
								Long: `Update Ssh resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Enabled bool

									//Skipping var Port with unknown data type int64

									//Skipping var Timeout with unknown data type int64

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "policy",

										Short: "Update a 'ssh.Policy' resource.",
										Long: `Update a 'ssh.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SshApi.PatchSshPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "storage",

								Short: "Update Storage resource(s)",
								Long: `Update Storage resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var ControllerFlags string

									var ControllerId string

									var ControllerStatus string

									var HwRevision string

									var OobInterfaceSupported string

									var OperState string

									var Operability string

									var PciAddr string

									var PciSlot string

									var Presence string

									var RaidSupport string

									var RebuildRate string

									var SelfEncryptEnabled string

									var Type string

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship

									//Skipping var PhysicalDiskExtensions with unknown data type []StoragePhysicalDiskExtensionRelationship

									//Skipping var PhysicalDisks with unknown data type []StoragePhysicalDiskRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var RunningFirmware with unknown data type []FirmwareRunningFirmwareRelationship

									//Skipping var VirtualDriveExtensions with unknown data type []StorageVirtualDriveExtensionRelationship

									//Skipping var VirtualDrives with unknown data type []StorageVirtualDriveRelationship

									cmd := &cobra.Command{
										Use: "controller",

										Short: "Update a 'storage.Controller' resource.",
										Long: `Update a 'storage.Controller' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.PatchStorageController(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&ControllerFlags, "ControllerFlags", "", "ControllerFlags")

									cmd.Flags().StringVar(&ControllerId, "ControllerId", "", "ControllerId")

									cmd.Flags().StringVar(&ControllerStatus, "ControllerStatus", "", "ControllerStatus")

									cmd.Flags().StringVar(&HwRevision, "HwRevision", "", "HwRevision")

									cmd.Flags().StringVar(&OobInterfaceSupported, "OobInterfaceSupported", "", "OobInterfaceSupported")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&Operability, "Operability", "", "Operability")

									cmd.Flags().StringVar(&PciAddr, "PciAddr", "", "PciAddr")

									cmd.Flags().StringVar(&PciSlot, "PciSlot", "", "PciSlot")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&RaidSupport, "RaidSupport", "", "RaidSupport")

									cmd.Flags().StringVar(&RebuildRate, "RebuildRate", "", "RebuildRate")

									cmd.Flags().StringVar(&SelfEncryptEnabled, "SelfEncryptEnabled", "", "SelfEncryptEnabled")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship
									if isMoRef(openapi.ComputeBoardRelationship{}) {
										cmd.Flags().String("ComputeBoard", "", "ComputeBoard")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var DedicatedHotSpares with unknown data type []StorageLocalDisk

									var RaidLevel string

									//Skipping var SpanGroups with unknown data type []StorageSpanGroup

									var UseJbods bool

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var StoragePolicies with unknown data type []StorageStoragePolicyRelationship

									cmd := &cobra.Command{
										Use: "diskgrouppolicy",

										Short: "Update a 'storage.DiskGroupPolicy' resource.",
										Long: `Update a 'storage.DiskGroupPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.PatchStorageDiskGroupPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&RaidLevel, "RaidLevel", "", "RaidLevel")

									cmd.Flags().BoolVar(&UseJbods, "UseJbods", false, "UseJbods")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									//Skipping var ChassisId with unknown data type int64

									var Description string

									//Skipping var EnclosureId with unknown data type int64

									//Skipping var NumSlots with unknown data type int64

									var Presence string

									//Skipping var ServerId with unknown data type int64

									var Type string

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship

									//Skipping var EnclosureDiskSlots with unknown data type []StorageEnclosureDiskSlotEpRelationship

									//Skipping var EnclosureDisks with unknown data type []StorageEnclosureDiskRelationship

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship

									//Skipping var PhysicalDisks with unknown data type []StoragePhysicalDiskRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "enclosure",

										Short: "Update a 'storage.Enclosure' resource.",
										Long: `Update a 'storage.Enclosure' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.PatchStorageEnclosure(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									//Skipping var ComputeBlade with unknown data type ComputeBladeRelationship
									if isMoRef(openapi.ComputeBladeRelationship{}) {
										cmd.Flags().String("ComputeBlade", "", "ComputeBlade")
									}

									//Skipping var ComputeRackUnit with unknown data type ComputeRackUnitRelationship
									if isMoRef(openapi.ComputeRackUnitRelationship{}) {
										cmd.Flags().String("ComputeRackUnit", "", "ComputeRackUnit")
									}

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship
									if isMoRef(openapi.EquipmentChassisRelationship{}) {
										cmd.Flags().String("EquipmentChassis", "", "EquipmentChassis")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var BlockSize string

									var DiskId string

									var DiskState string

									var Health string

									var NumBlocks string

									var Pid string

									var SasAddress1 string

									var SasAddress2 string

									var Size string

									//Skipping var PhysicalDisk with unknown data type StoragePhysicalDiskRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StorageEnclosure with unknown data type StorageEnclosureRelationship

									cmd := &cobra.Command{
										Use: "enclosuredisk",

										Short: "Update a 'storage.EnclosureDisk' resource.",
										Long: `Update a 'storage.EnclosureDisk' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.PatchStorageEnclosureDisk(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&BlockSize, "BlockSize", "", "BlockSize")

									cmd.Flags().StringVar(&DiskId, "DiskId", "", "DiskId")

									cmd.Flags().StringVar(&DiskState, "DiskState", "", "DiskState")

									cmd.Flags().StringVar(&Health, "Health", "", "Health")

									cmd.Flags().StringVar(&NumBlocks, "NumBlocks", "", "NumBlocks")

									cmd.Flags().StringVar(&Pid, "Pid", "", "Pid")

									cmd.Flags().StringVar(&SasAddress1, "SasAddress1", "", "SasAddress1")

									cmd.Flags().StringVar(&SasAddress2, "SasAddress2", "", "SasAddress2")

									cmd.Flags().StringVar(&Size, "Size", "", "Size")

									//Skipping var PhysicalDisk with unknown data type StoragePhysicalDiskRelationship
									if isMoRef(openapi.StoragePhysicalDiskRelationship{}) {
										cmd.Flags().String("PhysicalDisk", "", "PhysicalDisk")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageEnclosure with unknown data type StorageEnclosureRelationship
									if isMoRef(openapi.StorageEnclosureRelationship{}) {
										cmd.Flags().String("StorageEnclosure", "", "StorageEnclosure")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var DrivePath string

									var Health string

									var Presence string

									var Slot string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StorageEnclosure with unknown data type StorageEnclosureRelationship

									cmd := &cobra.Command{
										Use: "enclosurediskslotep",

										Short: "Update a 'storage.EnclosureDiskSlotEp' resource.",
										Long: `Update a 'storage.EnclosureDiskSlotEp' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.PatchStorageEnclosureDiskSlotEp(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&DrivePath, "DrivePath", "", "DrivePath")

									cmd.Flags().StringVar(&Health, "Health", "", "Health")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&Slot, "Slot", "", "Slot")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageEnclosure with unknown data type StorageEnclosureRelationship
									if isMoRef(openapi.StorageEnclosureRelationship{}) {
										cmd.Flags().String("StorageEnclosure", "", "StorageEnclosure")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var ControllerState string

									var FfControllerId string

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship

									//Skipping var FlexFlashControllerProps with unknown data type []StorageFlexFlashControllerPropsRelationship

									//Skipping var FlexFlashPhysicalDrives with unknown data type []StorageFlexFlashPhysicalDriveRelationship

									//Skipping var FlexFlashVirtualDrives with unknown data type []StorageFlexFlashVirtualDriveRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "flexflashcontroller",

										Short: "Update a 'storage.FlexFlashController' resource.",
										Long: `Update a 'storage.FlexFlashController' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.PatchStorageFlexFlashController(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&ControllerState, "ControllerState", "", "ControllerState")

									cmd.Flags().StringVar(&FfControllerId, "FfControllerId", "", "FfControllerId")

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship
									if isMoRef(openapi.ComputeBoardRelationship{}) {
										cmd.Flags().String("ComputeBoard", "", "ComputeBoard")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var CardsManageable string

									var ConfiguredMode string

									var ControllerName string

									var ControllerStatus string

									var FwVersion string

									var InternalState string

									var OperatingMode string

									var PhysicalDriveCount string

									var ProductName string

									var StartupFwVersion string

									var VirtualDriveCount string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StorageFlexFlashController with unknown data type StorageFlexFlashControllerRelationship

									cmd := &cobra.Command{
										Use: "flexflashcontrollerprops",

										Short: "Update a 'storage.FlexFlashControllerProps' resource.",
										Long: `Update a 'storage.FlexFlashControllerProps' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.PatchStorageFlexFlashControllerProps(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&CardsManageable, "CardsManageable", "", "CardsManageable")

									cmd.Flags().StringVar(&ConfiguredMode, "ConfiguredMode", "", "ConfiguredMode")

									cmd.Flags().StringVar(&ControllerName, "ControllerName", "", "ControllerName")

									cmd.Flags().StringVar(&ControllerStatus, "ControllerStatus", "", "ControllerStatus")

									cmd.Flags().StringVar(&FwVersion, "FwVersion", "", "FwVersion")

									cmd.Flags().StringVar(&InternalState, "InternalState", "", "InternalState")

									cmd.Flags().StringVar(&OperatingMode, "OperatingMode", "", "OperatingMode")

									cmd.Flags().StringVar(&PhysicalDriveCount, "PhysicalDriveCount", "", "PhysicalDriveCount")

									cmd.Flags().StringVar(&ProductName, "ProductName", "", "ProductName")

									cmd.Flags().StringVar(&StartupFwVersion, "StartupFwVersion", "", "StartupFwVersion")

									cmd.Flags().StringVar(&VirtualDriveCount, "VirtualDriveCount", "", "VirtualDriveCount")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageFlexFlashController with unknown data type StorageFlexFlashControllerRelationship
									if isMoRef(openapi.StorageFlexFlashControllerRelationship{}) {
										cmd.Flags().String("StorageFlexFlashController", "", "StorageFlexFlashController")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var CardStatus string

									var CardType string

									var OemId string

									var PdStatus string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StorageFlexFlashController with unknown data type StorageFlexFlashControllerRelationship

									cmd := &cobra.Command{
										Use: "flexflashphysicaldrive",

										Short: "Update a 'storage.FlexFlashPhysicalDrive' resource.",
										Long: `Update a 'storage.FlexFlashPhysicalDrive' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.PatchStorageFlexFlashPhysicalDrive(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&CardStatus, "CardStatus", "", "CardStatus")

									cmd.Flags().StringVar(&CardType, "CardType", "", "CardType")

									cmd.Flags().StringVar(&OemId, "OemId", "", "OemId")

									cmd.Flags().StringVar(&PdStatus, "PdStatus", "", "PdStatus")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageFlexFlashController with unknown data type StorageFlexFlashControllerRelationship
									if isMoRef(openapi.StorageFlexFlashControllerRelationship{}) {
										cmd.Flags().String("StorageFlexFlashController", "", "StorageFlexFlashController")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var DriveScope string

									var DriveStatus string

									var PartitionId string

									var ResidentImage string

									var Size string

									var VirtualDrive string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StorageFlexFlashController with unknown data type StorageFlexFlashControllerRelationship

									cmd := &cobra.Command{
										Use: "flexflashvirtualdrive",

										Short: "Update a 'storage.FlexFlashVirtualDrive' resource.",
										Long: `Update a 'storage.FlexFlashVirtualDrive' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.PatchStorageFlexFlashVirtualDrive(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&DriveScope, "DriveScope", "", "DriveScope")

									cmd.Flags().StringVar(&DriveStatus, "DriveStatus", "", "DriveStatus")

									cmd.Flags().StringVar(&PartitionId, "PartitionId", "", "PartitionId")

									cmd.Flags().StringVar(&ResidentImage, "ResidentImage", "", "ResidentImage")

									cmd.Flags().StringVar(&Size, "Size", "", "Size")

									cmd.Flags().StringVar(&VirtualDrive, "VirtualDrive", "", "VirtualDrive")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageFlexFlashController with unknown data type StorageFlexFlashControllerRelationship
									if isMoRef(openapi.StorageFlexFlashControllerRelationship{}) {
										cmd.Flags().String("StorageFlexFlashController", "", "StorageFlexFlashController")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var ControllerName string

									var ControllerStatus string

									var FfControllerId string

									var InternalState string

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship

									//Skipping var FlexUtilPhysicalDrives with unknown data type []StorageFlexUtilPhysicalDriveRelationship

									//Skipping var FlexUtilVirtualDrives with unknown data type []StorageFlexUtilVirtualDriveRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "flexutilcontroller",

										Short: "Update a 'storage.FlexUtilController' resource.",
										Long: `Update a 'storage.FlexUtilController' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.PatchStorageFlexUtilController(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&ControllerName, "ControllerName", "", "ControllerName")

									cmd.Flags().StringVar(&ControllerStatus, "ControllerStatus", "", "ControllerStatus")

									cmd.Flags().StringVar(&FfControllerId, "FfControllerId", "", "FfControllerId")

									cmd.Flags().StringVar(&InternalState, "InternalState", "", "InternalState")

									//Skipping var ComputeBoard with unknown data type ComputeBoardRelationship
									if isMoRef(openapi.ComputeBoardRelationship{}) {
										cmd.Flags().String("ComputeBoard", "", "ComputeBoard")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var BlockSize string

									var Capacity string

									var Controller string

									var DrivesEnabled string

									var Health string

									var ManufacturerDate string

									var ManufacturerId string

									var OemId string

									var PartitionCount string

									var PdStatus string

									var PhysicalDrive string

									var ProductName string

									var ProductRevision string

									var ReadErrorCount string

									var ReadErrorThreshold string

									var WriteEnabled string

									var WriteErrorCount string

									var WriteErrorThreshold string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StorageFlexUtilController with unknown data type StorageFlexUtilControllerRelationship

									cmd := &cobra.Command{
										Use: "flexutilphysicaldrive",

										Short: "Update a 'storage.FlexUtilPhysicalDrive' resource.",
										Long: `Update a 'storage.FlexUtilPhysicalDrive' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.PatchStorageFlexUtilPhysicalDrive(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&BlockSize, "BlockSize", "", "BlockSize")

									cmd.Flags().StringVar(&Capacity, "Capacity", "", "Capacity")

									cmd.Flags().StringVar(&Controller, "Controller", "", "Controller")

									cmd.Flags().StringVar(&DrivesEnabled, "DrivesEnabled", "", "DrivesEnabled")

									cmd.Flags().StringVar(&Health, "Health", "", "Health")

									cmd.Flags().StringVar(&ManufacturerDate, "ManufacturerDate", "", "ManufacturerDate")

									cmd.Flags().StringVar(&ManufacturerId, "ManufacturerId", "", "ManufacturerId")

									cmd.Flags().StringVar(&OemId, "OemId", "", "OemId")

									cmd.Flags().StringVar(&PartitionCount, "PartitionCount", "", "PartitionCount")

									cmd.Flags().StringVar(&PdStatus, "PdStatus", "", "PdStatus")

									cmd.Flags().StringVar(&PhysicalDrive, "PhysicalDrive", "", "PhysicalDrive")

									cmd.Flags().StringVar(&ProductName, "ProductName", "", "ProductName")

									cmd.Flags().StringVar(&ProductRevision, "ProductRevision", "", "ProductRevision")

									cmd.Flags().StringVar(&ReadErrorCount, "ReadErrorCount", "", "ReadErrorCount")

									cmd.Flags().StringVar(&ReadErrorThreshold, "ReadErrorThreshold", "", "ReadErrorThreshold")

									cmd.Flags().StringVar(&WriteEnabled, "WriteEnabled", "", "WriteEnabled")

									cmd.Flags().StringVar(&WriteErrorCount, "WriteErrorCount", "", "WriteErrorCount")

									cmd.Flags().StringVar(&WriteErrorThreshold, "WriteErrorThreshold", "", "WriteErrorThreshold")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageFlexUtilController with unknown data type StorageFlexUtilControllerRelationship
									if isMoRef(openapi.StorageFlexUtilControllerRelationship{}) {
										cmd.Flags().String("StorageFlexUtilController", "", "StorageFlexUtilController")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var DriveStatus string

									var DriveType string

									var PartitionId string

									var PartitionName string

									var ResidentImage string

									var Size string

									var VirtualDrive string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StorageFlexUtilController with unknown data type StorageFlexUtilControllerRelationship

									cmd := &cobra.Command{
										Use: "flexutilvirtualdrive",

										Short: "Update a 'storage.FlexUtilVirtualDrive' resource.",
										Long: `Update a 'storage.FlexUtilVirtualDrive' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.PatchStorageFlexUtilVirtualDrive(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&DriveStatus, "DriveStatus", "", "DriveStatus")

									cmd.Flags().StringVar(&DriveType, "DriveType", "", "DriveType")

									cmd.Flags().StringVar(&PartitionId, "PartitionId", "", "PartitionId")

									cmd.Flags().StringVar(&PartitionName, "PartitionName", "", "PartitionName")

									cmd.Flags().StringVar(&ResidentImage, "ResidentImage", "", "ResidentImage")

									cmd.Flags().StringVar(&Size, "Size", "", "Size")

									cmd.Flags().StringVar(&VirtualDrive, "VirtualDrive", "", "VirtualDrive")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageFlexUtilController with unknown data type StorageFlexUtilControllerRelationship
									if isMoRef(openapi.StorageFlexUtilControllerRelationship{}) {
										cmd.Flags().String("StorageFlexUtilController", "", "StorageFlexUtilController")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var BlockSize string

									var Bootable string

									var ConfigurationCheckpoint string

									var ConfigurationState string

									var DiscoveredPath string

									var DiskId string

									var DiskState string

									var DriveFirmware string

									var DriveState string

									var FdeCapable string

									var LinkSpeed string

									var LinkState string

									var NumBlocks string

									var OperPowerState string

									var OperQualifierReason string

									var Operability string

									var PhysicalBlockSize string

									var Pid string

									var Presence string

									var Protocol string

									var RawSize string

									var Secured string

									var Size string

									var Thermal string

									var Type string

									var VariantType string

									//Skipping var LocatorLed with unknown data type EquipmentLocatorLedRelationship

									//Skipping var PhysicalDiskExtensions with unknown data type []StoragePhysicalDiskExtensionRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var RunningFirmware with unknown data type []FirmwareRunningFirmwareRelationship

									//Skipping var SasPorts with unknown data type []StorageSasPortRelationship

									//Skipping var StorageController with unknown data type StorageControllerRelationship

									//Skipping var StorageEnclosure with unknown data type StorageEnclosureRelationship

									cmd := &cobra.Command{
										Use: "physicaldisk",

										Short: "Update a 'storage.PhysicalDisk' resource.",
										Long: `Update a 'storage.PhysicalDisk' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.PatchStoragePhysicalDisk(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&BlockSize, "BlockSize", "", "BlockSize")

									cmd.Flags().StringVar(&Bootable, "Bootable", "", "Bootable")

									cmd.Flags().StringVar(&ConfigurationCheckpoint, "ConfigurationCheckpoint", "", "ConfigurationCheckpoint")

									cmd.Flags().StringVar(&ConfigurationState, "ConfigurationState", "", "ConfigurationState")

									cmd.Flags().StringVar(&DiscoveredPath, "DiscoveredPath", "", "DiscoveredPath")

									cmd.Flags().StringVar(&DiskId, "DiskId", "", "DiskId")

									cmd.Flags().StringVar(&DiskState, "DiskState", "", "DiskState")

									cmd.Flags().StringVar(&DriveFirmware, "DriveFirmware", "", "DriveFirmware")

									cmd.Flags().StringVar(&DriveState, "DriveState", "", "DriveState")

									cmd.Flags().StringVar(&FdeCapable, "FdeCapable", "", "FdeCapable")

									cmd.Flags().StringVar(&LinkSpeed, "LinkSpeed", "", "LinkSpeed")

									cmd.Flags().StringVar(&LinkState, "LinkState", "", "LinkState")

									cmd.Flags().StringVar(&NumBlocks, "NumBlocks", "", "NumBlocks")

									cmd.Flags().StringVar(&OperPowerState, "OperPowerState", "", "OperPowerState")

									cmd.Flags().StringVar(&OperQualifierReason, "OperQualifierReason", "", "OperQualifierReason")

									cmd.Flags().StringVar(&Operability, "Operability", "", "Operability")

									cmd.Flags().StringVar(&PhysicalBlockSize, "PhysicalBlockSize", "", "PhysicalBlockSize")

									cmd.Flags().StringVar(&Pid, "Pid", "", "Pid")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&Protocol, "Protocol", "", "Protocol")

									cmd.Flags().StringVar(&RawSize, "RawSize", "", "RawSize")

									cmd.Flags().StringVar(&Secured, "Secured", "", "Secured")

									cmd.Flags().StringVar(&Size, "Size", "", "Size")

									cmd.Flags().StringVar(&Thermal, "Thermal", "", "Thermal")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									cmd.Flags().StringVar(&VariantType, "VariantType", "", "VariantType")

									//Skipping var LocatorLed with unknown data type EquipmentLocatorLedRelationship
									if isMoRef(openapi.EquipmentLocatorLedRelationship{}) {
										cmd.Flags().String("LocatorLed", "", "LocatorLed")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageController with unknown data type StorageControllerRelationship
									if isMoRef(openapi.StorageControllerRelationship{}) {
										cmd.Flags().String("StorageController", "", "StorageController")
									}

									//Skipping var StorageEnclosure with unknown data type StorageEnclosureRelationship
									if isMoRef(openapi.StorageEnclosureRelationship{}) {
										cmd.Flags().String("StorageEnclosure", "", "StorageEnclosure")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var Bootable string

									var DiskDn string

									//Skipping var DiskId with unknown data type int64

									var DiskState string

									var Health string

									//Skipping var PhysicalDisk with unknown data type StoragePhysicalDiskRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StorageController with unknown data type StorageControllerRelationship

									cmd := &cobra.Command{
										Use: "physicaldiskextension",

										Short: "Update a 'storage.PhysicalDiskExtension' resource.",
										Long: `Update a 'storage.PhysicalDiskExtension' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.PatchStoragePhysicalDiskExtension(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&Bootable, "Bootable", "", "Bootable")

									cmd.Flags().StringVar(&DiskDn, "DiskDn", "", "DiskDn")

									cmd.Flags().StringVar(&DiskState, "DiskState", "", "DiskState")

									cmd.Flags().StringVar(&Health, "Health", "", "Health")

									//Skipping var PhysicalDisk with unknown data type StoragePhysicalDiskRelationship
									if isMoRef(openapi.StoragePhysicalDiskRelationship{}) {
										cmd.Flags().String("PhysicalDisk", "", "PhysicalDisk")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageController with unknown data type StorageControllerRelationship
									if isMoRef(openapi.StorageControllerRelationship{}) {
										cmd.Flags().String("StorageController", "", "StorageController")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var NumberOfBlocks string

									var PhysicalDrive string

									var Span string

									var StartingBlock string

									var State string

									var VirtualDrive string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "physicaldiskusage",

										Short: "Update a 'storage.PhysicalDiskUsage' resource.",
										Long: `Update a 'storage.PhysicalDiskUsage' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.PatchStoragePhysicalDiskUsage(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&NumberOfBlocks, "NumberOfBlocks", "", "NumberOfBlocks")

									cmd.Flags().StringVar(&PhysicalDrive, "PhysicalDrive", "", "PhysicalDrive")

									cmd.Flags().StringVar(&Span, "Span", "", "Span")

									cmd.Flags().StringVar(&StartingBlock, "StartingBlock", "", "StartingBlock")

									cmd.Flags().StringVar(&State, "State", "", "State")

									cmd.Flags().StringVar(&VirtualDrive, "VirtualDrive", "", "VirtualDrive")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var Name string

									var Uuid string

									var Version string

									//Skipping var StorageUtilization with unknown data type StorageCapacity

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "purearray",

										Short: "Update a 'storage.PureArray' resource.",
										Long: `Update a 'storage.PureArray' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.PatchStoragePureArray(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Uuid, "Uuid", "", "Uuid")

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									//Skipping var StorageUtilization with unknown data type StorageCapacity
									if isMoRef(openapi.StorageCapacity{}) {
										cmd.Flags().String("StorageUtilization", "", "StorageUtilization")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									//Skipping var ExpanderId with unknown data type int64

									var Name string

									var OperState string

									var Operability string

									var Presence string

									var SasAddress string

									//Skipping var Controller with unknown data type ManagementControllerRelationship

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "sasexpander",

										Short: "Update a 'storage.SasExpander' resource.",
										Long: `Update a 'storage.SasExpander' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.PatchStorageSasExpander(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&Operability, "Operability", "", "Operability")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&SasAddress, "SasAddress", "", "SasAddress")

									//Skipping var Controller with unknown data type ManagementControllerRelationship
									if isMoRef(openapi.ManagementControllerRelationship{}) {
										cmd.Flags().String("Controller", "", "Controller")
									}

									//Skipping var EquipmentChassis with unknown data type EquipmentChassisRelationship
									if isMoRef(openapi.EquipmentChassisRelationship{}) {
										cmd.Flags().String("EquipmentChassis", "", "EquipmentChassis")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Address string

									//Skipping var DiskId with unknown data type int64

									//Skipping var EndPointId with unknown data type int64

									var LinkDescription string

									var LinkSpeed string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StoragePhysicalDisk with unknown data type StoragePhysicalDiskRelationship

									cmd := &cobra.Command{
										Use: "sasport",

										Short: "Update a 'storage.SasPort' resource.",
										Long: `Update a 'storage.SasPort' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.PatchStorageSasPort(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Address, "Address", "", "Address")

									cmd.Flags().StringVar(&LinkDescription, "LinkDescription", "", "LinkDescription")

									cmd.Flags().StringVar(&LinkSpeed, "LinkSpeed", "", "LinkSpeed")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StoragePhysicalDisk with unknown data type StoragePhysicalDiskRelationship
									if isMoRef(openapi.StoragePhysicalDiskRelationship{}) {
										cmd.Flags().String("StoragePhysicalDisk", "", "StoragePhysicalDisk")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var GlobalHotSpares with unknown data type []StorageLocalDisk

									var RetainPolicyVirtualDrives bool

									var UnusedDisksState string

									//Skipping var VirtualDrives with unknown data type []StorageVirtualDriveConfig

									//Skipping var DiskGroupPolicies with unknown data type []StorageDiskGroupPolicyRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "storagepolicy",

										Short: "Update a 'storage.StoragePolicy' resource.",
										Long: `Update a 'storage.StoragePolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.PatchStorageStoragePolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&RetainPolicyVirtualDrives, "RetainPolicyVirtualDrives", false, "RetainPolicyVirtualDrives")

									cmd.Flags().StringVar(&UnusedDisksState, "UnusedDisksState", "", "UnusedDisksState")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var OperQualifierReason string

									var Presence string

									var Role string

									var SpanId string

									//Skipping var VdMemberEpId with unknown data type int64

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StorageVirtualDrive with unknown data type StorageVirtualDriveRelationship

									cmd := &cobra.Command{
										Use: "vdmemberep",

										Short: "Update a 'storage.VdMemberEp' resource.",
										Long: `Update a 'storage.VdMemberEp' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.PatchStorageVdMemberEp(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&OperQualifierReason, "OperQualifierReason", "", "OperQualifierReason")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&Role, "Role", "", "Role")

									cmd.Flags().StringVar(&SpanId, "SpanId", "", "SpanId")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageVirtualDrive with unknown data type StorageVirtualDriveRelationship
									if isMoRef(openapi.StorageVirtualDriveRelationship{}) {
										cmd.Flags().String("StorageVirtualDrive", "", "StorageVirtualDrive")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Model string

									var Revision string

									var Serial string

									var Vendor string

									var AccessPolicy string

									var ActualWriteCachePolicy string

									var AvailableSize string

									var BlockSize string

									var Bootable string

									var ConfigState string

									var ConfiguredWriteCachePolicy string

									var ConnectionProtocol string

									var DriveCache string

									var DriveSecurity string

									var DriveState string

									var IoPolicy string

									var Name string

									var NumBlocks string

									var OperState string

									var Operability string

									var PhysicalBlockSize string

									var Presence string

									var ReadPolicy string

									var SecurityFlags string

									var Size string

									var StripSize string

									var Type string

									var Uuid string

									var VendorUuid string

									var VirtualDriveId string

									//Skipping var PhysicalDiskUsages with unknown data type []StoragePhysicalDiskUsageRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StorageController with unknown data type StorageControllerRelationship

									//Skipping var VdMemberEps with unknown data type []StorageVdMemberEpRelationship

									//Skipping var VirtualDriveExtension with unknown data type StorageVirtualDriveExtensionRelationship

									cmd := &cobra.Command{
										Use: "virtualdrive",

										Short: "Update a 'storage.VirtualDrive' resource.",
										Long: `Update a 'storage.VirtualDrive' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.PatchStorageVirtualDrive(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Revision, "Revision", "", "Revision")

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&AccessPolicy, "AccessPolicy", "", "AccessPolicy")

									cmd.Flags().StringVar(&ActualWriteCachePolicy, "ActualWriteCachePolicy", "", "ActualWriteCachePolicy")

									cmd.Flags().StringVar(&AvailableSize, "AvailableSize", "", "AvailableSize")

									cmd.Flags().StringVar(&BlockSize, "BlockSize", "", "BlockSize")

									cmd.Flags().StringVar(&Bootable, "Bootable", "", "Bootable")

									cmd.Flags().StringVar(&ConfigState, "ConfigState", "", "ConfigState")

									cmd.Flags().StringVar(&ConfiguredWriteCachePolicy, "ConfiguredWriteCachePolicy", "", "ConfiguredWriteCachePolicy")

									cmd.Flags().StringVar(&ConnectionProtocol, "ConnectionProtocol", "", "ConnectionProtocol")

									cmd.Flags().StringVar(&DriveCache, "DriveCache", "", "DriveCache")

									cmd.Flags().StringVar(&DriveSecurity, "DriveSecurity", "", "DriveSecurity")

									cmd.Flags().StringVar(&DriveState, "DriveState", "", "DriveState")

									cmd.Flags().StringVar(&IoPolicy, "IoPolicy", "", "IoPolicy")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&NumBlocks, "NumBlocks", "", "NumBlocks")

									cmd.Flags().StringVar(&OperState, "OperState", "", "OperState")

									cmd.Flags().StringVar(&Operability, "Operability", "", "Operability")

									cmd.Flags().StringVar(&PhysicalBlockSize, "PhysicalBlockSize", "", "PhysicalBlockSize")

									cmd.Flags().StringVar(&Presence, "Presence", "", "Presence")

									cmd.Flags().StringVar(&ReadPolicy, "ReadPolicy", "", "ReadPolicy")

									cmd.Flags().StringVar(&SecurityFlags, "SecurityFlags", "", "SecurityFlags")

									cmd.Flags().StringVar(&Size, "Size", "", "Size")

									cmd.Flags().StringVar(&StripSize, "StripSize", "", "StripSize")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									cmd.Flags().StringVar(&Uuid, "Uuid", "", "Uuid")

									cmd.Flags().StringVar(&VendorUuid, "VendorUuid", "", "VendorUuid")

									cmd.Flags().StringVar(&VirtualDriveId, "VirtualDriveId", "", "VirtualDriveId")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageController with unknown data type StorageControllerRelationship
									if isMoRef(openapi.StorageControllerRelationship{}) {
										cmd.Flags().String("StorageController", "", "StorageController")
									}

									//Skipping var VirtualDriveExtension with unknown data type StorageVirtualDriveExtensionRelationship
									if isMoRef(openapi.StorageVirtualDriveExtensionRelationship{}) {
										cmd.Flags().String("VirtualDriveExtension", "", "VirtualDriveExtension")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Bootable string

									//Skipping var ContainerId with unknown data type int64

									var DriveState string

									var Name string

									var OperDeviceId string

									var Uuid string

									var VendorUuid string

									var VirtualDriveDn string

									var VirtualDriveId string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var StorageController with unknown data type StorageControllerRelationship

									//Skipping var VirtualDrive with unknown data type StorageVirtualDriveRelationship

									cmd := &cobra.Command{
										Use: "virtualdriveextension",

										Short: "Update a 'storage.VirtualDriveExtension' resource.",
										Long: `Update a 'storage.VirtualDriveExtension' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.StorageApi.PatchStorageVirtualDriveExtension(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Bootable, "Bootable", "", "Bootable")

									cmd.Flags().StringVar(&DriveState, "DriveState", "", "DriveState")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&OperDeviceId, "OperDeviceId", "", "OperDeviceId")

									cmd.Flags().StringVar(&Uuid, "Uuid", "", "Uuid")

									cmd.Flags().StringVar(&VendorUuid, "VendorUuid", "", "VendorUuid")

									cmd.Flags().StringVar(&VirtualDriveDn, "VirtualDriveDn", "", "VirtualDriveDn")

									cmd.Flags().StringVar(&VirtualDriveId, "VirtualDriveId", "", "VirtualDriveId")

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var StorageController with unknown data type StorageControllerRelationship
									if isMoRef(openapi.StorageControllerRelationship{}) {
										cmd.Flags().String("StorageController", "", "StorageController")
									}

									//Skipping var VirtualDrive with unknown data type StorageVirtualDriveRelationship
									if isMoRef(openapi.StorageVirtualDriveRelationship{}) {
										cmd.Flags().String("VirtualDrive", "", "VirtualDrive")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "syslog",

								Short: "Update Syslog resource(s)",
								Long: `Update Syslog resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var LocalClients with unknown data type []SyslogLocalClientBase

									//Skipping var RemoteClients with unknown data type []SyslogRemoteClientBase

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "policy",

										Short: "Update a 'syslog.Policy' resource.",
										Long: `Update a 'syslog.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.SyslogApi.PatchSyslogPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "tam",

								Short: "Update Tam resource(s)",
								Long: `Update Tam resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var AdvisoryCount with unknown data type int64

									//Skipping var Account with unknown data type IamAccountRelationship

									cmd := &cobra.Command{
										Use: "advisorycount",

										Short: "Update a 'tam.AdvisoryCount' resource.",
										Long: `Update a 'tam.AdvisoryCount' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.TamApi.PatchTamAdvisoryCount(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var State string

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var Advisory with unknown data type TamAdvisoryRelationship

									cmd := &cobra.Command{
										Use: "advisoryinfo",

										Short: "Update a 'tam.AdvisoryInfo' resource.",
										Long: `Update a 'tam.AdvisoryInfo' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.TamApi.PatchTamAdvisoryInfo(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&State, "State", "", "State")

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var Advisory with unknown data type TamAdvisoryRelationship
									if isMoRef(openapi.TamAdvisoryRelationship{}) {
										cmd.Flags().String("Advisory", "", "Advisory")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var AffectedObjectMoid string

									var AffectedObjectType string

									//Skipping var LastStateChangeTime with unknown data type time.Time

									//Skipping var LastVerifiedTime with unknown data type time.Time

									var State string

									//Skipping var Advisory with unknown data type TamAdvisoryRelationship

									//Skipping var AffectedObject with unknown data type MoBaseMoRelationship

									//Skipping var DeviceRegistration with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "advisoryinstance",

										Short: "Update a 'tam.AdvisoryInstance' resource.",
										Long: `Update a 'tam.AdvisoryInstance' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.TamApi.PatchTamAdvisoryInstance(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&AffectedObjectMoid, "AffectedObjectMoid", "", "AffectedObjectMoid")

									cmd.Flags().StringVar(&AffectedObjectType, "AffectedObjectType", "", "AffectedObjectType")

									cmd.Flags().StringVar(&State, "State", "", "State")

									//Skipping var Advisory with unknown data type TamAdvisoryRelationship
									if isMoRef(openapi.TamAdvisoryRelationship{}) {
										cmd.Flags().String("Advisory", "", "Advisory")
									}

									//Skipping var AffectedObject with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("AffectedObject", "", "AffectedObject")
									}

									//Skipping var DeviceRegistration with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("DeviceRegistration", "", "DeviceRegistration")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var Severity with unknown data type TamSeverity

									var State string

									//Skipping var Actions with unknown data type []TamAction

									var AdvisoryId string

									//Skipping var ApiDataSources with unknown data type []TamApiDataSource

									//Skipping var BaseScore with unknown data type float32

									var CveIds []string

									//Skipping var DatePublished with unknown data type time.Time

									//Skipping var DateUpdated with unknown data type time.Time

									//Skipping var EnvironmentalScore with unknown data type float32

									var ExternalUrl string

									var Recommendation string

									var Status string

									//Skipping var TemporalScore with unknown data type float32

									var Version string

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "securityadvisory",

										Short: "Update a 'tam.SecurityAdvisory' resource.",
										Long: `Update a 'tam.SecurityAdvisory' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.TamApi.PatchTamSecurityAdvisory(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Severity with unknown data type TamSeverity
									if isMoRef(openapi.TamSeverity{}) {
										cmd.Flags().String("Severity", "", "Severity")
									}

									cmd.Flags().StringVar(&State, "State", "", "State")

									cmd.Flags().StringVar(&AdvisoryId, "AdvisoryId", "", "AdvisoryId")

									cmd.Flags().StringSliceVar(&CveIds, "CveIds", []string{}, "CveIds")

									cmd.Flags().StringVar(&ExternalUrl, "ExternalUrl", "", "ExternalUrl")

									cmd.Flags().StringVar(&Recommendation, "Recommendation", "", "Recommendation")

									cmd.Flags().StringVar(&Status, "Status", "", "Status")

									cmd.Flags().StringVar(&Version, "Version", "", "Version")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "top",

								Short: "Update Top resource(s)",
								Long: `Update Top resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DeviceMoId string

									var Dn string

									var Rn string

									var Ipv4Address string

									var Ipv6Address string

									var Mode string

									var Name string

									var TimeZone string

									//Skipping var ComputeBlades with unknown data type []ComputeBladeRelationship

									//Skipping var ComputeRackUnits with unknown data type []ComputeRackUnitRelationship

									//Skipping var ManagementController with unknown data type ManagementControllerRelationship

									//Skipping var NetworkElements with unknown data type []NetworkElementRelationship

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									cmd := &cobra.Command{
										Use: "system",

										Short: "Update a 'top.System' resource.",
										Long: `Update a 'top.System' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.TopApi.PatchTopSystem(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&DeviceMoId, "DeviceMoId", "", "DeviceMoId")

									cmd.Flags().StringVar(&Dn, "Dn", "", "Dn")

									cmd.Flags().StringVar(&Rn, "Rn", "", "Rn")

									cmd.Flags().StringVar(&Ipv4Address, "Ipv4Address", "", "Ipv4Address")

									cmd.Flags().StringVar(&Ipv6Address, "Ipv6Address", "", "Ipv6Address")

									cmd.Flags().StringVar(&Mode, "Mode", "", "Mode")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&TimeZone, "TimeZone", "", "TimeZone")

									//Skipping var ManagementController with unknown data type ManagementControllerRelationship
									if isMoRef(openapi.ManagementControllerRelationship{}) {
										cmd.Flags().String("ManagementController", "", "ManagementController")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "virtualization",

								Short: "Update Virtualization resource(s)",
								Long: `Update Virtualization resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									var HypervisorType string

									var Identity string

									//Skipping var MemoryCapacity with unknown data type VirtualizationMemoryCapacity

									var Name string

									//Skipping var ProcessorCapacity with unknown data type VirtualizationComputeCapacity

									var Status string

									//Skipping var TotalCores with unknown data type int64

									//Skipping var DatastoreCount with unknown data type int64

									//Skipping var Datacenter with unknown data type VirtualizationVmwareDatacenterRelationship

									//Skipping var Hosts with unknown data type []VirtualizationVmwareHostRelationship

									cmd := &cobra.Command{
										Use: "vmwarecluster",

										Short: "Update a 'virtualization.VmwareCluster' resource.",
										Long: `Update a 'virtualization.VmwareCluster' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VirtualizationApi.PatchVirtualizationVmwareCluster(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									cmd.Flags().StringVar(&HypervisorType, "HypervisorType", "", "HypervisorType")

									cmd.Flags().StringVar(&Identity, "Identity", "", "Identity")

									//Skipping var MemoryCapacity with unknown data type VirtualizationMemoryCapacity
									if isMoRef(openapi.VirtualizationMemoryCapacity{}) {
										cmd.Flags().String("MemoryCapacity", "", "MemoryCapacity")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var ProcessorCapacity with unknown data type VirtualizationComputeCapacity
									if isMoRef(openapi.VirtualizationComputeCapacity{}) {
										cmd.Flags().String("ProcessorCapacity", "", "ProcessorCapacity")
									}

									cmd.Flags().StringVar(&Status, "Status", "", "Status")

									//Skipping var Datacenter with unknown data type VirtualizationVmwareDatacenterRelationship
									if isMoRef(openapi.VirtualizationVmwareDatacenterRelationship{}) {
										cmd.Flags().String("Datacenter", "", "Datacenter")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									var Identity string

									var Name string

									//Skipping var ClusterCount with unknown data type int64

									//Skipping var DatastoreCount with unknown data type int64

									//Skipping var HostCount with unknown data type int64

									//Skipping var NetworkCount with unknown data type int64

									//Skipping var VmCount with unknown data type int64

									//Skipping var HypervisorManager with unknown data type VirtualizationVmwareVcenterRelationship

									cmd := &cobra.Command{
										Use: "vmwaredatacenter",

										Short: "Update a 'virtualization.VmwareDatacenter' resource.",
										Long: `Update a 'virtualization.VmwareDatacenter' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VirtualizationApi.PatchVirtualizationVmwareDatacenter(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									cmd.Flags().StringVar(&Identity, "Identity", "", "Identity")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var HypervisorManager with unknown data type VirtualizationVmwareVcenterRelationship
									if isMoRef(openapi.VirtualizationVmwareVcenterRelationship{}) {
										cmd.Flags().String("HypervisorManager", "", "HypervisorManager")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var Capacity with unknown data type VirtualizationStorageCapacity

									//Skipping var HostCount with unknown data type int64

									var Identity string

									var Name string

									var Type string

									//Skipping var VmCount with unknown data type int64

									var Accessible bool

									var MaintenanceMode bool

									var MultipleHostAccess bool

									var Status string

									var ThinProvisioningSupported bool

									//Skipping var UnCommitted with unknown data type int64

									var Url string

									//Skipping var Cluster with unknown data type VirtualizationVmwareClusterRelationship

									//Skipping var Datacenter with unknown data type VirtualizationVmwareDatacenterRelationship

									//Skipping var Hosts with unknown data type []VirtualizationVmwareHostRelationship

									cmd := &cobra.Command{
										Use: "vmwaredatastore",

										Short: "Update a 'virtualization.VmwareDatastore' resource.",
										Long: `Update a 'virtualization.VmwareDatastore' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VirtualizationApi.PatchVirtualizationVmwareDatastore(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var Capacity with unknown data type VirtualizationStorageCapacity
									if isMoRef(openapi.VirtualizationStorageCapacity{}) {
										cmd.Flags().String("Capacity", "", "Capacity")
									}

									cmd.Flags().StringVar(&Identity, "Identity", "", "Identity")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									cmd.Flags().BoolVar(&Accessible, "Accessible", false, "Accessible")

									cmd.Flags().BoolVar(&MaintenanceMode, "MaintenanceMode", false, "MaintenanceMode")

									cmd.Flags().BoolVar(&MultipleHostAccess, "MultipleHostAccess", false, "MultipleHostAccess")

									cmd.Flags().StringVar(&Status, "Status", "", "Status")

									cmd.Flags().BoolVar(&ThinProvisioningSupported, "ThinProvisioningSupported", false, "ThinProvisioningSupported")

									cmd.Flags().StringVar(&Url, "Url", "", "Url")

									//Skipping var Cluster with unknown data type VirtualizationVmwareClusterRelationship
									if isMoRef(openapi.VirtualizationVmwareClusterRelationship{}) {
										cmd.Flags().String("Cluster", "", "Cluster")
									}

									//Skipping var Datacenter with unknown data type VirtualizationVmwareDatacenterRelationship
									if isMoRef(openapi.VirtualizationVmwareDatacenterRelationship{}) {
										cmd.Flags().String("Datacenter", "", "Datacenter")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var CpuInfo with unknown data type VirtualizationCpuInfo

									//Skipping var HardwareInfo with unknown data type InfraHardwareInfo

									var HypervisorType string

									var Identity string

									var MaintenanceMode bool

									//Skipping var MemoryCapacity with unknown data type VirtualizationMemoryCapacity

									var Model string

									var Name string

									//Skipping var ProcessorCapacity with unknown data type VirtualizationComputeCapacity

									//Skipping var ProductInfo with unknown data type VirtualizationProductInfo

									var Serial string

									var Status string

									var UpTime string

									var Uuid string

									var Vendor string

									//Skipping var BootTime with unknown data type time.Time

									var ConnectionState string

									var HwPowerState string

									//Skipping var NetworkAdapterCount with unknown data type int64

									//Skipping var ResourceConsumed with unknown data type VirtualizationResourceConsumption

									//Skipping var StorageAdapterCount with unknown data type int64

									var VcenterHostId string

									//Skipping var Cluster with unknown data type VirtualizationVmwareClusterRelationship

									//Skipping var Datacenter with unknown data type VirtualizationVmwareDatacenterRelationship

									//Skipping var Datastores with unknown data type []VirtualizationVmwareDatastoreRelationship

									cmd := &cobra.Command{
										Use: "vmwarehost",

										Short: "Update a 'virtualization.VmwareHost' resource.",
										Long: `Update a 'virtualization.VmwareHost' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VirtualizationApi.PatchVirtualizationVmwareHost(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var CpuInfo with unknown data type VirtualizationCpuInfo
									if isMoRef(openapi.VirtualizationCpuInfo{}) {
										cmd.Flags().String("CpuInfo", "", "CpuInfo")
									}

									//Skipping var HardwareInfo with unknown data type InfraHardwareInfo
									if isMoRef(openapi.InfraHardwareInfo{}) {
										cmd.Flags().String("HardwareInfo", "", "HardwareInfo")
									}

									cmd.Flags().StringVar(&HypervisorType, "HypervisorType", "", "HypervisorType")

									cmd.Flags().StringVar(&Identity, "Identity", "", "Identity")

									cmd.Flags().BoolVar(&MaintenanceMode, "MaintenanceMode", false, "MaintenanceMode")

									//Skipping var MemoryCapacity with unknown data type VirtualizationMemoryCapacity
									if isMoRef(openapi.VirtualizationMemoryCapacity{}) {
										cmd.Flags().String("MemoryCapacity", "", "MemoryCapacity")
									}

									cmd.Flags().StringVar(&Model, "Model", "", "Model")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var ProcessorCapacity with unknown data type VirtualizationComputeCapacity
									if isMoRef(openapi.VirtualizationComputeCapacity{}) {
										cmd.Flags().String("ProcessorCapacity", "", "ProcessorCapacity")
									}

									//Skipping var ProductInfo with unknown data type VirtualizationProductInfo
									if isMoRef(openapi.VirtualizationProductInfo{}) {
										cmd.Flags().String("ProductInfo", "", "ProductInfo")
									}

									cmd.Flags().StringVar(&Serial, "Serial", "", "Serial")

									cmd.Flags().StringVar(&Status, "Status", "", "Status")

									cmd.Flags().StringVar(&UpTime, "UpTime", "", "UpTime")

									cmd.Flags().StringVar(&Uuid, "Uuid", "", "Uuid")

									cmd.Flags().StringVar(&Vendor, "Vendor", "", "Vendor")

									cmd.Flags().StringVar(&ConnectionState, "ConnectionState", "", "ConnectionState")

									cmd.Flags().StringVar(&HwPowerState, "HwPowerState", "", "HwPowerState")

									//Skipping var ResourceConsumed with unknown data type VirtualizationResourceConsumption
									if isMoRef(openapi.VirtualizationResourceConsumption{}) {
										cmd.Flags().String("ResourceConsumed", "", "ResourceConsumed")
									}

									cmd.Flags().StringVar(&VcenterHostId, "VcenterHostId", "", "VcenterHostId")

									//Skipping var Cluster with unknown data type VirtualizationVmwareClusterRelationship
									if isMoRef(openapi.VirtualizationVmwareClusterRelationship{}) {
										cmd.Flags().String("Cluster", "", "Cluster")
									}

									//Skipping var Datacenter with unknown data type VirtualizationVmwareDatacenterRelationship
									if isMoRef(openapi.VirtualizationVmwareDatacenterRelationship{}) {
										cmd.Flags().String("Datacenter", "", "Datacenter")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship

									//Skipping var Capacity with unknown data type InfraHardwareInfo

									//Skipping var GuestInfo with unknown data type VirtualizationGuestInfo

									var HypervisorType string

									var Identity string

									var IpAddress []string

									//Skipping var MemoryCapacity with unknown data type VirtualizationMemoryCapacity

									var Name string

									var PowerState string

									//Skipping var ProcessorCapacity with unknown data type VirtualizationComputeCapacity

									var Uuid string

									var Annotation string

									//Skipping var BootTime with unknown data type time.Time

									var ConfigName string

									var ConnectionState string

									var CpuHotAddEnabled bool

									//Skipping var CpuShares with unknown data type VirtualizationVmCpuShareInfo

									//Skipping var CpuSocketInfo with unknown data type VirtualizationVmCpuSocketInfo

									var CustomAttributes []string

									var DefaultPowerOffType string

									var DhcpEnabled bool

									//Skipping var DiskCommitInfo with unknown data type VirtualizationVmDiskCommitInfo

									var DnsServerList []string

									var DnsSuffixList []string

									var Folder string

									var GuestState string

									var InstanceUuid string

									var IsTemplate bool

									var MacAddress []string

									//Skipping var MemShares with unknown data type VirtualizationVmMemoryShareInfo

									var MemoryHotAddEnabled bool

									//Skipping var NetworkCount with unknown data type int64

									var PortGroups []string

									var ProtectedVm bool

									//Skipping var RemoteDisplayInfo with unknown data type VirtualizationRemoteDisplayInfo

									var RemoteDisplayVncEnabled bool

									var ResourcePool string

									var ResourcePoolOwner string

									var ResourcePoolParent string

									var ToolRunningStatus string

									var ToolsVersion string

									//Skipping var VmDiskCount with unknown data type int64

									var VmOverallStatus string

									var VmPath string

									var VmVersion string

									//Skipping var VmVnicCount with unknown data type int64

									var VnicDeviceConfigId string

									//Skipping var Cluster with unknown data type VirtualizationVmwareClusterRelationship

									//Skipping var Datacenter with unknown data type VirtualizationVmwareDatacenterRelationship

									//Skipping var Datastores with unknown data type []VirtualizationVmwareDatastoreRelationship

									//Skipping var Host with unknown data type VirtualizationVmwareHostRelationship

									cmd := &cobra.Command{
										Use: "vmwarevirtualmachine",

										Short: "Update a 'virtualization.VmwareVirtualMachine' resource.",
										Long: `Update a 'virtualization.VmwareVirtualMachine' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VirtualizationApi.PatchVirtualizationVmwareVirtualMachine(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var RegisteredDevice with unknown data type AssetDeviceRegistrationRelationship
									if isMoRef(openapi.AssetDeviceRegistrationRelationship{}) {
										cmd.Flags().String("RegisteredDevice", "", "RegisteredDevice")
									}

									//Skipping var Capacity with unknown data type InfraHardwareInfo
									if isMoRef(openapi.InfraHardwareInfo{}) {
										cmd.Flags().String("Capacity", "", "Capacity")
									}

									//Skipping var GuestInfo with unknown data type VirtualizationGuestInfo
									if isMoRef(openapi.VirtualizationGuestInfo{}) {
										cmd.Flags().String("GuestInfo", "", "GuestInfo")
									}

									cmd.Flags().StringVar(&HypervisorType, "HypervisorType", "", "HypervisorType")

									cmd.Flags().StringVar(&Identity, "Identity", "", "Identity")

									cmd.Flags().StringSliceVar(&IpAddress, "IpAddress", []string{}, "IpAddress")

									//Skipping var MemoryCapacity with unknown data type VirtualizationMemoryCapacity
									if isMoRef(openapi.VirtualizationMemoryCapacity{}) {
										cmd.Flags().String("MemoryCapacity", "", "MemoryCapacity")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&PowerState, "PowerState", "", "PowerState")

									//Skipping var ProcessorCapacity with unknown data type VirtualizationComputeCapacity
									if isMoRef(openapi.VirtualizationComputeCapacity{}) {
										cmd.Flags().String("ProcessorCapacity", "", "ProcessorCapacity")
									}

									cmd.Flags().StringVar(&Uuid, "Uuid", "", "Uuid")

									cmd.Flags().StringVar(&Annotation, "Annotation", "", "Annotation")

									cmd.Flags().StringVar(&ConfigName, "ConfigName", "", "ConfigName")

									cmd.Flags().StringVar(&ConnectionState, "ConnectionState", "", "ConnectionState")

									cmd.Flags().BoolVar(&CpuHotAddEnabled, "CpuHotAddEnabled", false, "CpuHotAddEnabled")

									//Skipping var CpuShares with unknown data type VirtualizationVmCpuShareInfo
									if isMoRef(openapi.VirtualizationVmCpuShareInfo{}) {
										cmd.Flags().String("CpuShares", "", "CpuShares")
									}

									//Skipping var CpuSocketInfo with unknown data type VirtualizationVmCpuSocketInfo
									if isMoRef(openapi.VirtualizationVmCpuSocketInfo{}) {
										cmd.Flags().String("CpuSocketInfo", "", "CpuSocketInfo")
									}

									cmd.Flags().StringSliceVar(&CustomAttributes, "CustomAttributes", []string{}, "CustomAttributes")

									cmd.Flags().StringVar(&DefaultPowerOffType, "DefaultPowerOffType", "", "DefaultPowerOffType")

									cmd.Flags().BoolVar(&DhcpEnabled, "DhcpEnabled", false, "DhcpEnabled")

									//Skipping var DiskCommitInfo with unknown data type VirtualizationVmDiskCommitInfo
									if isMoRef(openapi.VirtualizationVmDiskCommitInfo{}) {
										cmd.Flags().String("DiskCommitInfo", "", "DiskCommitInfo")
									}

									cmd.Flags().StringSliceVar(&DnsServerList, "DnsServerList", []string{}, "DnsServerList")

									cmd.Flags().StringSliceVar(&DnsSuffixList, "DnsSuffixList", []string{}, "DnsSuffixList")

									cmd.Flags().StringVar(&Folder, "Folder", "", "Folder")

									cmd.Flags().StringVar(&GuestState, "GuestState", "", "GuestState")

									cmd.Flags().StringVar(&InstanceUuid, "InstanceUuid", "", "InstanceUuid")

									cmd.Flags().BoolVar(&IsTemplate, "IsTemplate", false, "IsTemplate")

									cmd.Flags().StringSliceVar(&MacAddress, "MacAddress", []string{}, "MacAddress")

									//Skipping var MemShares with unknown data type VirtualizationVmMemoryShareInfo
									if isMoRef(openapi.VirtualizationVmMemoryShareInfo{}) {
										cmd.Flags().String("MemShares", "", "MemShares")
									}

									cmd.Flags().BoolVar(&MemoryHotAddEnabled, "MemoryHotAddEnabled", false, "MemoryHotAddEnabled")

									cmd.Flags().StringSliceVar(&PortGroups, "PortGroups", []string{}, "PortGroups")

									cmd.Flags().BoolVar(&ProtectedVm, "ProtectedVm", false, "ProtectedVm")

									//Skipping var RemoteDisplayInfo with unknown data type VirtualizationRemoteDisplayInfo
									if isMoRef(openapi.VirtualizationRemoteDisplayInfo{}) {
										cmd.Flags().String("RemoteDisplayInfo", "", "RemoteDisplayInfo")
									}

									cmd.Flags().BoolVar(&RemoteDisplayVncEnabled, "RemoteDisplayVncEnabled", false, "RemoteDisplayVncEnabled")

									cmd.Flags().StringVar(&ResourcePool, "ResourcePool", "", "ResourcePool")

									cmd.Flags().StringVar(&ResourcePoolOwner, "ResourcePoolOwner", "", "ResourcePoolOwner")

									cmd.Flags().StringVar(&ResourcePoolParent, "ResourcePoolParent", "", "ResourcePoolParent")

									cmd.Flags().StringVar(&ToolRunningStatus, "ToolRunningStatus", "", "ToolRunningStatus")

									cmd.Flags().StringVar(&ToolsVersion, "ToolsVersion", "", "ToolsVersion")

									cmd.Flags().StringVar(&VmOverallStatus, "VmOverallStatus", "", "VmOverallStatus")

									cmd.Flags().StringVar(&VmPath, "VmPath", "", "VmPath")

									cmd.Flags().StringVar(&VmVersion, "VmVersion", "", "VmVersion")

									cmd.Flags().StringVar(&VnicDeviceConfigId, "VnicDeviceConfigId", "", "VnicDeviceConfigId")

									//Skipping var Cluster with unknown data type VirtualizationVmwareClusterRelationship
									if isMoRef(openapi.VirtualizationVmwareClusterRelationship{}) {
										cmd.Flags().String("Cluster", "", "Cluster")
									}

									//Skipping var Datacenter with unknown data type VirtualizationVmwareDatacenterRelationship
									if isMoRef(openapi.VirtualizationVmwareDatacenterRelationship{}) {
										cmd.Flags().String("Datacenter", "", "Datacenter")
									}

									//Skipping var Host with unknown data type VirtualizationVmwareHostRelationship
									if isMoRef(openapi.VirtualizationVmwareHostRelationship{}) {
										cmd.Flags().String("Host", "", "Host")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "vmedia",

								Short: "Update Vmedia resource(s)",
								Long: `Update Vmedia resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var Enabled bool

									var Encryption bool

									var LowPowerUsb bool

									//Skipping var Mappings with unknown data type []VmediaMapping

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "policy",

										Short: "Update a 'vmedia.Policy' resource.",
										Long: `Update a 'vmedia.Policy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VmediaApi.PatchVmediaPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&Enabled, "Enabled", false, "Enabled")

									cmd.Flags().BoolVar(&Encryption, "Encryption", false, "Encryption")

									cmd.Flags().BoolVar(&LowPowerUsb, "LowPowerUsb", false, "LowPowerUsb")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "vnic",

								Short: "Update Vnic resource(s)",
								Long: `Update Vnic resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									var AdvancedFilter bool

									//Skipping var ArfsSettings with unknown data type VnicArfsSettings

									//Skipping var CompletionQueueSettings with unknown data type VnicCompletionQueueSettings

									//Skipping var InterruptSettings with unknown data type VnicEthInterruptSettings

									//Skipping var NvgreSettings with unknown data type VnicNvgreSettings

									//Skipping var RoceSettings with unknown data type VnicRoceSettings

									var RssSettings bool

									//Skipping var RxQueueSettings with unknown data type VnicEthRxQueueSettings

									//Skipping var TcpOffloadSettings with unknown data type VnicTcpOffloadSettings

									//Skipping var TxQueueSettings with unknown data type VnicEthTxQueueSettings

									//Skipping var VxlanSettings with unknown data type VnicVxlanSettings

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "ethadapterpolicy",

										Short: "Update a 'vnic.EthAdapterPolicy' resource.",
										Long: `Update a 'vnic.EthAdapterPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.PatchVnicEthAdapterPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&AdvancedFilter, "AdvancedFilter", false, "AdvancedFilter")

									//Skipping var ArfsSettings with unknown data type VnicArfsSettings
									if isMoRef(openapi.VnicArfsSettings{}) {
										cmd.Flags().String("ArfsSettings", "", "ArfsSettings")
									}

									//Skipping var CompletionQueueSettings with unknown data type VnicCompletionQueueSettings
									if isMoRef(openapi.VnicCompletionQueueSettings{}) {
										cmd.Flags().String("CompletionQueueSettings", "", "CompletionQueueSettings")
									}

									//Skipping var InterruptSettings with unknown data type VnicEthInterruptSettings
									if isMoRef(openapi.VnicEthInterruptSettings{}) {
										cmd.Flags().String("InterruptSettings", "", "InterruptSettings")
									}

									//Skipping var NvgreSettings with unknown data type VnicNvgreSettings
									if isMoRef(openapi.VnicNvgreSettings{}) {
										cmd.Flags().String("NvgreSettings", "", "NvgreSettings")
									}

									//Skipping var RoceSettings with unknown data type VnicRoceSettings
									if isMoRef(openapi.VnicRoceSettings{}) {
										cmd.Flags().String("RoceSettings", "", "RoceSettings")
									}

									cmd.Flags().BoolVar(&RssSettings, "RssSettings", false, "RssSettings")

									//Skipping var RxQueueSettings with unknown data type VnicEthRxQueueSettings
									if isMoRef(openapi.VnicEthRxQueueSettings{}) {
										cmd.Flags().String("RxQueueSettings", "", "RxQueueSettings")
									}

									//Skipping var TcpOffloadSettings with unknown data type VnicTcpOffloadSettings
									if isMoRef(openapi.VnicTcpOffloadSettings{}) {
										cmd.Flags().String("TcpOffloadSettings", "", "TcpOffloadSettings")
									}

									//Skipping var TxQueueSettings with unknown data type VnicEthTxQueueSettings
									if isMoRef(openapi.VnicEthTxQueueSettings{}) {
										cmd.Flags().String("TxQueueSettings", "", "TxQueueSettings")
									}

									//Skipping var VxlanSettings with unknown data type VnicVxlanSettings
									if isMoRef(openapi.VnicVxlanSettings{}) {
										cmd.Flags().String("VxlanSettings", "", "VxlanSettings")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Cdn with unknown data type VnicCdn

									var Name string

									//Skipping var Order with unknown data type int64

									//Skipping var Placement with unknown data type VnicPlacementSettings

									//Skipping var UsnicSettings with unknown data type VnicUsnicSettings

									//Skipping var VmqSettings with unknown data type VnicVmqSettings

									//Skipping var EthAdapterPolicy with unknown data type VnicEthAdapterPolicyRelationship

									//Skipping var EthNetworkPolicy with unknown data type VnicEthNetworkPolicyRelationship

									//Skipping var EthQosPolicy with unknown data type VnicEthQosPolicyRelationship

									//Skipping var LanConnectivityPolicy with unknown data type VnicLanConnectivityPolicyRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "ethif",

										Short: "Update a 'vnic.EthIf' resource.",
										Long: `Update a 'vnic.EthIf' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.PatchVnicEthIf(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Cdn with unknown data type VnicCdn
									if isMoRef(openapi.VnicCdn{}) {
										cmd.Flags().String("Cdn", "", "Cdn")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Placement with unknown data type VnicPlacementSettings
									if isMoRef(openapi.VnicPlacementSettings{}) {
										cmd.Flags().String("Placement", "", "Placement")
									}

									//Skipping var UsnicSettings with unknown data type VnicUsnicSettings
									if isMoRef(openapi.VnicUsnicSettings{}) {
										cmd.Flags().String("UsnicSettings", "", "UsnicSettings")
									}

									//Skipping var VmqSettings with unknown data type VnicVmqSettings
									if isMoRef(openapi.VnicVmqSettings{}) {
										cmd.Flags().String("VmqSettings", "", "VmqSettings")
									}

									//Skipping var EthAdapterPolicy with unknown data type VnicEthAdapterPolicyRelationship
									if isMoRef(openapi.VnicEthAdapterPolicyRelationship{}) {
										cmd.Flags().String("EthAdapterPolicy", "", "EthAdapterPolicy")
									}

									//Skipping var EthNetworkPolicy with unknown data type VnicEthNetworkPolicyRelationship
									if isMoRef(openapi.VnicEthNetworkPolicyRelationship{}) {
										cmd.Flags().String("EthNetworkPolicy", "", "EthNetworkPolicy")
									}

									//Skipping var EthQosPolicy with unknown data type VnicEthQosPolicyRelationship
									if isMoRef(openapi.VnicEthQosPolicyRelationship{}) {
										cmd.Flags().String("EthQosPolicy", "", "EthQosPolicy")
									}

									//Skipping var LanConnectivityPolicy with unknown data type VnicLanConnectivityPolicyRelationship
									if isMoRef(openapi.VnicLanConnectivityPolicyRelationship{}) {
										cmd.Flags().String("LanConnectivityPolicy", "", "LanConnectivityPolicy")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var VlanSettings with unknown data type VnicVlanSettings

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "ethnetworkpolicy",

										Short: "Update a 'vnic.EthNetworkPolicy' resource.",
										Long: `Update a 'vnic.EthNetworkPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.PatchVnicEthNetworkPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var VlanSettings with unknown data type VnicVlanSettings
									if isMoRef(openapi.VnicVlanSettings{}) {
										cmd.Flags().String("VlanSettings", "", "VlanSettings")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var Cos with unknown data type int64

									//Skipping var Mtu with unknown data type int64

									//Skipping var RateLimit with unknown data type int64

									var TrustHostCos bool

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "ethqospolicy",

										Short: "Update a 'vnic.EthQosPolicy' resource.",
										Long: `Update a 'vnic.EthQosPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.PatchVnicEthQosPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&TrustHostCos, "TrustHostCos", false, "TrustHostCos")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var ErrorDetectionTimeout with unknown data type int64

									//Skipping var ErrorRecoverySettings with unknown data type VnicFcErrorRecoverySettings

									//Skipping var FlogiSettings with unknown data type VnicFlogiSettings

									//Skipping var InterruptSettings with unknown data type VnicFcInterruptSettings

									//Skipping var IoThrottleCount with unknown data type int64

									//Skipping var LunCount with unknown data type int64

									//Skipping var LunQueueDepth with unknown data type int64

									//Skipping var PlogiSettings with unknown data type VnicPlogiSettings

									//Skipping var ResourceAllocationTimeout with unknown data type int64

									//Skipping var RxQueueSettings with unknown data type VnicFcQueueSettings

									//Skipping var ScsiQueueSettings with unknown data type VnicScsiQueueSettings

									//Skipping var TxQueueSettings with unknown data type VnicFcQueueSettings

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "fcadapterpolicy",

										Short: "Update a 'vnic.FcAdapterPolicy' resource.",
										Long: `Update a 'vnic.FcAdapterPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.PatchVnicFcAdapterPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var ErrorRecoverySettings with unknown data type VnicFcErrorRecoverySettings
									if isMoRef(openapi.VnicFcErrorRecoverySettings{}) {
										cmd.Flags().String("ErrorRecoverySettings", "", "ErrorRecoverySettings")
									}

									//Skipping var FlogiSettings with unknown data type VnicFlogiSettings
									if isMoRef(openapi.VnicFlogiSettings{}) {
										cmd.Flags().String("FlogiSettings", "", "FlogiSettings")
									}

									//Skipping var InterruptSettings with unknown data type VnicFcInterruptSettings
									if isMoRef(openapi.VnicFcInterruptSettings{}) {
										cmd.Flags().String("InterruptSettings", "", "InterruptSettings")
									}

									//Skipping var PlogiSettings with unknown data type VnicPlogiSettings
									if isMoRef(openapi.VnicPlogiSettings{}) {
										cmd.Flags().String("PlogiSettings", "", "PlogiSettings")
									}

									//Skipping var RxQueueSettings with unknown data type VnicFcQueueSettings
									if isMoRef(openapi.VnicFcQueueSettings{}) {
										cmd.Flags().String("RxQueueSettings", "", "RxQueueSettings")
									}

									//Skipping var ScsiQueueSettings with unknown data type VnicScsiQueueSettings
									if isMoRef(openapi.VnicScsiQueueSettings{}) {
										cmd.Flags().String("ScsiQueueSettings", "", "ScsiQueueSettings")
									}

									//Skipping var TxQueueSettings with unknown data type VnicFcQueueSettings
									if isMoRef(openapi.VnicFcQueueSettings{}) {
										cmd.Flags().String("TxQueueSettings", "", "TxQueueSettings")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Name string

									//Skipping var Order with unknown data type int64

									var PersistentBindings bool

									//Skipping var Placement with unknown data type VnicPlacementSettings

									var Type string

									//Skipping var FcAdapterPolicy with unknown data type VnicFcAdapterPolicyRelationship

									//Skipping var FcNetworkPolicy with unknown data type VnicFcNetworkPolicyRelationship

									//Skipping var FcQosPolicy with unknown data type VnicFcQosPolicyRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var SanConnectivityPolicy with unknown data type VnicSanConnectivityPolicyRelationship

									cmd := &cobra.Command{
										Use: "fcif",

										Short: "Update a 'vnic.FcIf' resource.",
										Long: `Update a 'vnic.FcIf' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.PatchVnicFcIf(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().BoolVar(&PersistentBindings, "PersistentBindings", false, "PersistentBindings")

									//Skipping var Placement with unknown data type VnicPlacementSettings
									if isMoRef(openapi.VnicPlacementSettings{}) {
										cmd.Flags().String("Placement", "", "Placement")
									}

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									//Skipping var FcAdapterPolicy with unknown data type VnicFcAdapterPolicyRelationship
									if isMoRef(openapi.VnicFcAdapterPolicyRelationship{}) {
										cmd.Flags().String("FcAdapterPolicy", "", "FcAdapterPolicy")
									}

									//Skipping var FcNetworkPolicy with unknown data type VnicFcNetworkPolicyRelationship
									if isMoRef(openapi.VnicFcNetworkPolicyRelationship{}) {
										cmd.Flags().String("FcNetworkPolicy", "", "FcNetworkPolicy")
									}

									//Skipping var FcQosPolicy with unknown data type VnicFcQosPolicyRelationship
									if isMoRef(openapi.VnicFcQosPolicyRelationship{}) {
										cmd.Flags().String("FcQosPolicy", "", "FcQosPolicy")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									//Skipping var SanConnectivityPolicy with unknown data type VnicSanConnectivityPolicyRelationship
									if isMoRef(openapi.VnicSanConnectivityPolicyRelationship{}) {
										cmd.Flags().String("SanConnectivityPolicy", "", "SanConnectivityPolicy")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var VsanSettings with unknown data type VnicVsanSettings

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "fcnetworkpolicy",

										Short: "Update a 'vnic.FcNetworkPolicy' resource.",
										Long: `Update a 'vnic.FcNetworkPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.PatchVnicFcNetworkPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var VsanSettings with unknown data type VnicVsanSettings
									if isMoRef(openapi.VnicVsanSettings{}) {
										cmd.Flags().String("VsanSettings", "", "VsanSettings")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var Cos with unknown data type int64

									//Skipping var MaxDataFieldSize with unknown data type int64

									//Skipping var RateLimit with unknown data type int64

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									cmd := &cobra.Command{
										Use: "fcqospolicy",

										Short: "Update a 'vnic.FcQosPolicy' resource.",
										Long: `Update a 'vnic.FcQosPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.PatchVnicFcQosPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var EthIfs with unknown data type []VnicEthIfRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "lanconnectivitypolicy",

										Short: "Update a 'vnic.LanConnectivityPolicy' resource.",
										Long: `Update a 'vnic.LanConnectivityPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.PatchVnicLanConnectivityPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									var Name string

									//Skipping var FcIfs with unknown data type []VnicFcIfRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var Profiles with unknown data type []PolicyAbstractConfigProfileRelationship

									cmd := &cobra.Command{
										Use: "sanconnectivitypolicy",

										Short: "Update a 'vnic.SanConnectivityPolicy' resource.",
										Long: `Update a 'vnic.SanConnectivityPolicy' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.VnicApi.PatchVnicSanConnectivityPolicy(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {

							cmd := &cobra.Command{
								Use: "workflow",

								Short: "Update Workflow resource(s)",
								Long: `Update Workflow resource(s)
`,
							}

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									//Skipping var Batch with unknown data type []WorkflowApi

									//Skipping var Constraints with unknown data type WorkflowTaskConstraints

									var Description string

									var Name string

									//Skipping var Outcomes with unknown data type map[string]interface{}

									//Skipping var Output with unknown data type map[string]interface{}

									var SkipOnCondition string

									//Skipping var TaskDefinition with unknown data type WorkflowTaskDefinitionRelationship

									cmd := &cobra.Command{
										Use: "batchapiexecutor",

										Short: "Update a 'workflow.BatchApiExecutor' resource.",
										Long: `Update a 'workflow.BatchApiExecutor' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.PatchWorkflowBatchApiExecutor(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									//Skipping var Constraints with unknown data type WorkflowTaskConstraints
									if isMoRef(openapi.WorkflowTaskConstraints{}) {
										cmd.Flags().String("Constraints", "", "Constraints")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&SkipOnCondition, "SkipOnCondition", "", "SkipOnCondition")

									//Skipping var TaskDefinition with unknown data type WorkflowTaskDefinitionRelationship
									if isMoRef(openapi.WorkflowTaskDefinitionRelationship{}) {
										cmd.Flags().String("TaskDefinition", "", "TaskDefinition")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var CompositeType bool

									var Description string

									var Label string

									var Name string

									//Skipping var TypeDefinition with unknown data type []WorkflowBaseDataType

									//Skipping var Catalog with unknown data type WorkflowCatalogRelationship

									cmd := &cobra.Command{
										Use: "customdatatypedefinition",

										Short: "Update a 'workflow.CustomDataTypeDefinition' resource.",
										Long: `Update a 'workflow.CustomDataTypeDefinition' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.PatchWorkflowCustomDataTypeDefinition(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&CompositeType, "CompositeType", false, "CompositeType")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Label, "Label", "", "Label")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Catalog with unknown data type WorkflowCatalogRelationship
									if isMoRef(openapi.WorkflowCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DefaultVersion bool

									var Description string

									//Skipping var InternalProperties with unknown data type WorkflowInternalProperties

									var Label string

									var LicenseEntitlement string

									var Name string

									//Skipping var Properties with unknown data type WorkflowProperties

									var SecurePropAccess bool

									//Skipping var Version with unknown data type int64

									//Skipping var Catalog with unknown data type WorkflowCatalogRelationship

									//Skipping var ImplementedTasks with unknown data type []WorkflowTaskDefinitionRelationship

									//Skipping var InterfaceTask with unknown data type WorkflowTaskDefinitionRelationship

									cmd := &cobra.Command{
										Use: "taskdefinition",

										Short: "Update a 'workflow.TaskDefinition' resource.",
										Long: `Update a 'workflow.TaskDefinition' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.PatchWorkflowTaskDefinition(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&DefaultVersion, "DefaultVersion", false, "DefaultVersion")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									//Skipping var InternalProperties with unknown data type WorkflowInternalProperties
									if isMoRef(openapi.WorkflowInternalProperties{}) {
										cmd.Flags().String("InternalProperties", "", "InternalProperties")
									}

									cmd.Flags().StringVar(&Label, "Label", "", "Label")

									cmd.Flags().StringVar(&LicenseEntitlement, "LicenseEntitlement", "", "LicenseEntitlement")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Properties with unknown data type WorkflowProperties
									if isMoRef(openapi.WorkflowProperties{}) {
										cmd.Flags().String("Properties", "", "Properties")
									}

									cmd.Flags().BoolVar(&SecurePropAccess, "SecurePropAccess", false, "SecurePropAccess")

									//Skipping var Catalog with unknown data type WorkflowCatalogRelationship
									if isMoRef(openapi.WorkflowCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									//Skipping var InterfaceTask with unknown data type WorkflowTaskDefinitionRelationship
									if isMoRef(openapi.WorkflowTaskDefinitionRelationship{}) {
										cmd.Flags().String("InterfaceTask", "", "InterfaceTask")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Description string

									//Skipping var EndTime with unknown data type time.Time

									var FailureReason string

									//Skipping var Input with unknown data type map[string]interface{}

									var InstId string

									var Internal bool

									var Label string

									//Skipping var Message with unknown data type []WorkflowMessage

									var Name string

									//Skipping var Output with unknown data type map[string]interface{}

									var RefName string

									//Skipping var RetryCount with unknown data type int64

									//Skipping var StartTime with unknown data type time.Time

									var Status string

									//Skipping var TaskInstIdList with unknown data type []WorkflowTaskRetryInfo

									//Skipping var SubWorkflowInfo with unknown data type WorkflowWorkflowInfoRelationship

									//Skipping var TaskDefinition with unknown data type WorkflowTaskDefinitionRelationship

									//Skipping var WorkflowInfo with unknown data type WorkflowWorkflowInfoRelationship

									cmd := &cobra.Command{
										Use: "taskinfo",

										Short: "Update a 'workflow.TaskInfo' resource.",
										Long: `Update a 'workflow.TaskInfo' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.PatchWorkflowTaskInfo(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&FailureReason, "FailureReason", "", "FailureReason")

									cmd.Flags().StringVar(&InstId, "InstId", "", "InstId")

									cmd.Flags().BoolVar(&Internal, "Internal", false, "Internal")

									cmd.Flags().StringVar(&Label, "Label", "", "Label")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									cmd.Flags().StringVar(&RefName, "RefName", "", "RefName")

									cmd.Flags().StringVar(&Status, "Status", "", "Status")

									//Skipping var SubWorkflowInfo with unknown data type WorkflowWorkflowInfoRelationship
									if isMoRef(openapi.WorkflowWorkflowInfoRelationship{}) {
										cmd.Flags().String("SubWorkflowInfo", "", "SubWorkflowInfo")
									}

									//Skipping var TaskDefinition with unknown data type WorkflowTaskDefinitionRelationship
									if isMoRef(openapi.WorkflowTaskDefinitionRelationship{}) {
										cmd.Flags().String("TaskDefinition", "", "TaskDefinition")
									}

									//Skipping var WorkflowInfo with unknown data type WorkflowWorkflowInfoRelationship
									if isMoRef(openapi.WorkflowWorkflowInfoRelationship{}) {
										cmd.Flags().String("WorkflowInfo", "", "WorkflowInfo")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var DefaultVersion bool

									var Description string

									//Skipping var InputDefinition with unknown data type []WorkflowBaseDataType

									var Label string

									var LicenseEntitlement string

									//Skipping var MaxTaskCount with unknown data type int64

									var Name string

									//Skipping var OutputDefinition with unknown data type []WorkflowBaseDataType

									//Skipping var OutputParameters with unknown data type map[string]interface{}

									//Skipping var Properties with unknown data type WorkflowWorkflowProperties

									//Skipping var Tasks with unknown data type []WorkflowWorkflowTask

									//Skipping var UiRenderingData with unknown data type map[string]interface{}

									//Skipping var ValidationInformation with unknown data type WorkflowValidationInformation

									//Skipping var Version with unknown data type int64

									//Skipping var Catalog with unknown data type WorkflowCatalogRelationship

									cmd := &cobra.Command{
										Use: "workflowdefinition",

										Short: "Update a 'workflow.WorkflowDefinition' resource.",
										Long: `Update a 'workflow.WorkflowDefinition' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.PatchWorkflowWorkflowDefinition(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().BoolVar(&DefaultVersion, "DefaultVersion", false, "DefaultVersion")

									cmd.Flags().StringVar(&Description, "Description", "", "Description")

									cmd.Flags().StringVar(&Label, "Label", "", "Label")

									cmd.Flags().StringVar(&LicenseEntitlement, "LicenseEntitlement", "", "LicenseEntitlement")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Properties with unknown data type WorkflowWorkflowProperties
									if isMoRef(openapi.WorkflowWorkflowProperties{}) {
										cmd.Flags().String("Properties", "", "Properties")
									}

									//Skipping var ValidationInformation with unknown data type WorkflowValidationInformation
									if isMoRef(openapi.WorkflowValidationInformation{}) {
										cmd.Flags().String("ValidationInformation", "", "ValidationInformation")
									}

									//Skipping var Catalog with unknown data type WorkflowCatalogRelationship
									if isMoRef(openapi.WorkflowCatalogRelationship{}) {
										cmd.Flags().String("Catalog", "", "Catalog")
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {

									var AccountMoid string

									var ClassId string

									//Skipping var CreateTime with unknown data type time.Time

									var DomainGroupMoid string

									//Skipping var ModTime with unknown data type time.Time

									var Moid string

									var ObjectType string

									var Owners []string

									var SharedScope string

									//Skipping var Tags with unknown data type []MoTag

									//Skipping var VersionContext with unknown data type MoVersionContext

									//Skipping var Ancestors with unknown data type []MoBaseMoRelationship

									//Skipping var Parent with unknown data type MoBaseMoRelationship

									//Skipping var PermissionResources with unknown data type []MoBaseMoRelationship

									//Skipping var DisplayNames with unknown data type map[string][]string

									var Action string

									//Skipping var CleanupTime with unknown data type time.Time

									//Skipping var EndTime with unknown data type time.Time

									//Skipping var FailedWorkflowCleanupDuration with unknown data type int64

									//Skipping var Input with unknown data type map[string]interface{}

									var InstId string

									var Internal bool

									var LastAction string

									//Skipping var Message with unknown data type []WorkflowMessage

									//Skipping var MetaVersion with unknown data type int64

									var Name string

									//Skipping var Output with unknown data type map[string]interface{}

									//Skipping var Progress with unknown data type float32

									//Skipping var Properties with unknown data type WorkflowWorkflowInfoProperties

									var RetryFromTaskName string

									var Src string

									//Skipping var StartTime with unknown data type time.Time

									var Status string

									//Skipping var SuccessWorkflowCleanupDuration with unknown data type int64

									var TraceId string

									var Type string

									var UserId string

									var WaitReason string

									//Skipping var WorkflowCtx with unknown data type map[string]interface{}

									var WorkflowMetaType string

									//Skipping var WorkflowTaskCount with unknown data type int64

									//Skipping var Var0ClusterProfile with unknown data type HyperflexClusterProfileRelationship

									//Skipping var Var1Profile with unknown data type ServerProfileRelationship

									//Skipping var Account with unknown data type IamAccountRelationship

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship

									//Skipping var ParentTaskInfo with unknown data type WorkflowTaskInfoRelationship

									//Skipping var PendingDynamicWorkflowInfo with unknown data type WorkflowPendingDynamicWorkflowInfoRelationship

									//Skipping var Permission with unknown data type IamPermissionRelationship

									//Skipping var TaskInfos with unknown data type []WorkflowTaskInfoRelationship

									//Skipping var WorkflowDefinition with unknown data type WorkflowWorkflowDefinitionRelationship

									cmd := &cobra.Command{
										Use: "workflowinfo",

										Short: "Update a 'workflow.WorkflowInfo' resource.",
										Long: `Update a 'workflow.WorkflowInfo' resource.

Provide resource body as JSON on standard input`,
									}

									cmd.AddCommand(
										func() *cobra.Command {

											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													client.GetConfig().Debug = verbose

													req := client.WorkflowApi.PatchWorkflowWorkflowInfo(authCtx, args[0])

													res, httpResponse, err := req.Execute()
													resultHandler(res, httpResponse, err)

												},

												Args: cobra.ExactArgs(1),

												Short: "",
												Long: `
`,
											}

											return cmd
										}())

									cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")

									cmd.Flags().StringVar(&AccountMoid, "AccountMoid", "", "AccountMoid")

									cmd.Flags().StringVar(&ClassId, "ClassId", "", "ClassId")

									cmd.Flags().StringVar(&DomainGroupMoid, "DomainGroupMoid", "", "DomainGroupMoid")

									cmd.Flags().StringVar(&Moid, "Moid", "", "Moid")

									cmd.Flags().StringVar(&ObjectType, "ObjectType", "", "ObjectType")

									cmd.Flags().StringSliceVar(&Owners, "Owners", []string{}, "Owners")

									cmd.Flags().StringVar(&SharedScope, "SharedScope", "", "SharedScope")

									//Skipping var VersionContext with unknown data type MoVersionContext
									if isMoRef(openapi.MoVersionContext{}) {
										cmd.Flags().String("VersionContext", "", "VersionContext")
									}

									//Skipping var Parent with unknown data type MoBaseMoRelationship
									if isMoRef(openapi.MoBaseMoRelationship{}) {
										cmd.Flags().String("Parent", "", "Parent")
									}

									cmd.Flags().StringVar(&Action, "Action", "", "Action")

									cmd.Flags().StringVar(&InstId, "InstId", "", "InstId")

									cmd.Flags().BoolVar(&Internal, "Internal", false, "Internal")

									cmd.Flags().StringVar(&LastAction, "LastAction", "", "LastAction")

									cmd.Flags().StringVar(&Name, "Name", "", "Name")

									//Skipping var Properties with unknown data type WorkflowWorkflowInfoProperties
									if isMoRef(openapi.WorkflowWorkflowInfoProperties{}) {
										cmd.Flags().String("Properties", "", "Properties")
									}

									cmd.Flags().StringVar(&RetryFromTaskName, "RetryFromTaskName", "", "RetryFromTaskName")

									cmd.Flags().StringVar(&Src, "Src", "", "Src")

									cmd.Flags().StringVar(&Status, "Status", "", "Status")

									cmd.Flags().StringVar(&TraceId, "TraceId", "", "TraceId")

									cmd.Flags().StringVar(&Type, "Type", "", "Type")

									cmd.Flags().StringVar(&UserId, "UserId", "", "UserId")

									cmd.Flags().StringVar(&WaitReason, "WaitReason", "", "WaitReason")

									cmd.Flags().StringVar(&WorkflowMetaType, "WorkflowMetaType", "", "WorkflowMetaType")

									//Skipping var Var0ClusterProfile with unknown data type HyperflexClusterProfileRelationship
									if isMoRef(openapi.HyperflexClusterProfileRelationship{}) {
										cmd.Flags().String("Var0ClusterProfile", "", "Var0ClusterProfile")
									}

									//Skipping var Var1Profile with unknown data type ServerProfileRelationship
									if isMoRef(openapi.ServerProfileRelationship{}) {
										cmd.Flags().String("Var1Profile", "", "Var1Profile")
									}

									//Skipping var Account with unknown data type IamAccountRelationship
									if isMoRef(openapi.IamAccountRelationship{}) {
										cmd.Flags().String("Account", "", "Account")
									}

									//Skipping var Organization with unknown data type OrganizationOrganizationRelationship
									if isMoRef(openapi.OrganizationOrganizationRelationship{}) {
										cmd.Flags().String("Organization", "", "Organization")
									}

									//Skipping var ParentTaskInfo with unknown data type WorkflowTaskInfoRelationship
									if isMoRef(openapi.WorkflowTaskInfoRelationship{}) {
										cmd.Flags().String("ParentTaskInfo", "", "ParentTaskInfo")
									}

									//Skipping var PendingDynamicWorkflowInfo with unknown data type WorkflowPendingDynamicWorkflowInfoRelationship
									if isMoRef(openapi.WorkflowPendingDynamicWorkflowInfoRelationship{}) {
										cmd.Flags().String("PendingDynamicWorkflowInfo", "", "PendingDynamicWorkflowInfo")
									}

									//Skipping var Permission with unknown data type IamPermissionRelationship
									if isMoRef(openapi.IamPermissionRelationship{}) {
										cmd.Flags().String("Permission", "", "Permission")
									}

									//Skipping var WorkflowDefinition with unknown data type WorkflowWorkflowDefinitionRelationship
									if isMoRef(openapi.WorkflowWorkflowDefinitionRelationship{}) {
										cmd.Flags().String("WorkflowDefinition", "", "WorkflowDefinition")
									}

									return cmd
								}())

							return cmd
						}())

					return cmd
				}())

			return cmd
		}()
	return rootCmd
}
