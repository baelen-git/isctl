/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-07-31T04:35:53Z.
 *
 * API version: 1.0.9-2110
 * Contact: intersight@cisco.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/* Customised for isctl */
package openapi

import (
	"encoding/json"
	"fmt"

	yaml "gopkg.in/yaml.v2"
)

// TelemetryDruidAggregateRequest - Exposes a REST endpoint for performing queries against Druid time series data. View Telemetry allows [POST of a Druid query](http://druid.io/docs/latest/querying/querying). Manage Telemetry allows [READ of broker status](http://druid.io/docs/latest/operations/api-reference.html#broker).
type TelemetryDruidAggregateRequest struct {
	TelemetryDruidDataSourceMetadataRequest *TelemetryDruidDataSourceMetadataRequest
	TelemetryDruidGroupByRequest            *TelemetryDruidGroupByRequest
	TelemetryDruidScanRequest               *TelemetryDruidScanRequest
	TelemetryDruidSegmentMetadataRequest    *TelemetryDruidSegmentMetadataRequest
	TelemetryDruidTimeBoundaryRequest       *TelemetryDruidTimeBoundaryRequest
	TelemetryDruidTimeSeriesRequest         *TelemetryDruidTimeSeriesRequest
	TelemetryDruidTopNRequest               *TelemetryDruidTopNRequest
}

// TelemetryDruidDataSourceMetadataRequestAsTelemetryDruidAggregateRequest is a convenience function that returns TelemetryDruidDataSourceMetadataRequest wrapped in TelemetryDruidAggregateRequest
func TelemetryDruidDataSourceMetadataRequestAsTelemetryDruidAggregateRequest(v *TelemetryDruidDataSourceMetadataRequest) TelemetryDruidAggregateRequest {
	return TelemetryDruidAggregateRequest{TelemetryDruidDataSourceMetadataRequest: v}
}

// TelemetryDruidGroupByRequestAsTelemetryDruidAggregateRequest is a convenience function that returns TelemetryDruidGroupByRequest wrapped in TelemetryDruidAggregateRequest
func TelemetryDruidGroupByRequestAsTelemetryDruidAggregateRequest(v *TelemetryDruidGroupByRequest) TelemetryDruidAggregateRequest {
	return TelemetryDruidAggregateRequest{TelemetryDruidGroupByRequest: v}
}

// TelemetryDruidScanRequestAsTelemetryDruidAggregateRequest is a convenience function that returns TelemetryDruidScanRequest wrapped in TelemetryDruidAggregateRequest
func TelemetryDruidScanRequestAsTelemetryDruidAggregateRequest(v *TelemetryDruidScanRequest) TelemetryDruidAggregateRequest {
	return TelemetryDruidAggregateRequest{TelemetryDruidScanRequest: v}
}

// TelemetryDruidSegmentMetadataRequestAsTelemetryDruidAggregateRequest is a convenience function that returns TelemetryDruidSegmentMetadataRequest wrapped in TelemetryDruidAggregateRequest
func TelemetryDruidSegmentMetadataRequestAsTelemetryDruidAggregateRequest(v *TelemetryDruidSegmentMetadataRequest) TelemetryDruidAggregateRequest {
	return TelemetryDruidAggregateRequest{TelemetryDruidSegmentMetadataRequest: v}
}

// TelemetryDruidTimeBoundaryRequestAsTelemetryDruidAggregateRequest is a convenience function that returns TelemetryDruidTimeBoundaryRequest wrapped in TelemetryDruidAggregateRequest
func TelemetryDruidTimeBoundaryRequestAsTelemetryDruidAggregateRequest(v *TelemetryDruidTimeBoundaryRequest) TelemetryDruidAggregateRequest {
	return TelemetryDruidAggregateRequest{TelemetryDruidTimeBoundaryRequest: v}
}

// TelemetryDruidTimeSeriesRequestAsTelemetryDruidAggregateRequest is a convenience function that returns TelemetryDruidTimeSeriesRequest wrapped in TelemetryDruidAggregateRequest
func TelemetryDruidTimeSeriesRequestAsTelemetryDruidAggregateRequest(v *TelemetryDruidTimeSeriesRequest) TelemetryDruidAggregateRequest {
	return TelemetryDruidAggregateRequest{TelemetryDruidTimeSeriesRequest: v}
}

// TelemetryDruidTopNRequestAsTelemetryDruidAggregateRequest is a convenience function that returns TelemetryDruidTopNRequest wrapped in TelemetryDruidAggregateRequest
func TelemetryDruidTopNRequestAsTelemetryDruidAggregateRequest(v *TelemetryDruidTopNRequest) TelemetryDruidAggregateRequest {
	return TelemetryDruidAggregateRequest{TelemetryDruidTopNRequest: v}
}

// Unmarshl JSON data into one of the pointers in the struct
func (dst *TelemetryDruidAggregateRequest) UnmarshalJSON(data []byte) error {
	var err error

	var unmarshaled map[string]interface{}
	err = json.Unmarshal(data, &unmarshaled)
	if err != nil {
		return err
	}
	if v, ok := unmarshaled["queryType"]; ok {
		switch v {
		case "dataSourceMetadata":
			var result *TelemetryDruidDataSourceMetadataRequest = &TelemetryDruidDataSourceMetadataRequest{}
			err = json.Unmarshal(data, result)
			if err != nil {
				return err
			}
			dst.TelemetryDruidDataSourceMetadataRequest = result
			return nil
		case "groupBy":
			var result *TelemetryDruidGroupByRequest = &TelemetryDruidGroupByRequest{}
			err = json.Unmarshal(data, result)
			if err != nil {
				return err
			}
			dst.TelemetryDruidGroupByRequest = result
			return nil
		case "scan":
			var result *TelemetryDruidScanRequest = &TelemetryDruidScanRequest{}
			err = json.Unmarshal(data, result)
			if err != nil {
				return err
			}
			dst.TelemetryDruidScanRequest = result
			return nil
		case "segmentMetadata":
			var result *TelemetryDruidSegmentMetadataRequest = &TelemetryDruidSegmentMetadataRequest{}
			err = json.Unmarshal(data, result)
			if err != nil {
				return err
			}
			dst.TelemetryDruidSegmentMetadataRequest = result
			return nil
		case "telemetry.DruidDataSourceMetadataRequest":
			var result *TelemetryDruidDataSourceMetadataRequest = &TelemetryDruidDataSourceMetadataRequest{}
			err = json.Unmarshal(data, result)
			if err != nil {
				return err
			}
			dst.TelemetryDruidDataSourceMetadataRequest = result
			return nil
		case "telemetry.DruidGroupByRequest":
			var result *TelemetryDruidGroupByRequest = &TelemetryDruidGroupByRequest{}
			err = json.Unmarshal(data, result)
			if err != nil {
				return err
			}
			dst.TelemetryDruidGroupByRequest = result
			return nil
		case "telemetry.DruidScanRequest":
			var result *TelemetryDruidScanRequest = &TelemetryDruidScanRequest{}
			err = json.Unmarshal(data, result)
			if err != nil {
				return err
			}
			dst.TelemetryDruidScanRequest = result
			return nil
		case "telemetry.DruidSegmentMetadataRequest":
			var result *TelemetryDruidSegmentMetadataRequest = &TelemetryDruidSegmentMetadataRequest{}
			err = json.Unmarshal(data, result)
			if err != nil {
				return err
			}
			dst.TelemetryDruidSegmentMetadataRequest = result
			return nil
		case "telemetry.DruidTimeBoundaryRequest":
			var result *TelemetryDruidTimeBoundaryRequest = &TelemetryDruidTimeBoundaryRequest{}
			err = json.Unmarshal(data, result)
			if err != nil {
				return err
			}
			dst.TelemetryDruidTimeBoundaryRequest = result
			return nil
		case "telemetry.DruidTimeSeriesRequest":
			var result *TelemetryDruidTimeSeriesRequest = &TelemetryDruidTimeSeriesRequest{}
			err = json.Unmarshal(data, result)
			if err != nil {
				return err
			}
			dst.TelemetryDruidTimeSeriesRequest = result
			return nil
		case "telemetry.DruidTopNRequest":
			var result *TelemetryDruidTopNRequest = &TelemetryDruidTopNRequest{}
			err = json.Unmarshal(data, result)
			if err != nil {
				return err
			}
			dst.TelemetryDruidTopNRequest = result
			return nil
		case "timeBoundary":
			var result *TelemetryDruidTimeBoundaryRequest = &TelemetryDruidTimeBoundaryRequest{}
			err = json.Unmarshal(data, result)
			if err != nil {
				return err
			}
			dst.TelemetryDruidTimeBoundaryRequest = result
			return nil
		case "timeseries":
			var result *TelemetryDruidTimeSeriesRequest = &TelemetryDruidTimeSeriesRequest{}
			err = json.Unmarshal(data, result)
			if err != nil {
				return err
			}
			dst.TelemetryDruidTimeSeriesRequest = result
			return nil
		case "topN":
			var result *TelemetryDruidTopNRequest = &TelemetryDruidTopNRequest{}
			err = json.Unmarshal(data, result)
			if err != nil {
				return err
			}
			dst.TelemetryDruidTopNRequest = result
			return nil
		default:
			return fmt.Errorf("No oneOf model has 'queryType' equal to %s", v)
		}
	} else {
		return fmt.Errorf("Discriminator property 'queryType' not found in unmarshaled payload: %+v", unmarshaled)
	}

}

// Marshl data from the first non-nil pointers in the struct to JSON
func (src *TelemetryDruidAggregateRequest) MarshalJSON() ([]byte, error) {
	if src.TelemetryDruidDataSourceMetadataRequest != nil {
		return json.Marshal(&src.TelemetryDruidDataSourceMetadataRequest)
	}

	if src.TelemetryDruidGroupByRequest != nil {
		return json.Marshal(&src.TelemetryDruidGroupByRequest)
	}

	if src.TelemetryDruidScanRequest != nil {
		return json.Marshal(&src.TelemetryDruidScanRequest)
	}

	if src.TelemetryDruidSegmentMetadataRequest != nil {
		return json.Marshal(&src.TelemetryDruidSegmentMetadataRequest)
	}

	if src.TelemetryDruidTimeBoundaryRequest != nil {
		return json.Marshal(&src.TelemetryDruidTimeBoundaryRequest)
	}

	if src.TelemetryDruidTimeSeriesRequest != nil {
		return json.Marshal(&src.TelemetryDruidTimeSeriesRequest)
	}

	if src.TelemetryDruidTopNRequest != nil {
		return json.Marshal(&src.TelemetryDruidTopNRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Marshl data from the first non-nil pointers in the struct to YAML
func (src *TelemetryDruidAggregateRequest) MarshalYAML() ([]byte, error) {
	if src.TelemetryDruidDataSourceMetadataRequest != nil {
		return yaml.Marshal(&src.TelemetryDruidDataSourceMetadataRequest)
	}

	if src.TelemetryDruidGroupByRequest != nil {
		return yaml.Marshal(&src.TelemetryDruidGroupByRequest)
	}

	if src.TelemetryDruidScanRequest != nil {
		return yaml.Marshal(&src.TelemetryDruidScanRequest)
	}

	if src.TelemetryDruidSegmentMetadataRequest != nil {
		return yaml.Marshal(&src.TelemetryDruidSegmentMetadataRequest)
	}

	if src.TelemetryDruidTimeBoundaryRequest != nil {
		return yaml.Marshal(&src.TelemetryDruidTimeBoundaryRequest)
	}

	if src.TelemetryDruidTimeSeriesRequest != nil {
		return yaml.Marshal(&src.TelemetryDruidTimeSeriesRequest)
	}

	if src.TelemetryDruidTopNRequest != nil {
		return yaml.Marshal(&src.TelemetryDruidTopNRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TelemetryDruidAggregateRequest) GetActualInstance() interface{} {
	if obj.TelemetryDruidDataSourceMetadataRequest != nil {
		return obj.TelemetryDruidDataSourceMetadataRequest
	}

	if obj.TelemetryDruidGroupByRequest != nil {
		return obj.TelemetryDruidGroupByRequest
	}

	if obj.TelemetryDruidScanRequest != nil {
		return obj.TelemetryDruidScanRequest
	}

	if obj.TelemetryDruidSegmentMetadataRequest != nil {
		return obj.TelemetryDruidSegmentMetadataRequest
	}

	if obj.TelemetryDruidTimeBoundaryRequest != nil {
		return obj.TelemetryDruidTimeBoundaryRequest
	}

	if obj.TelemetryDruidTimeSeriesRequest != nil {
		return obj.TelemetryDruidTimeSeriesRequest
	}

	if obj.TelemetryDruidTopNRequest != nil {
		return obj.TelemetryDruidTopNRequest
	}

	// all schemas are nil
	return nil
}
