/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-01-11T18:30:19Z.
 *
 * API version: 1.0.9-3252
 * Contact: intersight@cisco.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/* Customised for isctl */
package openapi

import (
	"encoding/json"
)

// KubernetesAddonAllOf Definition of the list of properties defined in 'kubernetes.Addon', excluding properties defined in parent classes.
type KubernetesAddonAllOf struct {
	// The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
	ClassId string `json:"ClassId" yaml:"ClassId"`
	// The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
	ObjectType string `json:"ObjectType" yaml:"ObjectType"`
	// Addon install strategy to determine whether an addon is installed if not present. * `InstallOnly` - Only install in green field. No action in case of failure or removal. * `NoAction` - No install action performed. * `Always` - Attempt install if chart is not already installed.
	InstallStrategy *string `json:"InstallStrategy,omitempty" yaml:"InstallStrategy,omitempty"`
	// Name of addon to be installed on a Kubernetes cluster.
	Name         *string              `json:"Name,omitempty" yaml:"Name,omitempty"`
	OverrideSets []KubernetesKeyValue `json:"OverrideSets,omitempty" yaml:"OverrideSets,omitempty"`
	// Properties that can be overridden for an addon.
	Overrides *string `json:"Overrides,omitempty" yaml:"Overrides,omitempty"`
	// Addon upgrade strategy to determine whether an addon configuration is overwritten on upgrade. * `UpgradeOnly` - Attempt upgrade if chart or overrides options change, no action on upgrade failure. * `NoAction` - This choice enables No upgrades to be performed. * `ReinstallOnFailure` - Attempt upgrade first. Remove and install on upgrade failure. * `AlwaysReinstall` - Always remove older release and reinstall.
	UpgradeStrategy *string                                `json:"UpgradeStrategy,omitempty" yaml:"UpgradeStrategy,omitempty"`
	AddonDefinition *KubernetesAddonDefinitionRelationship `json:"AddonDefinition,omitempty" yaml:"AddonDefinition,omitempty"`
	Organization    *OrganizationOrganizationRelationship  `json:"Organization,omitempty" yaml:"Organization,omitempty"`
}

// NewKubernetesAddonAllOf instantiates a new KubernetesAddonAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesAddonAllOf(classId string, objectType string) *KubernetesAddonAllOf {
	this := KubernetesAddonAllOf{}
	this.ClassId = classId
	this.ObjectType = objectType
	var installStrategy string = "InstallOnly"
	this.InstallStrategy = &installStrategy
	var upgradeStrategy string = "UpgradeOnly"
	this.UpgradeStrategy = &upgradeStrategy
	return &this
}

// NewKubernetesAddonAllOfWithDefaults instantiates a new KubernetesAddonAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesAddonAllOfWithDefaults() *KubernetesAddonAllOf {
	this := KubernetesAddonAllOf{}
	var classId string = "kubernetes.Addon"
	this.ClassId = classId
	var objectType string = "kubernetes.Addon"
	this.ObjectType = objectType
	var installStrategy string = "InstallOnly"
	this.InstallStrategy = &installStrategy
	var upgradeStrategy string = "UpgradeOnly"
	this.UpgradeStrategy = &upgradeStrategy
	return &this
}

// GetClassId returns the ClassId field value
func (o *KubernetesAddonAllOf) GetClassId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value
// and a boolean to check if the value has been set.
func (o *KubernetesAddonAllOf) GetClassIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassId, true
}

// SetClassId sets field value
func (o *KubernetesAddonAllOf) SetClassId(v string) {
	o.ClassId = v
}

// GetObjectType returns the ObjectType field value
func (o *KubernetesAddonAllOf) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *KubernetesAddonAllOf) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *KubernetesAddonAllOf) SetObjectType(v string) {
	o.ObjectType = v
}

// GetInstallStrategy returns the InstallStrategy field value if set, zero value otherwise.
func (o *KubernetesAddonAllOf) GetInstallStrategy() string {
	if o == nil || o.InstallStrategy == nil {
		var ret string
		return ret
	}
	return *o.InstallStrategy
}

// GetInstallStrategyOk returns a tuple with the InstallStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAddonAllOf) GetInstallStrategyOk() (*string, bool) {
	if o == nil || o.InstallStrategy == nil {
		return nil, false
	}
	return o.InstallStrategy, true
}

// HasInstallStrategy returns a boolean if a field has been set.
func (o *KubernetesAddonAllOf) HasInstallStrategy() bool {
	if o != nil && o.InstallStrategy != nil {
		return true
	}

	return false
}

// SetInstallStrategy gets a reference to the given string and assigns it to the InstallStrategy field.
func (o *KubernetesAddonAllOf) SetInstallStrategy(v string) {
	o.InstallStrategy = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *KubernetesAddonAllOf) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAddonAllOf) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *KubernetesAddonAllOf) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *KubernetesAddonAllOf) SetName(v string) {
	o.Name = &v
}

// GetOverrideSets returns the OverrideSets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesAddonAllOf) GetOverrideSets() []KubernetesKeyValue {
	if o == nil {
		var ret []KubernetesKeyValue
		return ret
	}
	return o.OverrideSets
}

// GetOverrideSetsOk returns a tuple with the OverrideSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesAddonAllOf) GetOverrideSetsOk() (*[]KubernetesKeyValue, bool) {
	if o == nil || o.OverrideSets == nil {
		return nil, false
	}
	return &o.OverrideSets, true
}

// HasOverrideSets returns a boolean if a field has been set.
func (o *KubernetesAddonAllOf) HasOverrideSets() bool {
	if o != nil && o.OverrideSets != nil {
		return true
	}

	return false
}

// SetOverrideSets gets a reference to the given []KubernetesKeyValue and assigns it to the OverrideSets field.
func (o *KubernetesAddonAllOf) SetOverrideSets(v []KubernetesKeyValue) {
	o.OverrideSets = v
}

// GetOverrides returns the Overrides field value if set, zero value otherwise.
func (o *KubernetesAddonAllOf) GetOverrides() string {
	if o == nil || o.Overrides == nil {
		var ret string
		return ret
	}
	return *o.Overrides
}

// GetOverridesOk returns a tuple with the Overrides field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAddonAllOf) GetOverridesOk() (*string, bool) {
	if o == nil || o.Overrides == nil {
		return nil, false
	}
	return o.Overrides, true
}

// HasOverrides returns a boolean if a field has been set.
func (o *KubernetesAddonAllOf) HasOverrides() bool {
	if o != nil && o.Overrides != nil {
		return true
	}

	return false
}

// SetOverrides gets a reference to the given string and assigns it to the Overrides field.
func (o *KubernetesAddonAllOf) SetOverrides(v string) {
	o.Overrides = &v
}

// GetUpgradeStrategy returns the UpgradeStrategy field value if set, zero value otherwise.
func (o *KubernetesAddonAllOf) GetUpgradeStrategy() string {
	if o == nil || o.UpgradeStrategy == nil {
		var ret string
		return ret
	}
	return *o.UpgradeStrategy
}

// GetUpgradeStrategyOk returns a tuple with the UpgradeStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAddonAllOf) GetUpgradeStrategyOk() (*string, bool) {
	if o == nil || o.UpgradeStrategy == nil {
		return nil, false
	}
	return o.UpgradeStrategy, true
}

// HasUpgradeStrategy returns a boolean if a field has been set.
func (o *KubernetesAddonAllOf) HasUpgradeStrategy() bool {
	if o != nil && o.UpgradeStrategy != nil {
		return true
	}

	return false
}

// SetUpgradeStrategy gets a reference to the given string and assigns it to the UpgradeStrategy field.
func (o *KubernetesAddonAllOf) SetUpgradeStrategy(v string) {
	o.UpgradeStrategy = &v
}

// GetAddonDefinition returns the AddonDefinition field value if set, zero value otherwise.
func (o *KubernetesAddonAllOf) GetAddonDefinition() KubernetesAddonDefinitionRelationship {
	if o == nil || o.AddonDefinition == nil {
		var ret KubernetesAddonDefinitionRelationship
		return ret
	}
	return *o.AddonDefinition
}

// GetAddonDefinitionOk returns a tuple with the AddonDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAddonAllOf) GetAddonDefinitionOk() (*KubernetesAddonDefinitionRelationship, bool) {
	if o == nil || o.AddonDefinition == nil {
		return nil, false
	}
	return o.AddonDefinition, true
}

// HasAddonDefinition returns a boolean if a field has been set.
func (o *KubernetesAddonAllOf) HasAddonDefinition() bool {
	if o != nil && o.AddonDefinition != nil {
		return true
	}

	return false
}

// SetAddonDefinition gets a reference to the given KubernetesAddonDefinitionRelationship and assigns it to the AddonDefinition field.
func (o *KubernetesAddonAllOf) SetAddonDefinition(v KubernetesAddonDefinitionRelationship) {
	o.AddonDefinition = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *KubernetesAddonAllOf) GetOrganization() OrganizationOrganizationRelationship {
	if o == nil || o.Organization == nil {
		var ret OrganizationOrganizationRelationship
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesAddonAllOf) GetOrganizationOk() (*OrganizationOrganizationRelationship, bool) {
	if o == nil || o.Organization == nil {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *KubernetesAddonAllOf) HasOrganization() bool {
	if o != nil && o.Organization != nil {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given OrganizationOrganizationRelationship and assigns it to the Organization field.
func (o *KubernetesAddonAllOf) SetOrganization(v OrganizationOrganizationRelationship) {
	o.Organization = &v
}

func (o KubernetesAddonAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ClassId"] = o.ClassId
	}
	if true {
		toSerialize["ObjectType"] = o.ObjectType
	}
	if o.InstallStrategy != nil {
		toSerialize["InstallStrategy"] = o.InstallStrategy
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.OverrideSets != nil {
		toSerialize["OverrideSets"] = o.OverrideSets
	}
	if o.Overrides != nil {
		toSerialize["Overrides"] = o.Overrides
	}
	if o.UpgradeStrategy != nil {
		toSerialize["UpgradeStrategy"] = o.UpgradeStrategy
	}
	if o.AddonDefinition != nil {
		toSerialize["AddonDefinition"] = o.AddonDefinition
	}
	if o.Organization != nil {
		toSerialize["Organization"] = o.Organization
	}
	return json.Marshal(toSerialize)
}

type NullableKubernetesAddonAllOf struct {
	value *KubernetesAddonAllOf
	isSet bool
}

func (v NullableKubernetesAddonAllOf) Get() *KubernetesAddonAllOf {
	return v.value
}

func (v *NullableKubernetesAddonAllOf) Set(val *KubernetesAddonAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesAddonAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesAddonAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesAddonAllOf(val *KubernetesAddonAllOf) *NullableKubernetesAddonAllOf {
	return &NullableKubernetesAddonAllOf{value: val, isSet: true}
}

func (v NullableKubernetesAddonAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesAddonAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
