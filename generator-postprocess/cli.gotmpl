package main

import (
    "log"
    "net/http"
    "os"
    "fmt"
    "encoding/json"

    "github.com/cgascoig/isctl/openapi"
    "github.com/spf13/cobra"
)


{{ define "cliitem" }}
func () *cobra.Command {
    cmd := &cobra.Command{
        Use: "{{ .Token }}",
        {{ if .Operation }}
        Run: func(cmd *cobra.Command, args []string) {
            client.GetConfig().Debug = verbose

            req := client.{{ .Operation.BaseName }}Api.{{ .Operation.OperationID }}(authCtx{{ if .Parameter }}, args[0]{{ end }})

            {{ if ne .BodyParamType "" }}
            body := openapi.New{{ .BodyParamType }}()

            // Gather body from JSON on stdin. 
            err := json.NewDecoder(os.Stdin).Decode(&body)
            if err != nil {
                resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
                return
            }

            req = req.{{ .BodyParamType }}(*body)
            
            {{ end }}

            {{ if ne .Operation.ReturnType "" }}
            res, httpResponse, err := req.Execute()
            resultHandler(res, httpResponse, err)
            {{ else }}
            httpResponse, err := req.Execute()
            resultHandler(nil, httpResponse, err)
            {{ end }}
        }, 
        {{ end }}
        {{ if .Parameter }}
        Args: cobra.ExactArgs(1),
        {{ end }}
        
        Short: "{{ .Help }}",
        Long: `{{ .Help }}
{{ if ne .BodyParamType "" }}
Provide resource body as JSON on standard input{{ end }}`,
    }
    
    {{ range $k, $v := .Children }}
        cmd.AddCommand({{ template "cliitem" $v}}())
    {{ end }}

    return cmd
}{{ end }}

func runCmd(cmd *cobra.Command, args []string) {
    log.Printf("Running command %s with args %v", cmd.Use, args)
}

// ResultHandler is the function signature to handle API results
type ResultHandler = func(result interface{}, httpResponse *http.Response, err error)

// GetCommands returns the cobra command tree for the API
func GetCommands(client *openapi.APIClient, resultHandler ResultHandler) *cobra.Command {
    rootCmd := {{ template "cliitem" . }}()
    return rootCmd
}
