package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"reflect"

	"github.com/cgascoig/isctl/openapi"
	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
)


{{ define "cliitem" }}
func () *cobra.Command {
    {{ range .BodyParamVars }}
        {{ if eq .DataType "string" "bool" "[]string" }}
            var {{ .Name }} {{ .DataType }}
        {{ else }}
            //Skipping var {{ .Name }} with unknown data type {{ .DataType }}
        {{ end }}
    {{ end }}
    cmd := &cobra.Command{
        Use: "{{ .Token }}",
        {{ if .Operation }}
        Run: func(cmd *cobra.Command, args []string) {
            client.GetConfig().Debug = verbose

            req := client.{{ .Operation.BaseName }}Api.{{ .Operation.OperationID }}(authCtx{{ if .Parameter }}, args[0]{{ end }})

            {{ if ne .BodyParamType "" }}
            body := openapi.New{{ .BodyParamType }}()

            //Set class id and object type by default
            body.ClassId = "{{ .Operation.ReturnBaseType }}"
            body.ObjectType = "{{ .Operation.ReturnBaseType }}"

            bodyFormat, err := cmd.Flags().GetString("bodyformat")
            if err == nil && bodyFormat == "json" {
                // Gather body from JSON on stdin. 
                fmt.Println("Waiting for JSON body: ")
                err := json.NewDecoder(os.Stdin).Decode(&body)
                if err != nil {
                    resultHandler(nil, nil, fmt.Errorf("Decoding JSON: %v", err))
                    return
                }
            }

            {{ range .BodyParamVars }}
                {{ if eq .DataType "string" "bool" "[]string" }}
                    if isFlagPassed(cmd.Flags(), "{{ .Name }}") {
                        body.{{ .Name }} = {{ if not .Required }}&{{ end }}{{ .Name }}
                    }
                {{ else if not .Ignore }}
                    if isFlagPassed(cmd.Flags(), "{{ .Name }}") && isMoRef(openapi.{{ .DataType }}{}) {
                        if f, err := cmd.Flags().GetString("{{ .Name }}"); err == nil {
                            paramVal := openapi.{{ .DataType }}{}
                            ok := setMoRefSelector(&paramVal, fmt.Sprintf("Name eq '%s'", f))

                            if ok {
                                body.{{ .Name }} = &paramVal
//                                if v, ok := v.(openapi.{{ .DataType }}); ok {
//                                    body.{{ .Name }} = &v
//                                }
                            }
                        }
                    }
                {{ end }}
            {{ end }}

            req = req.{{ .BodyParamType }}(*body)
            
            {{ end }}

            {{ if ne .Operation.ReturnType "" }}
            res, httpResponse, err := req.Execute()
            resultHandler(res, httpResponse, err)
            {{ else }}
            httpResponse, err := req.Execute()
            resultHandler(nil, httpResponse, err)
            {{ end }}
        }, 
        {{ end }}
        {{ if .Parameter }}
        Args: cobra.ExactArgs(1),
        {{ end }}
        
        Short: "{{ .Help }}",
        Long: `{{ .Help }}
{{ if ne .BodyParamType "" }}
Provide resource body as JSON on standard input{{ end }}`,
    }
    
    {{ range $k, $v := .Children }}
        cmd.AddCommand({{ template "cliitem" $v}}())
    {{ end }}

    {{ if ne .BodyParamType "" }}
        cmd.Flags().String("bodyformat", "", "Format of request body passed on stdin (e.g. \"json\"). Default: don't read from stdin")
    {{ end }}

    {{ range .BodyParamVars }}
        {{ if eq .DataType "string" }}
            cmd.Flags().StringVar(&{{ .Name }}, "{{ .Name }}", "", "{{ .Name }}")
        {{ else if eq .DataType "bool" }}
            cmd.Flags().BoolVar(&{{ .Name }}, "{{ .Name }}", false, "{{ .Name }}")
        {{ else if eq .DataType "[]string" }}
            cmd.Flags().StringSliceVar(&{{ .Name }}, "{{ .Name }}", []string{}, "{{ .Name }}")
        {{ else if not .Ignore }}
            //Skipping var {{ .Name }} with unknown data type {{ .DataType }}
            if isMoRef(openapi.{{ .DataType }}{}) {
                cmd.Flags().String("{{ .Name }}", "", "{{ .Name }}")
            }
        {{ end }}
    {{ end }}

    return cmd
}{{ end }}

func isFlagPassed(flagset *pflag.FlagSet, name string) bool {
    found := false
    flagset.Visit(func(f *pflag.Flag) {
        if f.Name == name {
            found = true
        }
    })
    return found
}

func isMoRef(v interface{}) bool {
    val := reflect.Indirect(reflect.ValueOf(v))
	t := val.Type()
	if t.Kind() != reflect.Struct {
		return false
	}

	_, ok := t.FieldByName("MoMoRef")

	return ok
}

func setMoRefSelector(v interface{}, selector string) bool {
    if !isMoRef(v) {
        return false
    }

    moref := new(openapi.MoMoRef)
    moref.ClassId = "mo.MoRef"
    moref.Selector = &selector

    val := reflect.ValueOf(v).Elem()
    val.FieldByName("MoMoRef").Set(reflect.ValueOf(moref))

    return true
}

func runCmd(cmd *cobra.Command, args []string) {
    log.Printf("Running command %s with args %v", cmd.Use, args)
}

// ResultHandler is the function signature to handle API results
type ResultHandler = func(result interface{}, httpResponse *http.Response, err error)

// GetCommands returns the cobra command tree for the API
func GetCommands(client *openapi.APIClient, resultHandler ResultHandler) *cobra.Command {
    rootCmd := {{ template "cliitem" . }}()
    return rootCmd
}
