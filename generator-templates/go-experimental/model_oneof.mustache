// {{classname}} - {{#description}}{{{description}}}{{/description}}{{^description}}struct for {{{classname}}}{{/description}}
type {{classname}} struct {
	{{#oneOf}}
	{{{.}}} *{{{.}}}
	{{/oneOf}}
}

{{#oneOf}}
// {{{.}}}As{{classname}} is a convenience function that returns {{{.}}} wrapped in {{classname}}
func {{{.}}}As{{classname}}(v *{{{.}}}) {{classname}} {
    return {{classname}}{ {{{.}}}: v}
}

{{/oneOf}}

// Unmarshl JSON data into one of the pointers in the struct
func (dst *{{classname}}) UnmarshalJSON(data []byte) error {
	var err error

	{{#discriminator}}
	var unmarshaled map[string]interface{}
	err = json.Unmarshal(data, &unmarshaled)
	if err != nil {
		return err
	}
	if v, ok := unmarshaled["{{discriminator.propertyBaseName}}"]; ok {
		switch v {
		{{#discriminator.mappedModels}}
			case "{{mappingName}}":
				var result *{{modelName}} = &{{modelName}}{}
				err = json.Unmarshal(data, result)
				if err != nil {
					return err
				}
				dst.{{modelName}} = result
				return nil
		{{/discriminator.mappedModels}}
			default:
				return fmt.Errorf("No oneOf model has '{{discriminator.propertyBaseName}}' equal to %s", v)
		}
	} else {
		return fmt.Errorf("Discriminator property '{{discriminator.propertyBaseName}}' not found in unmarshaled payload: %+v", unmarshaled)
	}
	{{/discriminator}}
	{{^discriminator}}
	{{#oneOf}}
	var unmarshaled{{{.}}} *{{{.}}} = &{{{.}}}{}
	err = json.Unmarshal(data, unmarshaled{{{.}}})
	if err == nil {
		dst.{{classname}} = unmarshaled{{{.}}}
		return nil
	}
	{{/oneOf}}
	return fmt.Errorf("No oneOf model could be deserialized from payload: %s", string(data))
	{{/discriminator}}

}

// Marshl data from the first non-nil pointers in the struct to JSON
func (src *{{classname}}) MarshalJSON() ([]byte, error) {
{{#oneOf}}
	if src.{{{.}}} != nil {
		return json.Marshal(&src.{{{.}}})
	}

{{/oneOf}}
	return nil, nil // no data in oneOf schemas
}

// Marshl data from the first non-nil pointers in the struct to YAML
func (src *{{classname}}) MarshalYAML() ([]byte, error) {
{{#oneOf}}
	if src.{{{.}}} != nil {
		return yaml.Marshal(&src.{{{.}}})
	}

{{/oneOf}}
	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *{{classname}}) GetActualInstance() (interface{}) {
{{#oneOf}}
	if obj.{{{.}}} != nil {
		return obj.{{{.}}}
	}

{{/oneOf}}
	// all schemas are nil
	return nil
}
